/**
 * @fileoverview added by tsickle
 * Generated from: tree-indent.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function NzTreeIndentComponent_span_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 1);
} if (rf & 2) {
    const index_r2 = ctx.index;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ctx_r0.unitMapOfClass(index_r2));
} }
export class NzTreeIndentComponent {
    constructor() {
        this.nzSelectMode = false;
        this.listOfUnit = [];
    }
    /**
     * @param {?} index
     * @return {?}
     */
    unitMapOfClass(index) {
        return {
            [`ant-tree-indent-unit`]: !this.nzSelectMode,
            [`ant-tree-indent-unit-start`]: !this.nzSelectMode && (/** @type {?} */ (this.nzIsStart))[index + 1],
            [`ant-tree-indent-unit-end`]: !this.nzSelectMode && (/** @type {?} */ (this.nzIsEnd))[index + 1],
            [`ant-select-tree-indent-unit`]: this.nzSelectMode,
            [`ant-select-tree-indent-unit-start`]: this.nzSelectMode && (/** @type {?} */ (this.nzIsStart))[index + 1],
            [`ant-select-tree-indent-unit-end`]: this.nzSelectMode && (/** @type {?} */ (this.nzIsEnd))[index + 1]
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        const { nzTreeLevel } = changes;
        if (nzTreeLevel) {
            this.listOfUnit = [...new Array(nzTreeLevel.currentValue || 0)];
        }
    }
}
NzTreeIndentComponent.ɵfac = function NzTreeIndentComponent_Factory(t) { return new (t || NzTreeIndentComponent)(); };
NzTreeIndentComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NzTreeIndentComponent, selectors: [["nz-tree-indent"]], hostVars: 5, hostBindings: function NzTreeIndentComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-hidden", true);
        ɵngcc0.ɵɵclassProp("ant-tree-indent", !ctx.nzSelectMode)("ant-select-tree-indent", ctx.nzSelectMode);
    } }, inputs: { nzSelectMode: "nzSelectMode", nzTreeLevel: "nzTreeLevel", nzIsStart: "nzIsStart", nzIsEnd: "nzIsEnd" }, exportAs: ["nzTreeIndent"], features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [[3, "ngClass", 4, "ngFor", "ngForOf"], [3, "ngClass"]], template: function NzTreeIndentComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, NzTreeIndentComponent_span_0_Template, 1, 1, "span", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ctx.listOfUnit);
    } }, directives: [ɵngcc1.NgForOf, ɵngcc1.NgClass], encapsulation: 2, changeDetection: 0 });
NzTreeIndentComponent.propDecorators = {
    nzTreeLevel: [{ type: Input }],
    nzIsStart: [{ type: Input }],
    nzIsEnd: [{ type: Input }],
    nzSelectMode: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzTreeIndentComponent, [{
        type: Component,
        args: [{
                selector: 'nz-tree-indent',
                exportAs: 'nzTreeIndent',
                template: ` <span *ngFor="let i of listOfUnit; let index = index" [ngClass]="unitMapOfClass(index)"></span> `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                host: {
                    '[attr.aria-hidden]': 'true',
                    '[class.ant-tree-indent]': '!nzSelectMode',
                    '[class.ant-select-tree-indent]': 'nzSelectMode'
                }
            }]
    }], function () { return []; }, { nzSelectMode: [{
            type: Input
        }], nzTreeLevel: [{
            type: Input
        }], nzIsStart: [{
            type: Input
        }], nzIsEnd: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    NzTreeIndentComponent.prototype.nzTreeLevel;
    /** @type {?} */
    NzTreeIndentComponent.prototype.nzIsStart;
    /** @type {?} */
    NzTreeIndentComponent.prototype.nzIsEnd;
    /** @type {?} */
    NzTreeIndentComponent.prototype.nzSelectMode;
    /** @type {?} */
    NzTreeIndentComponent.prototype.listOfUnit;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1pbmRlbnQuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyJuZzovbmctem9ycm8tYW50ZC90cmVlL3RyZWUtaW5kZW50LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFLQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBb0MsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7Ozs7O0FBYzVHLE1BQU0sT0FBTyxxQkFBcUI7QUFBRyxJQVpyQztBQUNHLFFBZVEsaUJBQVksR0FBRyxLQUFLLENBQUM7QUFDaEMsUUFDRSxlQUFVLEdBQWEsRUFBRSxDQUFDO0FBQzVCLElBb0JBLENBQUM7QUFDRDtBQUFRO0FBQXdCO0FBQW1CO0FBQVEsSUFwQnpELGNBQWMsQ0FBQyxLQUFhO0FBQUksUUFDOUIsT0FBTztBQUNYLFlBQU0sQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVk7QUFDbEQsWUFBTSxDQUFDLDRCQUE0QixDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxJQUFJLG1CQUFBLElBQUksQ0FBQyxTQUFTLEVBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQ3RGLFlBQU0sQ0FBQywwQkFBMEIsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksSUFBSSxtQkFBQSxJQUFJLENBQUMsT0FBTyxFQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztBQUNsRixZQUFNLENBQUMsNkJBQTZCLENBQUMsRUFBRSxJQUFJLENBQUMsWUFBWTtBQUN4RCxZQUFNLENBQUMsbUNBQW1DLENBQUMsRUFBRSxJQUFJLENBQUMsWUFBWSxJQUFJLG1CQUFBLElBQUksQ0FBQyxTQUFTLEVBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQzVGLFlBQU0sQ0FBQyxpQ0FBaUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxZQUFZLElBQUksbUJBQUEsSUFBSSxDQUFDLE9BQU8sRUFBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDeEYsU0FBSyxDQUFDO0FBQ04sSUFBRSxDQUFDO0FBQ0g7QUFDTztBQUVKO0FBQVEsSUFGVCxRQUFRLEtBQVUsQ0FBQztBQUNyQjtBQUNPO0FBQTBCO0FBQzNCO0FBQVEsSUFEWixXQUFXLENBQUMsT0FBc0I7QUFBSSxjQUM5QixFQUFFLFdBQVcsRUFBRSxHQUFHLE9BQU87QUFDbkMsUUFBSSxJQUFJLFdBQVcsRUFBRTtBQUNyQixZQUFNLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxHQUFHLElBQUksS0FBSyxDQUFDLFdBQVcsQ0FBQyxZQUFZLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0RSxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0g7aURBdkNDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO1VBQzFCLFFBQVEsRUFBRSxjQUFjLGtCQUN4QixRQUFRLEVBQUUsbUdBQW1HLGtCQUM3RyxlQUFlLEVBQUU7S0FBdUIsQ0FBQyxNQUFNLGtCQUMvQztBQUFtQixFQUFFLEtBQUssa0JBQzFCLElBQUksRUFBRSxzQkFDSixvQkFBb0IsRUFBRSxNQUFNLHNCQUM1QjtrQkFBeUIsRUFBRSxlQUFlLHNCQUMxQyxnQ0FBZ0MsRUFBRSxjQUFjLGtCQUNqRCxjQUNGOzs7OytGQUNHO0FBQUM7QUFBeUMsMEJBQzNDLEtBQUs7QUFBSyx3QkFDVixLQUFLO0FBQUssc0JBQ1YsS0FBSztBQUFLLDJCQUNWLEtBQUs7QUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQztBQUFhO0FBRWIsSUFMYiw0Q0FBOEI7QUFDaEM7QUFBcUIsSUFBbkIsMENBQStCO0FBQ2pDO0FBQXFCLElBQW5CLHdDQUE2QjtBQUMvQjtBQUFxQixJQUFuQiw2Q0FBOEI7QUFDaEM7QUFDb0IsSUFBbEIsMkNBQTBCO0FBQzVCO0FBQ0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9ORy1aT1JSTy9uZy16b3Jyby1hbnRkL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbnB1dCwgT25DaGFuZ2VzLCBPbkluaXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbnotdHJlZS1pbmRlbnQnLFxuICBleHBvcnRBczogJ256VHJlZUluZGVudCcsXG4gIHRlbXBsYXRlOiBgIDxzcGFuICpuZ0Zvcj1cImxldCBpIG9mIGxpc3RPZlVuaXQ7IGxldCBpbmRleCA9IGluZGV4XCIgW25nQ2xhc3NdPVwidW5pdE1hcE9mQ2xhc3MoaW5kZXgpXCI+PC9zcGFuPiBgLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlczogZmFsc2UsXG4gIGhvc3Q6IHtcbiAgICAnW2F0dHIuYXJpYS1oaWRkZW5dJzogJ3RydWUnLFxuICAgICdbY2xhc3MuYW50LXRyZWUtaW5kZW50XSc6ICchbnpTZWxlY3RNb2RlJyxcbiAgICAnW2NsYXNzLmFudC1zZWxlY3QtdHJlZS1pbmRlbnRdJzogJ256U2VsZWN0TW9kZSdcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBOelRyZWVJbmRlbnRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpIG56VHJlZUxldmVsPzogbnVtYmVyO1xuICBASW5wdXQoKSBueklzU3RhcnQ/OiBib29sZWFuW107XG4gIEBJbnB1dCgpIG56SXNFbmQ/OiBib29sZWFuW107XG4gIEBJbnB1dCgpIG56U2VsZWN0TW9kZSA9IGZhbHNlO1xuXG4gIGxpc3RPZlVuaXQ6IG51bWJlcltdID0gW107XG5cbiAgdW5pdE1hcE9mQ2xhc3MoaW5kZXg6IG51bWJlcik6IHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9IHtcbiAgICByZXR1cm4ge1xuICAgICAgW2BhbnQtdHJlZS1pbmRlbnQtdW5pdGBdOiAhdGhpcy5uelNlbGVjdE1vZGUsXG4gICAgICBbYGFudC10cmVlLWluZGVudC11bml0LXN0YXJ0YF06ICF0aGlzLm56U2VsZWN0TW9kZSAmJiB0aGlzLm56SXNTdGFydCFbaW5kZXggKyAxXSxcbiAgICAgIFtgYW50LXRyZWUtaW5kZW50LXVuaXQtZW5kYF06ICF0aGlzLm56U2VsZWN0TW9kZSAmJiB0aGlzLm56SXNFbmQhW2luZGV4ICsgMV0sXG4gICAgICBbYGFudC1zZWxlY3QtdHJlZS1pbmRlbnQtdW5pdGBdOiB0aGlzLm56U2VsZWN0TW9kZSxcbiAgICAgIFtgYW50LXNlbGVjdC10cmVlLWluZGVudC11bml0LXN0YXJ0YF06IHRoaXMubnpTZWxlY3RNb2RlICYmIHRoaXMubnpJc1N0YXJ0IVtpbmRleCArIDFdLFxuICAgICAgW2BhbnQtc2VsZWN0LXRyZWUtaW5kZW50LXVuaXQtZW5kYF06IHRoaXMubnpTZWxlY3RNb2RlICYmIHRoaXMubnpJc0VuZCFbaW5kZXggKyAxXVxuICAgIH07XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHt9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGNvbnN0IHsgbnpUcmVlTGV2ZWwgfSA9IGNoYW5nZXM7XG4gICAgaWYgKG56VHJlZUxldmVsKSB7XG4gICAgICB0aGlzLmxpc3RPZlVuaXQgPSBbLi4ubmV3IEFycmF5KG56VHJlZUxldmVsLmN1cnJlbnRWYWx1ZSB8fCAwKV07XG4gICAgfVxuICB9XG59XG4iXX0=