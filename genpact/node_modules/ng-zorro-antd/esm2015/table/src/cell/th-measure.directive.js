/**
 * @fileoverview added by tsickle
 * Generated from: src/cell/th-measure.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';
import { isNil } from 'ng-zorro-antd/core/util';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export class NzThMeasureDirective {
    /**
     * @param {?} renderer
     * @param {?} elementRef
     */
    constructor(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.changes$ = new Subject();
        this.nzWidth = null;
        this.colspan = null;
        this.colSpan = null;
        this.rowspan = null;
        this.rowSpan = null;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        const { nzWidth, colspan, rowspan, colSpan, rowSpan } = changes;
        if (colspan || colSpan) {
            /** @type {?} */
            const col = this.colspan || this.colSpan;
            if (!isNil(col)) {
                this.renderer.setAttribute(this.elementRef.nativeElement, 'colspan', `${col}`);
            }
            else {
                this.renderer.removeAttribute(this.elementRef.nativeElement, 'colspan');
            }
        }
        if (rowspan || rowSpan) {
            /** @type {?} */
            const row = this.rowspan || this.rowSpan;
            if (!isNil(row)) {
                this.renderer.setAttribute(this.elementRef.nativeElement, 'rowspan', `${row}`);
            }
            else {
                this.renderer.removeAttribute(this.elementRef.nativeElement, 'rowspan');
            }
        }
        if (nzWidth || colspan) {
            this.changes$.next();
        }
    }
}
NzThMeasureDirective.ɵfac = function NzThMeasureDirective_Factory(t) { return new (t || NzThMeasureDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
NzThMeasureDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NzThMeasureDirective, selectors: [["th"]], inputs: { nzWidth: "nzWidth", colspan: "colspan", colSpan: "colSpan", rowspan: "rowspan", rowSpan: "rowSpan" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/** @nocollapse */
NzThMeasureDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
NzThMeasureDirective.propDecorators = {
    nzWidth: [{ type: Input }],
    colspan: [{ type: Input }],
    colSpan: [{ type: Input }],
    rowspan: [{ type: Input }],
    rowSpan: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzThMeasureDirective, [{
        type: Directive,
        args: [{
                selector: 'th'
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, { nzWidth: [{
            type: Input
        }], colspan: [{
            type: Input
        }], colSpan: [{
            type: Input
        }], rowspan: [{
            type: Input
        }], rowSpan: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    NzThMeasureDirective.prototype.changes$;
    /** @type {?} */
    NzThMeasureDirective.prototype.nzWidth;
    /** @type {?} */
    NzThMeasureDirective.prototype.colspan;
    /** @type {?} */
    NzThMeasureDirective.prototype.colSpan;
    /** @type {?} */
    NzThMeasureDirective.prototype.rowspan;
    /** @type {?} */
    NzThMeasureDirective.prototype.rowSpan;
    /**
     * @type {?}
     * @private
     */
    NzThMeasureDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    NzThMeasureDirective.prototype.elementRef;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGgtbWVhc3VyZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIm5nOi9uZy16b3Jyby1hbnRkL3RhYmxlL3NyYy9jZWxsL3RoLW1lYXN1cmUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUlBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBYSxTQUFTLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ2xHLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDOztBQUsvQixNQUFNLE9BQU8sb0JBQW9CO0FBQUc7QUFBUTtBQUM5QjtBQUNDO0FBQVEsSUFLckIsWUFBb0IsUUFBbUIsRUFBVSxVQUFzQjtBQUFJLFFBQXZELGFBQVEsR0FBUixRQUFRLENBQVc7QUFBQyxRQUFTLGVBQVUsR0FBVixVQUFVLENBQVk7QUFBQyxRQU54RSxhQUFRLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztBQUMzQixRQUFXLFlBQU8sR0FBa0IsSUFBSSxDQUFDO0FBQ3pDLFFBQVcsWUFBTyxHQUEyQixJQUFJLENBQUM7QUFDbEQsUUFBVyxZQUFPLEdBQTJCLElBQUksQ0FBQztBQUNsRCxRQUFXLFlBQU8sR0FBMkIsSUFBSSxDQUFDO0FBQ2xELFFBQVcsWUFBTyxHQUEyQixJQUFJLENBQUM7QUFDbEQsSUFBNEUsQ0FBQztBQUM3RTtBQUFRO0FBQTBCO0FBQzNCO0FBQVEsSUFEYixXQUFXLENBQUMsT0FBc0I7QUFBSSxjQUM5QixFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsR0FBRyxPQUFPO0FBQ25FLFFBQUksSUFBSSxPQUFPLElBQUksT0FBTyxFQUFFO0FBQzVCO0FBQTZCLGtCQUFqQixHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTztBQUM5QyxZQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUU7QUFDdkIsZ0JBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsU0FBUyxFQUFFLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUN2RixhQUFPO0FBQUMsaUJBQUs7QUFDYixnQkFBUSxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNoRixhQUFPO0FBQ1AsU0FBSztBQUNMLFFBQUksSUFBSSxPQUFPLElBQUksT0FBTyxFQUFFO0FBQzVCO0FBQTZCLGtCQUFqQixHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTztBQUM5QyxZQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUU7QUFDdkIsZ0JBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsU0FBUyxFQUFFLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUN2RixhQUFPO0FBQUMsaUJBQUs7QUFDYixnQkFBUSxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNoRixhQUFPO0FBQ1AsU0FBSztBQUNMLFFBQUksSUFBSSxPQUFPLElBQUksT0FBTyxFQUFFO0FBQzVCLFlBQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUMzQixTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0g7Z0RBakNDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsSUFBSSxjQUNmO21RQUNJO0FBQUM7QUFBbUI7QUFDWCxZQVJvQyxTQUFTO0FBQUksWUFBM0MsVUFBVTtBQUFHO0FBQUc7QUFBd0Msc0JBU3pFLEtBQUs7QUFBSyxzQkFDVixLQUFLO0FBQUssc0JBQ1YsS0FBSztBQUFLLHNCQUNWLEtBQUs7QUFBSyxzQkFDVixLQUFLO0FBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQztBQUFhO0FBQXFCLElBTC9DLHdDQUF5QjtBQUMzQjtBQUFxQixJQUFuQix1Q0FBdUM7QUFDekM7QUFBcUIsSUFBbkIsdUNBQWdEO0FBQ2xEO0FBQXFCLElBQW5CLHVDQUFnRDtBQUNsRDtBQUFxQixJQUFuQix1Q0FBZ0Q7QUFDbEQ7QUFBcUIsSUFBbkIsdUNBQWdEO0FBQ2xEO0FBQVE7QUFBaUI7QUFBZ0I7QUFBUSxJQUFuQyx3Q0FBMkI7QUFBQztBQUFRO0FBQWlCO0FBQzlEO0FBQVEsSUFEOEIsMENBQThCO0FBQUM7QUFBRSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5pbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBPbkNoYW5nZXMsIFJlbmRlcmVyMiwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNOaWwgfSBmcm9tICduZy16b3Jyby1hbnRkL2NvcmUvdXRpbCc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ3RoJ1xufSlcbmV4cG9ydCBjbGFzcyBOelRoTWVhc3VyZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gIGNoYW5nZXMkID0gbmV3IFN1YmplY3QoKTtcbiAgQElucHV0KCkgbnpXaWR0aDogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG4gIEBJbnB1dCgpIGNvbHNwYW46IHN0cmluZyB8IG51bWJlciB8IG51bGwgPSBudWxsO1xuICBASW5wdXQoKSBjb2xTcGFuOiBzdHJpbmcgfCBudW1iZXIgfCBudWxsID0gbnVsbDtcbiAgQElucHV0KCkgcm93c3Bhbjogc3RyaW5nIHwgbnVtYmVyIHwgbnVsbCA9IG51bGw7XG4gIEBJbnB1dCgpIHJvd1NwYW46IHN0cmluZyB8IG51bWJlciB8IG51bGwgPSBudWxsO1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZikge31cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGNvbnN0IHsgbnpXaWR0aCwgY29sc3Bhbiwgcm93c3BhbiwgY29sU3Bhbiwgcm93U3BhbiB9ID0gY2hhbmdlcztcbiAgICBpZiAoY29sc3BhbiB8fCBjb2xTcGFuKSB7XG4gICAgICBjb25zdCBjb2wgPSB0aGlzLmNvbHNwYW4gfHwgdGhpcy5jb2xTcGFuO1xuICAgICAgaWYgKCFpc05pbChjb2wpKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnY29sc3BhbicsIGAke2NvbH1gKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQXR0cmlidXRlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnY29sc3BhbicpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocm93c3BhbiB8fCByb3dTcGFuKSB7XG4gICAgICBjb25zdCByb3cgPSB0aGlzLnJvd3NwYW4gfHwgdGhpcy5yb3dTcGFuO1xuICAgICAgaWYgKCFpc05pbChyb3cpKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAncm93c3BhbicsIGAke3Jvd31gKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQXR0cmlidXRlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAncm93c3BhbicpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobnpXaWR0aCB8fCBjb2xzcGFuKSB7XG4gICAgICB0aGlzLmNoYW5nZXMkLm5leHQoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==