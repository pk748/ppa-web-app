/**
 * @fileoverview added by tsickle
 * Generated from: space-item.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ChangeDetectionStrategy, Component, ElementRef, Renderer2 } from '@angular/core';
/** @type {?} */
import * as ɵngcc0 from '@angular/core';

var _c0 = ["*"];
var spaceSize = {
    small: 8,
    middle: 16,
    large: 24
};
var NzSpaceItemComponent = /** @class */ (function () {
    function NzSpaceItemComponent(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
    }
    /**
     * @param {?} direction
     * @param {?} size
     * @return {?}
     */
    NzSpaceItemComponent.prototype.setDirectionAndSize = /**
     * @param {?} direction
     * @param {?} size
     * @return {?}
     */
    function (direction, size) {
        /** @type {?} */
        var marginSize = typeof size === 'string' ? spaceSize[size] : size;
        if (direction === 'horizontal') {
            this.renderer.removeStyle(this.elementRef.nativeElement, 'margin-bottom');
            this.renderer.setStyle(this.elementRef.nativeElement, 'margin-right', marginSize + "px");
        }
        else {
            this.renderer.removeStyle(this.elementRef.nativeElement, 'margin-right');
            this.renderer.setStyle(this.elementRef.nativeElement, 'margin-bottom', marginSize + "px");
        }
    };
    /**
     * @return {?}
     */
    NzSpaceItemComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /** @nocollapse */
    NzSpaceItemComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
NzSpaceItemComponent.ɵfac = function NzSpaceItemComponent_Factory(t) { return new (t || NzSpaceItemComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
NzSpaceItemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NzSpaceItemComponent, selectors: [["nz-space-item"], ["", "nz-space-item", ""]], hostAttrs: [1, "ant-space-item"], ngContentSelectors: _c0, decls: 1, vars: 0, template: function NzSpaceItemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzSpaceItemComponent, [{
        type: Component,
        args: [{
                selector: 'nz-space-item, [nz-space-item]',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: " <ng-content></ng-content> ",
                host: {
                    class: 'ant-space-item'
                }
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, null); })();
    return NzSpaceItemComponent;
}());
export { NzSpaceItemComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NzSpaceItemComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    NzSpaceItemComponent.prototype.elementRef;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BhY2UtaXRlbS5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIm5nOi9uZy16b3Jyby1hbnRkL3NwYWNlL3NwYWNlLWl0ZW0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUtBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFVLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRzs7OztBQUNnQixJQUVWLFNBQVMsR0FBRztBQUNsQixJQUFFLEtBQUssRUFBRSxDQUFDO0FBQ1YsSUFBRSxNQUFNLEVBQUUsRUFBRTtBQUNaLElBQUUsS0FBSyxFQUFFLEVBQUU7QUFDWCxDQUFDO0FBRUQ7QUFDMkMsSUFRekMsOEJBQW9CLFFBQW1CLEVBQVUsVUFBc0I7QUFBSSxRQUF2RCxhQUFRLEdBQVIsUUFBUSxDQUFXO0FBQUMsUUFBUyxlQUFVLEdBQVYsVUFBVSxDQUFZO0FBQUMsSUFBRSxDQUFDO0FBQzdFO0FBQ087QUFBNEI7QUFBdUI7QUFBbUI7QUFBUSxJQUFuRixrREFBbUI7QUFBTztBQUE0QjtBQUF1QjtBQUNwRTtBQUFRLElBRGpCLFVBQW9CLFNBQTJCLEVBQUUsSUFBMEI7QUFBSTtBQUM5RCxZQUFULFVBQVUsR0FBRyxPQUFPLElBQUksS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSTtBQUN4RSxRQUFJLElBQUksU0FBUyxLQUFLLFlBQVksRUFBRTtBQUNwQyxZQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQ2hGLFlBQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsY0FBYyxFQUFLLFVBQVUsT0FBSSxDQUFDLENBQUM7QUFDL0YsU0FBSztBQUFDLGFBQUs7QUFDWCxZQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0FBQy9FLFlBQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsZUFBZSxFQUFLLFVBQVUsT0FBSSxDQUFDLENBQUM7QUFDaEcsU0FBSztBQUNMLElBQUUsQ0FBQztBQUVIO0FBQVE7QUFFTDtBQUFRLElBRlQsdUNBQVE7QUFBTztBQUVMO0FBQVEsSUFGbEIsY0FBa0IsQ0FBQyxDQWRiO0FBQUM7aUNBUlIsU0FBUyxTQUFDLG5EQVFxQjtRQVA5QixRQUFRLEVBQUUsbEJBUStCLGdCQW5Cc0IsU0FBUztxQkFXOUIsckJBWGtDLGdCQUFqQyxVQUFVO0FBQUc7SUFZeEQsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU0sc0JBQy9DLFFBQVEsRUFBRSw2QkFBNkIsc0JBQ3ZDLElBQUksRUFBRSwwQkFDSixLQUFLLEVBQUUsZ0JBQWdCO1FBQ3hCLGtCQUNGOzs7Ozs7Ozs7Ozs7Ozt1R0FqQmtFO0FBQUMsSUFpQ3BFLDJCQUFDO0FBQ0EsQ0FEQSxBQXZCRCxJQXVCQztBQUNELFNBaEJhLG9CQUFvQjtBQUFJO0FBQWE7QUFDOUM7QUFBaUI7QUFBZ0I7QUFBUSxJQUEvQix3Q0FBMkI7QUFBQztBQUFRO0FBQWlCO0FBRS9EO0FBQVEsSUFGK0IsMENBQThCO0FBQUM7QUFBRSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5cbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIE9uSW5pdCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE56U3BhY2VEaXJlY3Rpb24sIE56U3BhY2VTaXplIH0gZnJvbSAnLi90eXBlcyc7XG5cbmNvbnN0IHNwYWNlU2l6ZSA9IHtcbiAgc21hbGw6IDgsXG4gIG1pZGRsZTogMTYsXG4gIGxhcmdlOiAyNFxufTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbnotc3BhY2UtaXRlbSwgW256LXNwYWNlLWl0ZW1dJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiBgIDxuZy1jb250ZW50PjwvbmctY29udGVudD4gYCxcbiAgaG9zdDoge1xuICAgIGNsYXNzOiAnYW50LXNwYWNlLWl0ZW0nXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgTnpTcGFjZUl0ZW1Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZikge31cblxuICBzZXREaXJlY3Rpb25BbmRTaXplKGRpcmVjdGlvbjogTnpTcGFjZURpcmVjdGlvbiwgc2l6ZTogbnVtYmVyIHwgTnpTcGFjZVNpemUpOiB2b2lkIHtcbiAgICBjb25zdCBtYXJnaW5TaXplID0gdHlwZW9mIHNpemUgPT09ICdzdHJpbmcnID8gc3BhY2VTaXplW3NpemVdIDogc2l6ZTtcbiAgICBpZiAoZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlU3R5bGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdtYXJnaW4tYm90dG9tJyk7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnbWFyZ2luLXJpZ2h0JywgYCR7bWFyZ2luU2l6ZX1weGApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZVN0eWxlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnbWFyZ2luLXJpZ2h0Jyk7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnbWFyZ2luLWJvdHRvbScsIGAke21hcmdpblNpemV9cHhgKTtcbiAgICB9XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHt9XG59XG4iXX0=