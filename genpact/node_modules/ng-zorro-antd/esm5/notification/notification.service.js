/**
 * @fileoverview added by tsickle
 * Generated from: notification.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __assign, __extends } from "tslib";
/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { Overlay } from '@angular/cdk/overlay';
import { Injectable, Injector } from '@angular/core';
import { NzSingletonService } from 'ng-zorro-antd/core/services';
import { NzMNService } from 'ng-zorro-antd/message';
import { NzNotificationContainerComponent } from './notification-container.component';
import { NzNotificationServiceModule } from './notification.service.module';
import * as i0 from "@angular/core";
import * as i1 from "ng-zorro-antd/core/services";
import * as i2 from "@angular/cdk/overlay";
import * as i3 from "./notification.service.module";
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ng-zorro-antd/core/services';
import * as ɵngcc2 from '@angular/cdk/overlay';
var notificationId = 0;
var NzNotificationService = /** @class */ (function (_super) {
    __extends(NzNotificationService, _super);
    function NzNotificationService(nzSingletonService, overlay, injector) {
        var _this = _super.call(this, nzSingletonService, overlay, injector) || this;
        _this.componentPrefix = 'notification-';
        return _this;
    }
    /**
     * @param {?} title
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    NzNotificationService.prototype.success = /**
     * @param {?} title
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    function (title, content, options) {
        return this.createInstance({ type: 'success', title: title, content: content }, options);
    };
    /**
     * @param {?} title
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    NzNotificationService.prototype.error = /**
     * @param {?} title
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    function (title, content, options) {
        return this.createInstance({ type: 'error', title: title, content: content }, options);
    };
    /**
     * @param {?} title
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    NzNotificationService.prototype.info = /**
     * @param {?} title
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    function (title, content, options) {
        return this.createInstance({ type: 'info', title: title, content: content }, options);
    };
    /**
     * @param {?} title
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    NzNotificationService.prototype.warning = /**
     * @param {?} title
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    function (title, content, options) {
        return this.createInstance({ type: 'warning', title: title, content: content }, options);
    };
    /**
     * @param {?} title
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    NzNotificationService.prototype.blank = /**
     * @param {?} title
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    function (title, content, options) {
        return this.createInstance({ type: 'blank', title: title, content: content }, options);
    };
    /**
     * @param {?} type
     * @param {?} title
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    NzNotificationService.prototype.create = /**
     * @param {?} type
     * @param {?} title
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    function (type, title, content, options) {
        return this.createInstance({ type: type, title: title, content: content }, options);
    };
    /**
     * @param {?} template
     * @param {?=} options
     * @return {?}
     */
    NzNotificationService.prototype.template = /**
     * @param {?} template
     * @param {?=} options
     * @return {?}
     */
    function (template, options) {
        return this.createInstance({ template: template }, options);
    };
    /**
     * @protected
     * @return {?}
     */
    NzNotificationService.prototype.generateMessageId = /**
     * @protected
     * @return {?}
     */
    function () {
        return this.componentPrefix + "-" + notificationId++;
    };
    /**
     * @private
     * @param {?} message
     * @param {?=} options
     * @return {?}
     */
    NzNotificationService.prototype.createInstance = /**
     * @private
     * @param {?} message
     * @param {?=} options
     * @return {?}
     */
    function (message, options) {
        this.container = this.withContainer(NzNotificationContainerComponent);
        return this.container.create(__assign(__assign({}, message), {
            createdAt: new Date(),
            messageId: this.generateMessageId(),
            options: options
        }));
    };
    /** @nocollapse */
    NzNotificationService.ctorParameters = function () { return [
        { type: NzSingletonService },
        { type: Overlay },
        { type: Injector }
    ]; };
    /** @nocollapse */ NzNotificationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NzNotificationService_Factory() { return new NzNotificationService(i0.ɵɵinject(i1.NzSingletonService), i0.ɵɵinject(i2.Overlay), i0.ɵɵinject(i0.INJECTOR)); }, token: NzNotificationService, providedIn: i3.NzNotificationServiceModule });
NzNotificationService.ɵfac = function NzNotificationService_Factory(t) { return new (t || NzNotificationService)(ɵngcc0.ɵɵinject(ɵngcc1.NzSingletonService), ɵngcc0.ɵɵinject(ɵngcc2.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzNotificationService, [{
        type: Injectable,
        args: [{
                providedIn: NzNotificationServiceModule
            }]
    }], function () { return [{ type: ɵngcc1.NzSingletonService }, { type: ɵngcc2.Overlay }, { type: ɵngcc0.Injector }]; }, null); })();
    return NzNotificationService;
}(NzMNService));
export { NzNotificationService };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    NzNotificationService.prototype.container;
    /**
     * @type {?}
     * @protected
     */
    NzNotificationService.prototype.componentPrefix;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,