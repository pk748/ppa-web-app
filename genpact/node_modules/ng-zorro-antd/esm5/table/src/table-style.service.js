/**
 * @fileoverview added by tsickle
 * Generated from: src/table-style.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __read } from "tslib";
/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject, combineLatest, merge, ReplaySubject } from 'rxjs';
import { map } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
var NzTableStyleService = /** @class */ (function () {
    function NzTableStyleService() {
        this.theadTemplate$ = new ReplaySubject(1);
        this.hasFixLeft$ = new ReplaySubject(1);
        this.hasFixRight$ = new ReplaySubject(1);
        this.hostWidth$ = new ReplaySubject(1);
        this.columnCount$ = new ReplaySubject(1);
        this.showEmpty$ = new ReplaySubject(1);
        this.noResult$ = new ReplaySubject(1);
        this.listOfThWidthConfigPx$ = new BehaviorSubject([]);
        this.tableWidthConfigPx$ = new BehaviorSubject([]);
        this.manualWidthConfigPx$ = combineLatest([this.tableWidthConfigPx$, this.listOfThWidthConfigPx$]).pipe(map((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = __read(_a, 2), widthConfig = _b[0], listOfWidth = _b[1];
            return (widthConfig.length ? widthConfig : listOfWidth);
        })));
        this.listOfAutoWidthPx$ = new ReplaySubject(1);
        this.listOfListOfThWidthPx$ = merge(
        /** init with manual width **/
        this.manualWidthConfigPx$, combineLatest([this.listOfAutoWidthPx$, this.manualWidthConfigPx$]).pipe(map((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = __read(_a, 2), autoWidth = _b[0], manualWidth = _b[1];
            /** use autoWidth until column length match **/
            if (autoWidth.length === manualWidth.length) {
                return autoWidth.map((/**
                 * @param {?} width
                 * @param {?} index
                 * @return {?}
                 */
                function (width, index) {
                    if (width === '0px') {
                        return manualWidth[index] || null;
                    }
                    else {
                        return manualWidth[index] || width;
                    }
                }));
            }
            else {
                return manualWidth;
            }
        }))));
        this.listOfMeasureColumn$ = new ReplaySubject(1);
        this.listOfListOfThWidth$ = this.listOfAutoWidthPx$.pipe(map((/**
         * @param {?} list
         * @return {?}
         */
        function (list) { return list.map((/**
         * @param {?} width
         * @return {?}
         */
        function (width) { return parseInt(width, 10); })); })));
        this.enableAutoMeasure$ = new ReplaySubject(1);
    }
    /**
     * @param {?} template
     * @return {?}
     */
    NzTableStyleService.prototype.setTheadTemplate = /**
     * @param {?} template
     * @return {?}
     */
    function (template) {
        this.theadTemplate$.next(template);
    };
    /**
     * @param {?} hasFixLeft
     * @return {?}
     */
    NzTableStyleService.prototype.setHasFixLeft = /**
     * @param {?} hasFixLeft
     * @return {?}
     */
    function (hasFixLeft) {
        this.hasFixLeft$.next(hasFixLeft);
    };
    /**
     * @param {?} hasFixRight
     * @return {?}
     */
    NzTableStyleService.prototype.setHasFixRight = /**
     * @param {?} hasFixRight
     * @return {?}
     */
    function (hasFixRight) {
        this.hasFixRight$.next(hasFixRight);
    };
    /**
     * @param {?} widthConfig
     * @return {?}
     */
    NzTableStyleService.prototype.setTableWidthConfig = /**
     * @param {?} widthConfig
     * @return {?}
     */
    function (widthConfig) {
        this.tableWidthConfigPx$.next(widthConfig);
    };
    /**
     * @param {?} listOfTh
     * @return {?}
     */
    NzTableStyleService.prototype.setListOfTh = /**
     * @param {?} listOfTh
     * @return {?}
     */
    function (listOfTh) {
        /** @type {?} */
        var columnCount = 0;
        listOfTh.forEach((/**
         * @param {?} th
         * @return {?}
         */
        function (th) {
            columnCount += (th.colspan && +th.colspan) || (th.colSpan && +th.colSpan) || 1;
        }));
        /** @type {?} */
        var listOfThPx = listOfTh.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.nzWidth; }));
        this.columnCount$.next(columnCount);
        this.listOfThWidthConfigPx$.next(listOfThPx);
    };
    /**
     * @param {?} listOfTh
     * @return {?}
     */
    NzTableStyleService.prototype.setListOfMeasureColumn = /**
     * @param {?} listOfTh
     * @return {?}
     */
    function (listOfTh) {
        /** @type {?} */
        var listOfKeys = [];
        listOfTh.forEach((/**
         * @param {?} th
         * @return {?}
         */
        function (th) {
            /** @type {?} */
            var length = (th.colspan && +th.colspan) || (th.colSpan && +th.colSpan) || 1;
            for (var i = 0; i < length; i++) {
                listOfKeys.push("measure_key_" + i);
            }
        }));
        this.listOfMeasureColumn$.next(listOfKeys);
    };
    /**
     * @param {?} listOfAutoWidth
     * @return {?}
     */
    NzTableStyleService.prototype.setListOfAutoWidth = /**
     * @param {?} listOfAutoWidth
     * @return {?}
     */
    function (listOfAutoWidth) {
        this.listOfAutoWidthPx$.next(listOfAutoWidth.map((/**
         * @param {?} width
         * @return {?}
         */
        function (width) { return width + "px"; })));
    };
    /**
     * @param {?} showEmpty
     * @return {?}
     */
    NzTableStyleService.prototype.setShowEmpty = /**
     * @param {?} showEmpty
     * @return {?}
     */
    function (showEmpty) {
        this.showEmpty$.next(showEmpty);
    };
    /**
     * @param {?} noResult
     * @return {?}
     */
    NzTableStyleService.prototype.setNoResult = /**
     * @param {?} noResult
     * @return {?}
     */
    function (noResult) {
        this.noResult$.next(noResult);
    };
    /**
     * @param {?} scrollX
     * @param {?} scrollY
     * @return {?}
     */
    NzTableStyleService.prototype.setScroll = /**
     * @param {?} scrollX
     * @param {?} scrollY
     * @return {?}
     */
    function (scrollX, scrollY) {
        /** @type {?} */
        var enableAutoMeasure = !!(scrollX || scrollY);
        if (!enableAutoMeasure) {
            this.setListOfAutoWidth([]);
        }
        this.enableAutoMeasure$.next(enableAutoMeasure);
    };
    /** @nocollapse */
    NzTableStyleService.ctorParameters = function () { return []; };
NzTableStyleService.ɵfac = function NzTableStyleService_Factory(t) { return new (t || NzTableStyleService)(); };
NzTableStyleService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NzTableStyleService, factory: function (t) { return NzTableStyleService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzTableStyleService, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return NzTableStyleService;
}());
export { NzTableStyleService };
if (false) {
    /** @type {?} */
    NzTableStyleService.prototype.theadTemplate$;
    /** @type {?} */
    NzTableStyleService.prototype.hasFixLeft$;
    /** @type {?} */
    NzTableStyleService.prototype.hasFixRight$;
    /** @type {?} */
    NzTableStyleService.prototype.hostWidth$;
    /** @type {?} */
    NzTableStyleService.prototype.columnCount$;
    /** @type {?} */
    NzTableStyleService.prototype.showEmpty$;
    /** @type {?} */
    NzTableStyleService.prototype.noResult$;
    /**
     * @type {?}
     * @private
     */
    NzTableStyleService.prototype.listOfThWidthConfigPx$;
    /**
     * @type {?}
     * @private
     */
    NzTableStyleService.prototype.tableWidthConfigPx$;
    /** @type {?} */
    NzTableStyleService.prototype.manualWidthConfigPx$;
    /**
     * @type {?}
     * @private
     */
    NzTableStyleService.prototype.listOfAutoWidthPx$;
    /** @type {?} */
    NzTableStyleService.prototype.listOfListOfThWidthPx$;
    /** @type {?} */
    NzTableStyleService.prototype.listOfMeasureColumn$;
    /** @type {?} */
    NzTableStyleService.prototype.listOfListOfThWidth$;
    /** @type {?} */
    NzTableStyleService.prototype.enableAutoMeasure$;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,