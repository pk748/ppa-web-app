/**
 * @fileoverview added by tsickle
 * Generated from: base.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __read, __spread } from "tslib";
/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { CdkConnectedOverlay } from '@angular/cdk/overlay';
import { ChangeDetectorRef, ComponentFactoryResolver, Directive, ElementRef, EventEmitter, Input, Output, Renderer2, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';
import { warnDeprecation } from 'ng-zorro-antd/core/logger';
import { NzNoAnimationDirective } from 'ng-zorro-antd/core/no-animation';
import { DEFAULT_TOOLTIP_POSITIONS, getPlacementName, POSITION_MAP } from 'ng-zorro-antd/core/overlay';
import { isNotNil, toBoolean } from 'ng-zorro-antd/core/util';
import { Subject } from 'rxjs';
import { distinctUntilChanged, takeUntil } from 'rxjs/operators';
/**
 * @abstract
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ng-zorro-antd/core/no-animation';

var _c0 = ["overlay"];
var NzTooltipBaseDirective = /** @class */ (function () {
    function NzTooltipBaseDirective(elementRef, hostView, resolver, renderer, noAnimation) {
        this.elementRef = elementRef;
        this.hostView = hostView;
        this.resolver = resolver;
        this.renderer = renderer;
        this.noAnimation = noAnimation;
        this.specificVisibleChange = new EventEmitter();
        /**
         * @deprecated 10.0.0. This is deprecated and going to be removed in 10.0.0.
         * Please use a more specific API. Like `nzTooltipTrigger`.
         */
        this.nzTrigger = 'hover';
        /**
         * @deprecated 10.0.0. This is deprecated and going to be removed in 10.0.0.
         * Please use a more specific API. Like `nzTooltipPlacement`.
         */
        this.nzPlacement = 'top';
        this.visible = false;
        this.needProxyProperties = ['noAnimation'];
        this.nzVisibleChange = new EventEmitter();
        this.destroy$ = new Subject();
        this.triggerDisposables = [];
    }
    Object.defineProperty(NzTooltipBaseDirective.prototype, "title", {
        /**
         * This true title that would be used in other parts on this component.
         */
        get: /**
         * This true title that would be used in other parts on this component.
         * @protected
         * @return {?}
         */
        function () {
            return this.specificTitle || this.directiveNameTitle || this.nzTitle || null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NzTooltipBaseDirective.prototype, "content", {
        get: /**
         * @protected
         * @return {?}
         */
        function () {
            return this.specificContent || this.directiveNameContent || this.nzContent || null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NzTooltipBaseDirective.prototype, "placement", {
        get: /**
         * @protected
         * @return {?}
         */
        function () {
            return this.specificPlacement || this.nzPlacement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NzTooltipBaseDirective.prototype, "trigger", {
        get: /**
         * @protected
         * @return {?}
         */
        function () {
            // NzTooltipTrigger can be null.
            return typeof this.specificTrigger !== 'undefined' ? this.specificTrigger : this.nzTrigger;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NzTooltipBaseDirective.prototype, "isVisible", {
        get: /**
         * @protected
         * @return {?}
         */
        function () {
            return this.specificVisible || this.nzVisible || false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NzTooltipBaseDirective.prototype, "mouseEnterDelay", {
        get: /**
         * @protected
         * @return {?}
         */
        function () {
            return this.specificMouseEnterDelay || this.nzMouseEnterDelay || 0.15;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NzTooltipBaseDirective.prototype, "mouseLeaveDelay", {
        get: /**
         * @protected
         * @return {?}
         */
        function () {
            return this.specificMouseLeaveDelay || this.nzMouseLeaveDelay || 0.1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NzTooltipBaseDirective.prototype, "overlayClassName", {
        get: /**
         * @protected
         * @return {?}
         */
        function () {
            return this.specificOverlayClassName || this.nzOverlayClassName || null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NzTooltipBaseDirective.prototype, "overlayStyle", {
        get: /**
         * @protected
         * @return {?}
         */
        function () {
            return this.specificOverlayStyle || this.nzOverlayStyle || null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} isNeeded
     * @param {?} property
     * @param {?} newProperty
     * @param {?=} comp
     * @param {?=} shared
     * @return {?}
     */
    NzTooltipBaseDirective.prototype.warnDeprecationIfNeeded = /**
     * @param {?} isNeeded
     * @param {?} property
     * @param {?} newProperty
     * @param {?=} comp
     * @param {?=} shared
     * @return {?}
     */
    function (isNeeded, property, newProperty, comp, shared) {
        if (comp === void 0) { comp = 'nz-tooltip'; }
        if (shared === void 0) { shared = true; }
        if (isNeeded) {
            /** @type {?} */
            var message = "'" + property + "' of '" + comp + "' is deprecated and will be removed in 10.0.0.\n      Please use '" + newProperty + "' instead.";
            if (shared) {
                message = message + " The same with 'nz-popover' and 'nz-popconfirm'.";
            }
            warnDeprecation(message);
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NzTooltipBaseDirective.prototype.warnDeprecationByChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        // warn deprecated things when specific property is not given
        this.warnDeprecationIfNeeded(changes.nzTitle && !this.specificTitle && !this.directiveNameTitle, 'nzTitle', 'nzTooltipTitle');
        this.warnDeprecationIfNeeded(changes.nzContent && !this.specificContent, 'nzContent', 'nzPopoverContent', 'nz-popover', false);
        this.warnDeprecationIfNeeded(changes.nzPlacement && !this.specificPlacement, 'nzPlacement', 'nzTooltipPlacement');
        this.warnDeprecationIfNeeded(changes.nzTrigger && !this.specificTrigger, 'nzTrigger', 'nzTooltipTrigger');
        this.warnDeprecationIfNeeded(changes.nzVisible && !this.specificVisible, 'nzVisible', 'nzTooltipVisible');
        this.warnDeprecationIfNeeded(changes.nzMouseEnterDelay && !this.specificMouseEnterDelay, 'nzMouseEnterDelay', 'nzTooltipMouseEnterDelay');
        this.warnDeprecationIfNeeded(changes.nzMouseLeaveDelay && !this.specificMouseLeaveDelay, 'nzMouseLeaveDelay', 'nzTooltipMouseLeaveDelay');
        this.warnDeprecationIfNeeded(changes.nzOverlayClassName && !this.specificOverlayClassName, 'nzOverlayClassName', 'nzTooltipClassName');
        this.warnDeprecationIfNeeded(changes.nzOverlayStyle && !this.specificOverlayStyle, 'nzOverlayStyle', 'nzTooltipOverlayStyle');
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NzTooltipBaseDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var nzTrigger = changes.nzTrigger, specificTrigger = changes.specificTrigger;
        /** @type {?} */
        var trigger = specificTrigger || nzTrigger;
        if (trigger && !trigger.isFirstChange()) {
            this.registerTriggers();
        }
        if (this.component) {
            this.updateChangedProperties(changes);
        }
        this.warnDeprecationByChanges(changes);
    };
    /**
     * @return {?}
     */
    NzTooltipBaseDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.createComponent();
        this.registerTriggers();
    };
    /**
     * @return {?}
     */
    NzTooltipBaseDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy$.next();
        this.destroy$.complete();
        // Clear toggling timer. Issue #3875 #4317 #4386
        this.clearTogglingTimer();
        this.removeTriggerListeners();
    };
    /**
     * @return {?}
     */
    NzTooltipBaseDirective.prototype.show = /**
     * @return {?}
     */
    function () {
        var _a;
        (_a = this.component) === null || _a === void 0 ? void 0 : _a.show();
    };
    /**
     * @return {?}
     */
    NzTooltipBaseDirective.prototype.hide = /**
     * @return {?}
     */
    function () {
        var _a;
        (_a = this.component) === null || _a === void 0 ? void 0 : _a.hide();
    };
    /**
     * Force the component to update its position.
     */
    /**
     * Force the component to update its position.
     * @return {?}
     */
    NzTooltipBaseDirective.prototype.updatePosition = /**
     * Force the component to update its position.
     * @return {?}
     */
    function () {
        if (this.component) {
            this.component.updatePosition();
        }
    };
    /**
     * Create a dynamic tooltip component. This method can be override.
     */
    /**
     * Create a dynamic tooltip component. This method can be override.
     * @protected
     * @return {?}
     */
    NzTooltipBaseDirective.prototype.createComponent = /**
     * Create a dynamic tooltip component. This method can be override.
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var componentRef = this.hostView.createComponent(this.componentFactory);
        this.component = componentRef.instance;
        // Remove the component's DOM because it should be in the overlay container.
        this.renderer.removeChild(this.renderer.parentNode(this.elementRef.nativeElement), componentRef.location.nativeElement);
        this.component.setOverlayOrigin({ elementRef: this.specificOrigin || this.elementRef });
        this.updateChangedProperties(this.needProxyProperties);
        this.component.nzVisibleChange.pipe(distinctUntilChanged(), takeUntil(this.destroy$)).subscribe((/**
         * @param {?} visible
         * @return {?}
         */
        function (visible) {
            _this.visible = visible;
            _this.specificVisibleChange.emit(visible);
            _this.nzVisibleChange.emit(visible);
        }));
    };
    /**
     * @protected
     * @return {?}
     */
    NzTooltipBaseDirective.prototype.registerTriggers = /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        // When the method gets invoked, all properties has been synced to the dynamic component.
        // After removing the old API, we can just check the directive's own `nzTrigger`.
        /** @type {?} */
        var el = this.elementRef.nativeElement;
        /** @type {?} */
        var trigger = this.trigger;
        this.removeTriggerListeners();
        if (trigger === 'hover') {
            /** @type {?} */
            var overlayElement_1;
            this.triggerDisposables.push(this.renderer.listen(el, 'mouseenter', (/**
             * @return {?}
             */
            function () {
                _this.delayEnterLeave(true, true, _this.mouseEnterDelay);
            })));
            this.triggerDisposables.push(this.renderer.listen(el, 'mouseleave', (/**
             * @return {?}
             */
            function () {
                var _a;
                _this.delayEnterLeave(true, false, _this.mouseLeaveDelay);
                if (((_a = _this.component) === null || _a === void 0 ? void 0 : _a.overlay.overlayRef) && !overlayElement_1) {
                    overlayElement_1 = _this.component.overlay.overlayRef.overlayElement;
                    _this.triggerDisposables.push(_this.renderer.listen(overlayElement_1, 'mouseenter', (/**
                     * @return {?}
                     */
                    function () {
                        _this.delayEnterLeave(false, true);
                    })));
                    _this.triggerDisposables.push(_this.renderer.listen(overlayElement_1, 'mouseleave', (/**
                     * @return {?}
                     */
                    function () {
                        _this.delayEnterLeave(false, false);
                    })));
                }
            })));
        }
        else if (trigger === 'focus') {
            this.triggerDisposables.push(this.renderer.listen(el, 'focus', (/**
             * @return {?}
             */
            function () { return _this.show(); })));
            this.triggerDisposables.push(this.renderer.listen(el, 'blur', (/**
             * @return {?}
             */
            function () { return _this.hide(); })));
        }
        else if (trigger === 'click') {
            this.triggerDisposables.push(this.renderer.listen(el, 'click', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.preventDefault();
                _this.show();
            })));
        } // Else do nothing because user wants to control the visibility programmatically.
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NzTooltipBaseDirective.prototype.updatePropertiesByChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        /** @type {?} */
        var properties = {
            specificTitle: ['nzTitle', this.title],
            directiveNameTitle: ['nzTitle', this.title],
            nzTitle: ['nzTitle', this.title],
            specificContent: ['nzContent', this.content],
            directiveNameContent: ['nzContent', this.content],
            nzContent: ['nzContent', this.content],
            specificTrigger: ['nzTrigger', this.trigger],
            nzTrigger: ['nzTrigger', this.trigger],
            specificPlacement: ['nzPlacement', this.placement],
            nzPlacement: ['nzPlacement', this.placement],
            specificVisible: ['nzVisible', this.isVisible],
            nzVisible: ['nzVisible', this.isVisible],
            specificMouseEnterDelay: ['nzMouseEnterDelay', this.mouseEnterDelay],
            nzMouseEnterDelay: ['nzMouseEnterDelay', this.mouseEnterDelay],
            specificMouseLeaveDelay: ['nzMouseLeaveDelay', this.mouseLeaveDelay],
            nzMouseLeaveDelay: ['nzMouseLeaveDelay', this.mouseLeaveDelay],
            specificOverlayClassName: ['nzOverlayClassName', this.overlayClassName],
            nzOverlayClassName: ['nzOverlayClassName', this.overlayClassName],
            specificOverlayStyle: ['nzOverlayStyle', this.overlayStyle],
            nzOverlayStyle: ['nzOverlayStyle', this.overlayStyle]
        };
        /** @type {?} */
        var keys = Object.keys(changes);
        keys.forEach((/**
         * @param {?} property
         * @return {?}
         */
        function (property) {
            // @ts-ignore
            if (properties[property]) {
                // @ts-ignore
                var _a = __read(properties[property], 2), name_1 = _a[0], value = _a[1];
                _this.updateComponentValue(name_1, value);
            }
        }));
    };
    /**
     * @return {?}
     */
    NzTooltipBaseDirective.prototype.updatePropertiesByArray = /**
     * @return {?}
     */
    function () {
        this.updateComponentValue('nzTitle', this.title);
        this.updateComponentValue('nzContent', this.content);
        this.updateComponentValue('nzPlacement', this.placement);
        this.updateComponentValue('nzTrigger', this.trigger);
        this.updateComponentValue('nzVisible', this.isVisible);
        this.updateComponentValue('nzMouseEnterDelay', this.mouseEnterDelay);
        this.updateComponentValue('nzMouseLeaveDelay', this.mouseLeaveDelay);
        this.updateComponentValue('nzOverlayClassName', this.overlayClassName);
        this.updateComponentValue('nzOverlayStyle', this.overlayStyle);
    };
    /**
     * Sync changed properties to the component and trigger change detection in that component.
     */
    /**
     * Sync changed properties to the component and trigger change detection in that component.
     * @protected
     * @param {?} propertiesOrChanges
     * @return {?}
     */
    NzTooltipBaseDirective.prototype.updateChangedProperties = /**
     * Sync changed properties to the component and trigger change detection in that component.
     * @protected
     * @param {?} propertiesOrChanges
     * @return {?}
     */
    function (propertiesOrChanges) {
        var _this = this;
        var _a;
        /** @type {?} */
        var isArray = Array.isArray(propertiesOrChanges);
        /** @type {?} */
        var keys = isArray ? ((/** @type {?} */ (propertiesOrChanges))) : Object.keys(propertiesOrChanges);
        keys.forEach((/**
         * @param {?} property
         * @return {?}
         */
        function (property) {
            if (_this.needProxyProperties.indexOf(property) !== -1) {
                // @ts-ignore
                _this.updateComponentValue(property, _this[property]);
            }
        }));
        if (isArray) {
            this.updatePropertiesByArray();
        }
        else {
            this.updatePropertiesByChanges((/** @type {?} */ (propertiesOrChanges)));
        }
        (_a = this.component) === null || _a === void 0 ? void 0 : _a.updateByDirective();
    };
    /**
     * @private
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    NzTooltipBaseDirective.prototype.updateComponentValue = /**
     * @private
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        if (typeof value !== 'undefined') {
            // @ts-ignore
            this.component[key] = value;
        }
    };
    /**
     * @private
     * @param {?} isOrigin
     * @param {?} isEnter
     * @param {?=} delay
     * @return {?}
     */
    NzTooltipBaseDirective.prototype.delayEnterLeave = /**
     * @private
     * @param {?} isOrigin
     * @param {?} isEnter
     * @param {?=} delay
     * @return {?}
     */
    function (isOrigin, isEnter, delay) {
        var _this = this;
        if (delay === void 0) { delay = -1; }
        if (this.delayTimer) {
            this.clearTogglingTimer();
        }
        else if (delay > 0) {
            this.delayTimer = setTimeout((/**
             * @return {?}
             */
            function () {
                _this.delayTimer = undefined;
                isEnter ? _this.show() : _this.hide();
            }), delay * 1000);
        }
        else {
            // `isOrigin` is used due to the tooltip will not hide immediately
            // (may caused by the fade-out animation).
            isEnter && isOrigin ? this.show() : this.hide();
        }
    };
    /**
     * @private
     * @return {?}
     */
    NzTooltipBaseDirective.prototype.removeTriggerListeners = /**
     * @private
     * @return {?}
     */
    function () {
        this.triggerDisposables.forEach((/**
         * @param {?} dispose
         * @return {?}
         */
        function (dispose) { return dispose(); }));
        this.triggerDisposables.length = 0;
    };
    /**
     * @private
     * @return {?}
     */
    NzTooltipBaseDirective.prototype.clearTogglingTimer = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.delayTimer) {
            clearTimeout(this.delayTimer);
            this.delayTimer = undefined;
        }
    };
    /** @nocollapse */
    NzTooltipBaseDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ViewContainerRef },
        { type: ComponentFactoryResolver },
        { type: Renderer2 },
        { type: NzNoAnimationDirective }
    ]; };
    NzTooltipBaseDirective.propDecorators = {
        nzTitle: [{ type: Input }],
        nzContent: [{ type: Input }],
        nzTrigger: [{ type: Input }],
        nzPlacement: [{ type: Input }],
        nzMouseEnterDelay: [{ type: Input }],
        nzMouseLeaveDelay: [{ type: Input }],
        nzOverlayClassName: [{ type: Input }],
        nzOverlayStyle: [{ type: Input }],
        nzVisible: [{ type: Input }],
        nzVisibleChange: [{ type: Output }]
    };
NzTooltipBaseDirective.ɵfac = function NzTooltipBaseDirective_Factory(t) { return new (t || NzTooltipBaseDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NzNoAnimationDirective)); };
NzTooltipBaseDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NzTooltipBaseDirective, inputs: { nzTrigger: "nzTrigger", nzPlacement: "nzPlacement", nzTitle: "nzTitle", nzContent: "nzContent", nzMouseEnterDelay: "nzMouseEnterDelay", nzMouseLeaveDelay: "nzMouseLeaveDelay", nzOverlayClassName: "nzOverlayClassName", nzOverlayStyle: "nzOverlayStyle", nzVisible: "nzVisible" }, outputs: { nzVisibleChange: "nzVisibleChange" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzTooltipBaseDirective, [{
        type: Directive
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc1.NzNoAnimationDirective }]; }, { nzTrigger: [{
            type: Input
        }], nzPlacement: [{
            type: Input
        }], nzVisibleChange: [{
            type: Output
        }], nzTitle: [{
            type: Input
        }], nzContent: [{
            type: Input
        }], nzMouseEnterDelay: [{
            type: Input
        }], nzMouseLeaveDelay: [{
            type: Input
        }], nzOverlayClassName: [{
            type: Input
        }], nzOverlayStyle: [{
            type: Input
        }], nzVisible: [{
            type: Input
        }] }); })();
    return NzTooltipBaseDirective;
}());
export { NzTooltipBaseDirective };
if (false) {
    /** @type {?} */
    NzTooltipBaseDirective.prototype.directiveNameTitle;
    /** @type {?} */
    NzTooltipBaseDirective.prototype.specificTitle;
    /** @type {?} */
    NzTooltipBaseDirective.prototype.directiveNameContent;
    /** @type {?} */
    NzTooltipBaseDirective.prototype.specificContent;
    /** @type {?} */
    NzTooltipBaseDirective.prototype.specificTrigger;
    /** @type {?} */
    NzTooltipBaseDirective.prototype.specificPlacement;
    /** @type {?} */
    NzTooltipBaseDirective.prototype.specificOrigin;
    /** @type {?} */
    NzTooltipBaseDirective.prototype.specificVisible;
    /** @type {?} */
    NzTooltipBaseDirective.prototype.specificMouseEnterDelay;
    /** @type {?} */
    NzTooltipBaseDirective.prototype.specificMouseLeaveDelay;
    /** @type {?} */
    NzTooltipBaseDirective.prototype.specificOverlayClassName;
    /** @type {?} */
    NzTooltipBaseDirective.prototype.specificOverlayStyle;
    /** @type {?} */
    NzTooltipBaseDirective.prototype.specificVisibleChange;
    /**
     * @deprecated 10.0.0. This is deprecated and going to be removed in 10.0.0.
     * Please use a more specific API. Like `nzTooltipTitle`.
     * @type {?}
     */
    NzTooltipBaseDirective.prototype.nzTitle;
    /**
     * @deprecated 10.0.0. This is deprecated and going to be removed in 10.0.0.
     * Please use a more specific API. Like `nzPopoverContent`.
     * @type {?}
     */
    NzTooltipBaseDirective.prototype.nzContent;
    /**
     * @deprecated 10.0.0. This is deprecated and going to be removed in 10.0.0.
     * Please use a more specific API. Like `nzTooltipTrigger`.
     * @type {?}
     */
    NzTooltipBaseDirective.prototype.nzTrigger;
    /**
     * @deprecated 10.0.0. This is deprecated and going to be removed in 10.0.0.
     * Please use a more specific API. Like `nzTooltipPlacement`.
     * @type {?}
     */
    NzTooltipBaseDirective.prototype.nzPlacement;
    /** @type {?} */
    NzTooltipBaseDirective.prototype.nzMouseEnterDelay;
    /** @type {?} */
    NzTooltipBaseDirective.prototype.nzMouseLeaveDelay;
    /** @type {?} */
    NzTooltipBaseDirective.prototype.nzOverlayClassName;
    /** @type {?} */
    NzTooltipBaseDirective.prototype.nzOverlayStyle;
    /** @type {?} */
    NzTooltipBaseDirective.prototype.nzVisible;
    /**
     * For create tooltip dynamically. This should be override for each different component.
     * @type {?}
     * @protected
     */
    NzTooltipBaseDirective.prototype.componentFactory;
    /** @type {?} */
    NzTooltipBaseDirective.prototype.visible;
    /**
     * @type {?}
     * @protected
     */
    NzTooltipBaseDirective.prototype.needProxyProperties;
    /** @type {?} */
    NzTooltipBaseDirective.prototype.nzVisibleChange;
    /** @type {?} */
    NzTooltipBaseDirective.prototype.component;
    /**
     * @type {?}
     * @protected
     */
    NzTooltipBaseDirective.prototype.destroy$;
    /**
     * @type {?}
     * @protected
     */
    NzTooltipBaseDirective.prototype.triggerDisposables;
    /**
     * @type {?}
     * @private
     */
    NzTooltipBaseDirective.prototype.delayTimer;
    /** @type {?} */
    NzTooltipBaseDirective.prototype.elementRef;
    /**
     * @type {?}
     * @protected
     */
    NzTooltipBaseDirective.prototype.hostView;
    /**
     * @type {?}
     * @protected
     */
    NzTooltipBaseDirective.prototype.resolver;
    /**
     * @type {?}
     * @protected
     */
    NzTooltipBaseDirective.prototype.renderer;
    /**
     * @type {?}
     * @protected
     */
    NzTooltipBaseDirective.prototype.noAnimation;
}
/**
 * @abstract
 */
var NzTooltipBaseComponent = /** @class */ (function () {
    function NzTooltipBaseComponent(cdr, noAnimation) {
        this.cdr = cdr;
        this.noAnimation = noAnimation;
        this.nzVisibleChange = new Subject();
        this.nzTitle = null;
        this.nzContent = null;
        this.nzOverlayStyle = {};
        this._visible = false;
        this._trigger = 'hover';
        this.preferredPlacement = 'top';
        this._classMap = {};
        this._hasBackdrop = false;
        this._prefix = 'ant-tooltip-placement';
        this._positions = __spread(DEFAULT_TOOLTIP_POSITIONS);
    }
    Object.defineProperty(NzTooltipBaseComponent.prototype, "nzVisible", {
        get: /**
         * @return {?}
         */
        function () {
            return this._visible;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var visible = toBoolean(value);
            if (this._visible !== visible) {
                this._visible = visible;
                this.nzVisibleChange.next(visible);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NzTooltipBaseComponent.prototype, "nzTrigger", {
        get: /**
         * @return {?}
         */
        function () {
            return this._trigger;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._trigger = value;
            this._hasBackdrop = this._trigger === 'click';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NzTooltipBaseComponent.prototype, "nzPlacement", {
        get: /**
         * @return {?}
         */
        function () {
            return this.preferredPlacement;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== this.preferredPlacement) {
                this.preferredPlacement = value;
                this._positions = __spread([POSITION_MAP[this.nzPlacement]], this._positions);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NzTooltipBaseComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.nzVisibleChange.complete();
    };
    /**
     * @return {?}
     */
    NzTooltipBaseComponent.prototype.show = /**
     * @return {?}
     */
    function () {
        if (this.nzVisible) {
            return;
        }
        if (!this.isEmpty()) {
            this.nzVisible = true;
            this.nzVisibleChange.next(true);
            this.cdr.detectChanges();
        }
    };
    /**
     * @return {?}
     */
    NzTooltipBaseComponent.prototype.hide = /**
     * @return {?}
     */
    function () {
        if (!this.nzVisible) {
            return;
        }
        this.nzVisible = false;
        this.nzVisibleChange.next(false);
        this.cdr.detectChanges();
    };
    /**
     * @return {?}
     */
    NzTooltipBaseComponent.prototype.updateByDirective = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.setClassMap();
        this.cdr.detectChanges();
        Promise.resolve().then((/**
         * @return {?}
         */
        function () {
            _this.updatePosition();
            _this.updateVisibilityByTitle();
        }));
    };
    /**
     * Force the component to update its position.
     */
    /**
     * Force the component to update its position.
     * @return {?}
     */
    NzTooltipBaseComponent.prototype.updatePosition = /**
     * Force the component to update its position.
     * @return {?}
     */
    function () {
        if (this.origin && this.overlay && this.overlay.overlayRef) {
            this.overlay.overlayRef.updatePosition();
        }
    };
    /**
     * @param {?} position
     * @return {?}
     */
    NzTooltipBaseComponent.prototype.onPositionChange = /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        this.preferredPlacement = (/** @type {?} */ (getPlacementName(position)));
        this.setClassMap();
        this.cdr.detectChanges();
    };
    /**
     * @return {?}
     */
    NzTooltipBaseComponent.prototype.setClassMap = /**
     * @return {?}
     */
    function () {
        var _a;
        this._classMap = (_a = {},
            _a[this.nzOverlayClassName] = true,
            _a[this._prefix + "-" + this.preferredPlacement] = true,
            _a);
    };
    /**
     * @param {?} origin
     * @return {?}
     */
    NzTooltipBaseComponent.prototype.setOverlayOrigin = /**
     * @param {?} origin
     * @return {?}
     */
    function (origin) {
        this.origin = origin;
        this.cdr.markForCheck();
    };
    /**
     * Hide the component while the content is empty.
     */
    /**
     * Hide the component while the content is empty.
     * @private
     * @return {?}
     */
    NzTooltipBaseComponent.prototype.updateVisibilityByTitle = /**
     * Hide the component while the content is empty.
     * @private
     * @return {?}
     */
    function () {
        if (this.isEmpty()) {
            this.hide();
        }
    };
    /** @nocollapse */
    NzTooltipBaseComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: NzNoAnimationDirective }
    ]; };
    NzTooltipBaseComponent.propDecorators = {
        overlay: [{ type: ViewChild, args: ['overlay', { static: false },] }]
    };
NzTooltipBaseComponent.ɵfac = function NzTooltipBaseComponent_Factory(t) { return new (t || NzTooltipBaseComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NzNoAnimationDirective)); };
NzTooltipBaseComponent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NzTooltipBaseComponent, viewQuery: function NzTooltipBaseComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.overlay = _t.first);
    } } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzTooltipBaseComponent, [{
        type: Directive
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.NzNoAnimationDirective }]; }, { overlay: [{
            type: ViewChild,
            args: ['overlay', { static: false }]
        }] }); })();
    return NzTooltipBaseComponent;
}());
export { NzTooltipBaseComponent };
if (false) {
    /** @type {?} */
    NzTooltipBaseComponent.ngAcceptInputType_nzVisible;
    /** @type {?} */
    NzTooltipBaseComponent.prototype.overlay;
    /** @type {?} */
    NzTooltipBaseComponent.prototype.nzVisibleChange;
    /** @type {?} */
    NzTooltipBaseComponent.prototype.nzTitle;
    /** @type {?} */
    NzTooltipBaseComponent.prototype.nzContent;
    /** @type {?} */
    NzTooltipBaseComponent.prototype.nzOverlayClassName;
    /** @type {?} */
    NzTooltipBaseComponent.prototype.nzOverlayStyle;
    /** @type {?} */
    NzTooltipBaseComponent.prototype.nzMouseEnterDelay;
    /** @type {?} */
    NzTooltipBaseComponent.prototype.nzMouseLeaveDelay;
    /** @type {?} */
    NzTooltipBaseComponent.prototype._visible;
    /**
     * @type {?}
     * @protected
     */
    NzTooltipBaseComponent.prototype._trigger;
    /** @type {?} */
    NzTooltipBaseComponent.prototype.origin;
    /** @type {?} */
    NzTooltipBaseComponent.prototype.preferredPlacement;
    /** @type {?} */
    NzTooltipBaseComponent.prototype._classMap;
    /** @type {?} */
    NzTooltipBaseComponent.prototype._hasBackdrop;
    /** @type {?} */
    NzTooltipBaseComponent.prototype._prefix;
    /** @type {?} */
    NzTooltipBaseComponent.prototype._positions;
    /** @type {?} */
    NzTooltipBaseComponent.prototype.cdr;
    /** @type {?} */
    NzTooltipBaseComponent.prototype.noAnimation;
    /**
     * Empty component cannot be opened.
     * @abstract
     * @protected
     * @return {?}
     */
    NzTooltipBaseComponent.prototype.isEmpty = function () { };
}
/**
 * @param {?} value
 * @return {?}
 */
export function isTooltipEmpty(value) {
    return value instanceof TemplateRef ? false : value === '' || !isNotNil(value);
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZXMiOlsibmc6L25nLXpvcnJvLWFudGQvdG9vbHRpcC9iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFLQSxPQUFPLEVBQUUsbUJBQW1CLEVBQTRFLE1BQU0sc0JBQXNCLENBQUM7QUFDckksT0FBTyxFQUVMLGlCQUFpQixFQUVqQix3QkFBd0IsRUFDeEIsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osS0FBSyxFQUdMLE1BQU0sRUFDTixTQUFTLEVBRVQsV0FBVyxFQUNYLFNBQVMsRUFDVCxnQkFBZ0IsRUFDakIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzVELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxnQkFBZ0IsRUFBRSxZQUFZLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUV2RyxPQUFPLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLG9CQUFvQixFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2pFO0FBQ0c7QUFBYTs7Ozs7QUFFaEI7QUFDNkMsSUFxRzNDLGdDQUNTLFVBQXNCLEVBQ25CLFFBQTBCLEVBQzFCLFFBQWtDLEVBQ2xDLFFBQW1CLEVBQ25CLFdBQW9DO0FBQy9DLFFBTFEsZUFBVSxHQUFWLFVBQVUsQ0FBWTtBQUFDLFFBQ3BCLGFBQVEsR0FBUixRQUFRLENBQWtCO0FBQUMsUUFDM0IsYUFBUSxHQUFSLFFBQVEsQ0FBMEI7QUFBQyxRQUNuQyxhQUFRLEdBQVIsUUFBUSxDQUFXO0FBQUMsUUFDcEIsZ0JBQVcsR0FBWCxXQUFXLENBQXlCO0FBQ2xELFFBOUZFLDBCQUFxQixHQUFHLElBQUksWUFB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SUFBbkIsb0RBQTJCO0FBQzdCO0FBQ29CLElBQWxCLDJDQUFpQztBQUNuQztBQUFxQixJQUFuQiw4Q0FBcUI7QUFDdkI7QUFBcUIsSUFBbkIseUNBQWtDO0FBQ3BDO0FBQXFCLElBQW5CLDRDQUFzRTtBQUN4RTtBQUNvQixJQUFOLHFDQUE2QjtBQUFDO0FBQXFCLElBQXBCLDZDQUEyQztBQUFDO0FBRXRGO0FBQ2lCO0FBQ3BCO0FBRWE7QUFDRTtBQUFRLElBc0VyQiwyREFBc0M7QUFDeEM7QUFDQTtBQUNHO0FBQW9CO0FBQWU7QUFBdEMsTUFBTSxVQUFVLGNBQWMsQ0FBQyxLQUF3QztBQUFJLElBQ3pFLE9BQU8sS0FBSyxZQUFZLFdBQVcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2pGLENBQUM7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5cbmltcG9ydCB7IENka0Nvbm5lY3RlZE92ZXJsYXksIENka092ZXJsYXlPcmlnaW4sIENvbm5lY3RlZE92ZXJsYXlQb3NpdGlvbkNoYW5nZSwgQ29ubmVjdGlvblBvc2l0aW9uUGFpciB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcbmltcG9ydCB7XG4gIEFmdGVyVmlld0luaXQsXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnRGYWN0b3J5LFxuICBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT25DaGFuZ2VzLFxuICBPbkRlc3Ryb3ksXG4gIE91dHB1dCxcbiAgUmVuZGVyZXIyLFxuICBTaW1wbGVDaGFuZ2VzLFxuICBUZW1wbGF0ZVJlZixcbiAgVmlld0NoaWxkLFxuICBWaWV3Q29udGFpbmVyUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgd2FybkRlcHJlY2F0aW9uIH0gZnJvbSAnbmctem9ycm8tYW50ZC9jb3JlL2xvZ2dlcic7XG5pbXBvcnQgeyBOek5vQW5pbWF0aW9uRGlyZWN0aXZlIH0gZnJvbSAnbmctem9ycm8tYW50ZC9jb3JlL25vLWFuaW1hdGlvbic7XG5pbXBvcnQgeyBERUZBVUxUX1RPT0xUSVBfUE9TSVRJT05TLCBnZXRQbGFjZW1lbnROYW1lLCBQT1NJVElPTl9NQVAgfSBmcm9tICduZy16b3Jyby1hbnRkL2NvcmUvb3ZlcmxheSc7XG5pbXBvcnQgeyBCb29sZWFuSW5wdXQsIE5nQ2xhc3NJbnRlcmZhY2UsIE5nU3R5bGVJbnRlcmZhY2UsIE56U2FmZUFueSwgTnpUU1R5cGUgfSBmcm9tICduZy16b3Jyby1hbnRkL2NvcmUvdHlwZXMnO1xuaW1wb3J0IHsgaXNOb3ROaWwsIHRvQm9vbGVhbiB9IGZyb20gJ25nLXpvcnJvLWFudGQvY29yZS91dGlsJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkLCB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmV4cG9ydCB0eXBlIE56VG9vbHRpcFRyaWdnZXIgPSAnY2xpY2snIHwgJ2ZvY3VzJyB8ICdob3ZlcicgfCBudWxsO1xuXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBOelRvb2x0aXBCYXNlRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQge1xuICBkaXJlY3RpdmVOYW1lVGl0bGU/OiBOelRTVHlwZSB8IG51bGw7XG4gIHNwZWNpZmljVGl0bGU/OiBOelRTVHlwZSB8IG51bGw7XG4gIGRpcmVjdGl2ZU5hbWVDb250ZW50PzogTnpUU1R5cGUgfCBudWxsO1xuICBzcGVjaWZpY0NvbnRlbnQ/OiBOelRTVHlwZSB8IG51bGw7XG4gIHNwZWNpZmljVHJpZ2dlcj86IE56VG9vbHRpcFRyaWdnZXI7XG4gIHNwZWNpZmljUGxhY2VtZW50Pzogc3RyaW5nO1xuICBzcGVjaWZpY09yaWdpbj86IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+O1xuICBzcGVjaWZpY1Zpc2libGU/OiBib29sZWFuO1xuICBzcGVjaWZpY01vdXNlRW50ZXJEZWxheT86IG51bWJlcjtcbiAgc3BlY2lmaWNNb3VzZUxlYXZlRGVsYXk/OiBudW1iZXI7XG4gIHNwZWNpZmljT3ZlcmxheUNsYXNzTmFtZT86IHN0cmluZztcbiAgc3BlY2lmaWNPdmVybGF5U3R5bGU/OiBOZ1N0eWxlSW50ZXJmYWNlO1xuICBzcGVjaWZpY1Zpc2libGVDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCAxMC4wLjAuIFRoaXMgaXMgZGVwcmVjYXRlZCBhbmQgZ29pbmcgdG8gYmUgcmVtb3ZlZCBpbiAxMC4wLjAuXG4gICAqIFBsZWFzZSB1c2UgYSBtb3JlIHNwZWNpZmljIEFQSS4gTGlrZSBgbnpUb29sdGlwVGl0bGVgLlxuICAgKi9cbiAgQElucHV0KCkgbnpUaXRsZT86IE56VFNUeXBlIHwgbnVsbDtcblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgMTAuMC4wLiBUaGlzIGlzIGRlcHJlY2F0ZWQgYW5kIGdvaW5nIHRvIGJlIHJlbW92ZWQgaW4gMTAuMC4wLlxuICAgKiBQbGVhc2UgdXNlIGEgbW9yZSBzcGVjaWZpYyBBUEkuIExpa2UgYG56UG9wb3ZlckNvbnRlbnRgLlxuICAgKi9cbiAgQElucHV0KCkgbnpDb250ZW50PzogTnpUU1R5cGUgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCAxMC4wLjAuIFRoaXMgaXMgZGVwcmVjYXRlZCBhbmQgZ29pbmcgdG8gYmUgcmVtb3ZlZCBpbiAxMC4wLjAuXG4gICAqIFBsZWFzZSB1c2UgYSBtb3JlIHNwZWNpZmljIEFQSS4gTGlrZSBgbnpUb29sdGlwVHJpZ2dlcmAuXG4gICAqL1xuICBASW5wdXQoKSBuelRyaWdnZXI6IE56VG9vbHRpcFRyaWdnZXIgPSAnaG92ZXInO1xuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCAxMC4wLjAuIFRoaXMgaXMgZGVwcmVjYXRlZCBhbmQgZ29pbmcgdG8gYmUgcmVtb3ZlZCBpbiAxMC4wLjAuXG4gICAqIFBsZWFzZSB1c2UgYSBtb3JlIHNwZWNpZmljIEFQSS4gTGlrZSBgbnpUb29sdGlwUGxhY2VtZW50YC5cbiAgICovXG4gIEBJbnB1dCgpIG56UGxhY2VtZW50OiBzdHJpbmcgPSAndG9wJztcblxuICBASW5wdXQoKSBuek1vdXNlRW50ZXJEZWxheT86IG51bWJlcjtcbiAgQElucHV0KCkgbnpNb3VzZUxlYXZlRGVsYXk/OiBudW1iZXI7XG4gIEBJbnB1dCgpIG56T3ZlcmxheUNsYXNzTmFtZT86IHN0cmluZztcbiAgQElucHV0KCkgbnpPdmVybGF5U3R5bGU/OiBOZ1N0eWxlSW50ZXJmYWNlO1xuICBASW5wdXQoKSBuelZpc2libGU/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBGb3IgY3JlYXRlIHRvb2x0aXAgZHluYW1pY2FsbHkuIFRoaXMgc2hvdWxkIGJlIG92ZXJyaWRlIGZvciBlYWNoIGRpZmZlcmVudCBjb21wb25lbnQuXG4gICAqL1xuICBwcm90ZWN0ZWQgY29tcG9uZW50RmFjdG9yeSE6IENvbXBvbmVudEZhY3Rvcnk8TnpUb29sdGlwQmFzZUNvbXBvbmVudD47XG5cbiAgLyoqXG4gICAqIFRoaXMgdHJ1ZSB0aXRsZSB0aGF0IHdvdWxkIGJlIHVzZWQgaW4gb3RoZXIgcGFydHMgb24gdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2V0IHRpdGxlKCk6IE56VFNUeXBlIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuc3BlY2lmaWNUaXRsZSB8fCB0aGlzLmRpcmVjdGl2ZU5hbWVUaXRsZSB8fCB0aGlzLm56VGl0bGUgfHwgbnVsbDtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXQgY29udGVudCgpOiBOelRTVHlwZSB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLnNwZWNpZmljQ29udGVudCB8fCB0aGlzLmRpcmVjdGl2ZU5hbWVDb250ZW50IHx8IHRoaXMubnpDb250ZW50IHx8IG51bGw7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0IHBsYWNlbWVudCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnNwZWNpZmljUGxhY2VtZW50IHx8IHRoaXMubnpQbGFjZW1lbnQ7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0IHRyaWdnZXIoKTogTnpUb29sdGlwVHJpZ2dlciB7XG4gICAgLy8gTnpUb29sdGlwVHJpZ2dlciBjYW4gYmUgbnVsbC5cbiAgICByZXR1cm4gdHlwZW9mIHRoaXMuc3BlY2lmaWNUcmlnZ2VyICE9PSAndW5kZWZpbmVkJyA/IHRoaXMuc3BlY2lmaWNUcmlnZ2VyIDogdGhpcy5uelRyaWdnZXI7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0IGlzVmlzaWJsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zcGVjaWZpY1Zpc2libGUgfHwgdGhpcy5uelZpc2libGUgfHwgZmFsc2U7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0IG1vdXNlRW50ZXJEZWxheSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnNwZWNpZmljTW91c2VFbnRlckRlbGF5IHx8IHRoaXMubnpNb3VzZUVudGVyRGVsYXkgfHwgMC4xNTtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXQgbW91c2VMZWF2ZURlbGF5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuc3BlY2lmaWNNb3VzZUxlYXZlRGVsYXkgfHwgdGhpcy5uek1vdXNlTGVhdmVEZWxheSB8fCAwLjE7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0IG92ZXJsYXlDbGFzc05hbWUoKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuc3BlY2lmaWNPdmVybGF5Q2xhc3NOYW1lIHx8IHRoaXMubnpPdmVybGF5Q2xhc3NOYW1lIHx8IG51bGw7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0IG92ZXJsYXlTdHlsZSgpOiBOZ1N0eWxlSW50ZXJmYWNlIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuc3BlY2lmaWNPdmVybGF5U3R5bGUgfHwgdGhpcy5uek92ZXJsYXlTdHlsZSB8fCBudWxsO1xuICB9XG5cbiAgdmlzaWJsZSA9IGZhbHNlO1xuICBwcm90ZWN0ZWQgbmVlZFByb3h5UHJvcGVydGllcyA9IFsnbm9BbmltYXRpb24nXTtcblxuICBAT3V0cHV0KCkgcmVhZG9ubHkgbnpWaXNpYmxlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG4gIGNvbXBvbmVudD86IE56VG9vbHRpcEJhc2VDb21wb25lbnQ7XG5cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGRlc3Ryb3kkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IHRyaWdnZXJEaXNwb3NhYmxlczogQXJyYXk8KCkgPT4gdm9pZD4gPSBbXTtcblxuICBwcml2YXRlIGRlbGF5VGltZXI/OiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgcHJvdGVjdGVkIGhvc3RWaWV3OiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIHByb3RlY3RlZCByZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICAgIHByb3RlY3RlZCByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgIHByb3RlY3RlZCBub0FuaW1hdGlvbj86IE56Tm9BbmltYXRpb25EaXJlY3RpdmVcbiAgKSB7fVxuXG4gIHdhcm5EZXByZWNhdGlvbklmTmVlZGVkKFxuICAgIGlzTmVlZGVkOiBib29sZWFuLFxuICAgIHByb3BlcnR5OiBzdHJpbmcsXG4gICAgbmV3UHJvcGVydHk6IHN0cmluZyxcbiAgICBjb21wOiBzdHJpbmcgPSAnbnotdG9vbHRpcCcsXG4gICAgc2hhcmVkOiBib29sZWFuID0gdHJ1ZVxuICApOiB2b2lkIHtcbiAgICBpZiAoaXNOZWVkZWQpIHtcbiAgICAgIGxldCBtZXNzYWdlID0gYCcke3Byb3BlcnR5fScgb2YgJyR7Y29tcH0nIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiAxMC4wLjAuXG4gICAgICBQbGVhc2UgdXNlICcke25ld1Byb3BlcnR5fScgaW5zdGVhZC5gO1xuXG4gICAgICBpZiAoc2hhcmVkKSB7XG4gICAgICAgIG1lc3NhZ2UgPSBgJHttZXNzYWdlfSBUaGUgc2FtZSB3aXRoICduei1wb3BvdmVyJyBhbmQgJ256LXBvcGNvbmZpcm0nLmA7XG4gICAgICB9XG4gICAgICB3YXJuRGVwcmVjYXRpb24obWVzc2FnZSk7XG4gICAgfVxuICB9XG5cbiAgd2FybkRlcHJlY2F0aW9uQnlDaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICAvLyB3YXJuIGRlcHJlY2F0ZWQgdGhpbmdzIHdoZW4gc3BlY2lmaWMgcHJvcGVydHkgaXMgbm90IGdpdmVuXG4gICAgdGhpcy53YXJuRGVwcmVjYXRpb25JZk5lZWRlZChjaGFuZ2VzLm56VGl0bGUgJiYgIXRoaXMuc3BlY2lmaWNUaXRsZSAmJiAhdGhpcy5kaXJlY3RpdmVOYW1lVGl0bGUsICduelRpdGxlJywgJ256VG9vbHRpcFRpdGxlJyk7XG4gICAgdGhpcy53YXJuRGVwcmVjYXRpb25JZk5lZWRlZChjaGFuZ2VzLm56Q29udGVudCAmJiAhdGhpcy5zcGVjaWZpY0NvbnRlbnQsICduekNvbnRlbnQnLCAnbnpQb3BvdmVyQ29udGVudCcsICduei1wb3BvdmVyJywgZmFsc2UpO1xuICAgIHRoaXMud2FybkRlcHJlY2F0aW9uSWZOZWVkZWQoY2hhbmdlcy5uelBsYWNlbWVudCAmJiAhdGhpcy5zcGVjaWZpY1BsYWNlbWVudCwgJ256UGxhY2VtZW50JywgJ256VG9vbHRpcFBsYWNlbWVudCcpO1xuICAgIHRoaXMud2FybkRlcHJlY2F0aW9uSWZOZWVkZWQoY2hhbmdlcy5uelRyaWdnZXIgJiYgIXRoaXMuc3BlY2lmaWNUcmlnZ2VyLCAnbnpUcmlnZ2VyJywgJ256VG9vbHRpcFRyaWdnZXInKTtcbiAgICB0aGlzLndhcm5EZXByZWNhdGlvbklmTmVlZGVkKGNoYW5nZXMubnpWaXNpYmxlICYmICF0aGlzLnNwZWNpZmljVmlzaWJsZSwgJ256VmlzaWJsZScsICduelRvb2x0aXBWaXNpYmxlJyk7XG4gICAgdGhpcy53YXJuRGVwcmVjYXRpb25JZk5lZWRlZChcbiAgICAgIGNoYW5nZXMubnpNb3VzZUVudGVyRGVsYXkgJiYgIXRoaXMuc3BlY2lmaWNNb3VzZUVudGVyRGVsYXksXG4gICAgICAnbnpNb3VzZUVudGVyRGVsYXknLFxuICAgICAgJ256VG9vbHRpcE1vdXNlRW50ZXJEZWxheSdcbiAgICApO1xuICAgIHRoaXMud2FybkRlcHJlY2F0aW9uSWZOZWVkZWQoXG4gICAgICBjaGFuZ2VzLm56TW91c2VMZWF2ZURlbGF5ICYmICF0aGlzLnNwZWNpZmljTW91c2VMZWF2ZURlbGF5LFxuICAgICAgJ256TW91c2VMZWF2ZURlbGF5JyxcbiAgICAgICduelRvb2x0aXBNb3VzZUxlYXZlRGVsYXknXG4gICAgKTtcbiAgICB0aGlzLndhcm5EZXByZWNhdGlvbklmTmVlZGVkKGNoYW5nZXMubnpPdmVybGF5Q2xhc3NOYW1lICYmICF0aGlzLnNwZWNpZmljT3ZlcmxheUNsYXNzTmFtZSwgJ256T3ZlcmxheUNsYXNzTmFtZScsICduelRvb2x0aXBDbGFzc05hbWUnKTtcbiAgICB0aGlzLndhcm5EZXByZWNhdGlvbklmTmVlZGVkKGNoYW5nZXMubnpPdmVybGF5U3R5bGUgJiYgIXRoaXMuc3BlY2lmaWNPdmVybGF5U3R5bGUsICduek92ZXJsYXlTdHlsZScsICduelRvb2x0aXBPdmVybGF5U3R5bGUnKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBjb25zdCB7IG56VHJpZ2dlciwgc3BlY2lmaWNUcmlnZ2VyIH0gPSBjaGFuZ2VzO1xuICAgIGNvbnN0IHRyaWdnZXIgPSBzcGVjaWZpY1RyaWdnZXIgfHwgbnpUcmlnZ2VyO1xuXG4gICAgaWYgKHRyaWdnZXIgJiYgIXRyaWdnZXIuaXNGaXJzdENoYW5nZSgpKSB7XG4gICAgICB0aGlzLnJlZ2lzdGVyVHJpZ2dlcnMoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jb21wb25lbnQpIHtcbiAgICAgIHRoaXMudXBkYXRlQ2hhbmdlZFByb3BlcnRpZXMoY2hhbmdlcyk7XG4gICAgfVxuXG4gICAgdGhpcy53YXJuRGVwcmVjYXRpb25CeUNoYW5nZXMoY2hhbmdlcyk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcbiAgICB0aGlzLnJlZ2lzdGVyVHJpZ2dlcnMoKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuZGVzdHJveSQubmV4dCgpO1xuICAgIHRoaXMuZGVzdHJveSQuY29tcGxldGUoKTtcblxuICAgIC8vIENsZWFyIHRvZ2dsaW5nIHRpbWVyLiBJc3N1ZSAjMzg3NSAjNDMxNyAjNDM4NlxuICAgIHRoaXMuY2xlYXJUb2dnbGluZ1RpbWVyKCk7XG4gICAgdGhpcy5yZW1vdmVUcmlnZ2VyTGlzdGVuZXJzKCk7XG4gIH1cblxuICBzaG93KCk6IHZvaWQge1xuICAgIHRoaXMuY29tcG9uZW50Py5zaG93KCk7XG4gIH1cblxuICBoaWRlKCk6IHZvaWQge1xuICAgIHRoaXMuY29tcG9uZW50Py5oaWRlKCk7XG4gIH1cblxuICAvKipcbiAgICogRm9yY2UgdGhlIGNvbXBvbmVudCB0byB1cGRhdGUgaXRzIHBvc2l0aW9uLlxuICAgKi9cbiAgdXBkYXRlUG9zaXRpb24oKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuY29tcG9uZW50KSB7XG4gICAgICB0aGlzLmNvbXBvbmVudC51cGRhdGVQb3NpdGlvbigpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBkeW5hbWljIHRvb2x0aXAgY29tcG9uZW50LiBUaGlzIG1ldGhvZCBjYW4gYmUgb3ZlcnJpZGUuXG4gICAqL1xuICBwcm90ZWN0ZWQgY3JlYXRlQ29tcG9uZW50KCk6IHZvaWQge1xuICAgIGNvbnN0IGNvbXBvbmVudFJlZiA9IHRoaXMuaG9zdFZpZXcuY3JlYXRlQ29tcG9uZW50KHRoaXMuY29tcG9uZW50RmFjdG9yeSk7XG5cbiAgICB0aGlzLmNvbXBvbmVudCA9IGNvbXBvbmVudFJlZi5pbnN0YW5jZTtcblxuICAgIC8vIFJlbW92ZSB0aGUgY29tcG9uZW50J3MgRE9NIGJlY2F1c2UgaXQgc2hvdWxkIGJlIGluIHRoZSBvdmVybGF5IGNvbnRhaW5lci5cbiAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNoaWxkKHRoaXMucmVuZGVyZXIucGFyZW50Tm9kZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCksIGNvbXBvbmVudFJlZi5sb2NhdGlvbi5uYXRpdmVFbGVtZW50KTtcbiAgICB0aGlzLmNvbXBvbmVudC5zZXRPdmVybGF5T3JpZ2luKHsgZWxlbWVudFJlZjogdGhpcy5zcGVjaWZpY09yaWdpbiB8fCB0aGlzLmVsZW1lbnRSZWYgfSk7XG5cbiAgICB0aGlzLnVwZGF0ZUNoYW5nZWRQcm9wZXJ0aWVzKHRoaXMubmVlZFByb3h5UHJvcGVydGllcyk7XG5cbiAgICB0aGlzLmNvbXBvbmVudC5uelZpc2libGVDaGFuZ2UucGlwZShkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLCB0YWtlVW50aWwodGhpcy5kZXN0cm95JCkpLnN1YnNjcmliZSgodmlzaWJsZTogYm9vbGVhbikgPT4ge1xuICAgICAgdGhpcy52aXNpYmxlID0gdmlzaWJsZTtcbiAgICAgIHRoaXMuc3BlY2lmaWNWaXNpYmxlQ2hhbmdlLmVtaXQodmlzaWJsZSk7XG4gICAgICB0aGlzLm56VmlzaWJsZUNoYW5nZS5lbWl0KHZpc2libGUpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJvdGVjdGVkIHJlZ2lzdGVyVHJpZ2dlcnMoKTogdm9pZCB7XG4gICAgLy8gV2hlbiB0aGUgbWV0aG9kIGdldHMgaW52b2tlZCwgYWxsIHByb3BlcnRpZXMgaGFzIGJlZW4gc3luY2VkIHRvIHRoZSBkeW5hbWljIGNvbXBvbmVudC5cbiAgICAvLyBBZnRlciByZW1vdmluZyB0aGUgb2xkIEFQSSwgd2UgY2FuIGp1c3QgY2hlY2sgdGhlIGRpcmVjdGl2ZSdzIG93biBgbnpUcmlnZ2VyYC5cbiAgICBjb25zdCBlbCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICAgIGNvbnN0IHRyaWdnZXIgPSB0aGlzLnRyaWdnZXI7XG5cbiAgICB0aGlzLnJlbW92ZVRyaWdnZXJMaXN0ZW5lcnMoKTtcblxuICAgIGlmICh0cmlnZ2VyID09PSAnaG92ZXInKSB7XG4gICAgICBsZXQgb3ZlcmxheUVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICAgICAgdGhpcy50cmlnZ2VyRGlzcG9zYWJsZXMucHVzaChcbiAgICAgICAgdGhpcy5yZW5kZXJlci5saXN0ZW4oZWwsICdtb3VzZWVudGVyJywgKCkgPT4ge1xuICAgICAgICAgIHRoaXMuZGVsYXlFbnRlckxlYXZlKHRydWUsIHRydWUsIHRoaXMubW91c2VFbnRlckRlbGF5KTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgICB0aGlzLnRyaWdnZXJEaXNwb3NhYmxlcy5wdXNoKFxuICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3RlbihlbCwgJ21vdXNlbGVhdmUnLCAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5kZWxheUVudGVyTGVhdmUodHJ1ZSwgZmFsc2UsIHRoaXMubW91c2VMZWF2ZURlbGF5KTtcbiAgICAgICAgICBpZiAodGhpcy5jb21wb25lbnQ/Lm92ZXJsYXkub3ZlcmxheVJlZiAmJiAhb3ZlcmxheUVsZW1lbnQpIHtcbiAgICAgICAgICAgIG92ZXJsYXlFbGVtZW50ID0gdGhpcy5jb21wb25lbnQub3ZlcmxheS5vdmVybGF5UmVmLm92ZXJsYXlFbGVtZW50O1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyRGlzcG9zYWJsZXMucHVzaChcbiAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5saXN0ZW4ob3ZlcmxheUVsZW1lbnQsICdtb3VzZWVudGVyJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVsYXlFbnRlckxlYXZlKGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXJEaXNwb3NhYmxlcy5wdXNoKFxuICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3RlbihvdmVybGF5RWxlbWVudCwgJ21vdXNlbGVhdmUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZWxheUVudGVyTGVhdmUoZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKHRyaWdnZXIgPT09ICdmb2N1cycpIHtcbiAgICAgIHRoaXMudHJpZ2dlckRpc3Bvc2FibGVzLnB1c2godGhpcy5yZW5kZXJlci5saXN0ZW4oZWwsICdmb2N1cycsICgpID0+IHRoaXMuc2hvdygpKSk7XG4gICAgICB0aGlzLnRyaWdnZXJEaXNwb3NhYmxlcy5wdXNoKHRoaXMucmVuZGVyZXIubGlzdGVuKGVsLCAnYmx1cicsICgpID0+IHRoaXMuaGlkZSgpKSk7XG4gICAgfSBlbHNlIGlmICh0cmlnZ2VyID09PSAnY2xpY2snKSB7XG4gICAgICB0aGlzLnRyaWdnZXJEaXNwb3NhYmxlcy5wdXNoKFxuICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3RlbihlbCwgJ2NsaWNrJywgZSA9PiB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9IC8vIEVsc2UgZG8gbm90aGluZyBiZWNhdXNlIHVzZXIgd2FudHMgdG8gY29udHJvbCB0aGUgdmlzaWJpbGl0eSBwcm9ncmFtbWF0aWNhbGx5LlxuICB9XG5cbiAgdXBkYXRlUHJvcGVydGllc0J5Q2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgY29uc3QgcHJvcGVydGllcyA9IHtcbiAgICAgIHNwZWNpZmljVGl0bGU6IFsnbnpUaXRsZScsIHRoaXMudGl0bGVdLFxuICAgICAgZGlyZWN0aXZlTmFtZVRpdGxlOiBbJ256VGl0bGUnLCB0aGlzLnRpdGxlXSxcbiAgICAgIG56VGl0bGU6IFsnbnpUaXRsZScsIHRoaXMudGl0bGVdLFxuICAgICAgc3BlY2lmaWNDb250ZW50OiBbJ256Q29udGVudCcsIHRoaXMuY29udGVudF0sXG4gICAgICBkaXJlY3RpdmVOYW1lQ29udGVudDogWyduekNvbnRlbnQnLCB0aGlzLmNvbnRlbnRdLFxuICAgICAgbnpDb250ZW50OiBbJ256Q29udGVudCcsIHRoaXMuY29udGVudF0sXG4gICAgICBzcGVjaWZpY1RyaWdnZXI6IFsnbnpUcmlnZ2VyJywgdGhpcy50cmlnZ2VyXSxcbiAgICAgIG56VHJpZ2dlcjogWyduelRyaWdnZXInLCB0aGlzLnRyaWdnZXJdLFxuICAgICAgc3BlY2lmaWNQbGFjZW1lbnQ6IFsnbnpQbGFjZW1lbnQnLCB0aGlzLnBsYWNlbWVudF0sXG4gICAgICBuelBsYWNlbWVudDogWyduelBsYWNlbWVudCcsIHRoaXMucGxhY2VtZW50XSxcbiAgICAgIHNwZWNpZmljVmlzaWJsZTogWyduelZpc2libGUnLCB0aGlzLmlzVmlzaWJsZV0sXG4gICAgICBuelZpc2libGU6IFsnbnpWaXNpYmxlJywgdGhpcy5pc1Zpc2libGVdLFxuICAgICAgc3BlY2lmaWNNb3VzZUVudGVyRGVsYXk6IFsnbnpNb3VzZUVudGVyRGVsYXknLCB0aGlzLm1vdXNlRW50ZXJEZWxheV0sXG4gICAgICBuek1vdXNlRW50ZXJEZWxheTogWyduek1vdXNlRW50ZXJEZWxheScsIHRoaXMubW91c2VFbnRlckRlbGF5XSxcbiAgICAgIHNwZWNpZmljTW91c2VMZWF2ZURlbGF5OiBbJ256TW91c2VMZWF2ZURlbGF5JywgdGhpcy5tb3VzZUxlYXZlRGVsYXldLFxuICAgICAgbnpNb3VzZUxlYXZlRGVsYXk6IFsnbnpNb3VzZUxlYXZlRGVsYXknLCB0aGlzLm1vdXNlTGVhdmVEZWxheV0sXG4gICAgICBzcGVjaWZpY092ZXJsYXlDbGFzc05hbWU6IFsnbnpPdmVybGF5Q2xhc3NOYW1lJywgdGhpcy5vdmVybGF5Q2xhc3NOYW1lXSxcbiAgICAgIG56T3ZlcmxheUNsYXNzTmFtZTogWyduek92ZXJsYXlDbGFzc05hbWUnLCB0aGlzLm92ZXJsYXlDbGFzc05hbWVdLFxuICAgICAgc3BlY2lmaWNPdmVybGF5U3R5bGU6IFsnbnpPdmVybGF5U3R5bGUnLCB0aGlzLm92ZXJsYXlTdHlsZV0sXG4gICAgICBuek92ZXJsYXlTdHlsZTogWyduek92ZXJsYXlTdHlsZScsIHRoaXMub3ZlcmxheVN0eWxlXVxuICAgIH07XG5cbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoY2hhbmdlcyk7XG4gICAga2V5cy5mb3JFYWNoKChwcm9wZXJ0eTogTnpTYWZlQW55KSA9PiB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBpZiAocHJvcGVydGllc1twcm9wZXJ0eV0pIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBjb25zdCBbbmFtZSwgdmFsdWVdID0gcHJvcGVydGllc1twcm9wZXJ0eV07XG4gICAgICAgIHRoaXMudXBkYXRlQ29tcG9uZW50VmFsdWUobmFtZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdXBkYXRlUHJvcGVydGllc0J5QXJyYXkoKTogdm9pZCB7XG4gICAgdGhpcy51cGRhdGVDb21wb25lbnRWYWx1ZSgnbnpUaXRsZScsIHRoaXMudGl0bGUpO1xuICAgIHRoaXMudXBkYXRlQ29tcG9uZW50VmFsdWUoJ256Q29udGVudCcsIHRoaXMuY29udGVudCk7XG4gICAgdGhpcy51cGRhdGVDb21wb25lbnRWYWx1ZSgnbnpQbGFjZW1lbnQnLCB0aGlzLnBsYWNlbWVudCk7XG4gICAgdGhpcy51cGRhdGVDb21wb25lbnRWYWx1ZSgnbnpUcmlnZ2VyJywgdGhpcy50cmlnZ2VyKTtcbiAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudFZhbHVlKCduelZpc2libGUnLCB0aGlzLmlzVmlzaWJsZSk7XG4gICAgdGhpcy51cGRhdGVDb21wb25lbnRWYWx1ZSgnbnpNb3VzZUVudGVyRGVsYXknLCB0aGlzLm1vdXNlRW50ZXJEZWxheSk7XG4gICAgdGhpcy51cGRhdGVDb21wb25lbnRWYWx1ZSgnbnpNb3VzZUxlYXZlRGVsYXknLCB0aGlzLm1vdXNlTGVhdmVEZWxheSk7XG4gICAgdGhpcy51cGRhdGVDb21wb25lbnRWYWx1ZSgnbnpPdmVybGF5Q2xhc3NOYW1lJywgdGhpcy5vdmVybGF5Q2xhc3NOYW1lKTtcbiAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudFZhbHVlKCduek92ZXJsYXlTdHlsZScsIHRoaXMub3ZlcmxheVN0eWxlKTtcbiAgfVxuICAvKipcbiAgICogU3luYyBjaGFuZ2VkIHByb3BlcnRpZXMgdG8gdGhlIGNvbXBvbmVudCBhbmQgdHJpZ2dlciBjaGFuZ2UgZGV0ZWN0aW9uIGluIHRoYXQgY29tcG9uZW50LlxuICAgKi9cbiAgcHJvdGVjdGVkIHVwZGF0ZUNoYW5nZWRQcm9wZXJ0aWVzKHByb3BlcnRpZXNPckNoYW5nZXM6IHN0cmluZ1tdIHwgU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5KHByb3BlcnRpZXNPckNoYW5nZXMpO1xuICAgIGNvbnN0IGtleXMgPSBpc0FycmF5ID8gKHByb3BlcnRpZXNPckNoYW5nZXMgYXMgc3RyaW5nW10pIDogT2JqZWN0LmtleXMocHJvcGVydGllc09yQ2hhbmdlcyk7XG5cbiAgICBrZXlzLmZvckVhY2goKHByb3BlcnR5OiBOelNhZmVBbnkpID0+IHtcbiAgICAgIGlmICh0aGlzLm5lZWRQcm94eVByb3BlcnRpZXMuaW5kZXhPZihwcm9wZXJ0eSkgIT09IC0xKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdGhpcy51cGRhdGVDb21wb25lbnRWYWx1ZShwcm9wZXJ0eSwgdGhpc1twcm9wZXJ0eV0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChpc0FycmF5KSB7XG4gICAgICB0aGlzLnVwZGF0ZVByb3BlcnRpZXNCeUFycmF5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudXBkYXRlUHJvcGVydGllc0J5Q2hhbmdlcyhwcm9wZXJ0aWVzT3JDaGFuZ2VzIGFzIFNpbXBsZUNoYW5nZXMpO1xuICAgIH1cbiAgICB0aGlzLmNvbXBvbmVudD8udXBkYXRlQnlEaXJlY3RpdmUoKTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlQ29tcG9uZW50VmFsdWUoa2V5OiBzdHJpbmcsIHZhbHVlOiBOelNhZmVBbnkpOiB2b2lkIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdGhpcy5jb21wb25lbnRba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZGVsYXlFbnRlckxlYXZlKGlzT3JpZ2luOiBib29sZWFuLCBpc0VudGVyOiBib29sZWFuLCBkZWxheTogbnVtYmVyID0gLTEpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5kZWxheVRpbWVyKSB7XG4gICAgICB0aGlzLmNsZWFyVG9nZ2xpbmdUaW1lcigpO1xuICAgIH0gZWxzZSBpZiAoZGVsYXkgPiAwKSB7XG4gICAgICB0aGlzLmRlbGF5VGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5kZWxheVRpbWVyID0gdW5kZWZpbmVkO1xuICAgICAgICBpc0VudGVyID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcbiAgICAgIH0sIGRlbGF5ICogMTAwMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGBpc09yaWdpbmAgaXMgdXNlZCBkdWUgdG8gdGhlIHRvb2x0aXAgd2lsbCBub3QgaGlkZSBpbW1lZGlhdGVseVxuICAgICAgLy8gKG1heSBjYXVzZWQgYnkgdGhlIGZhZGUtb3V0IGFuaW1hdGlvbikuXG4gICAgICBpc0VudGVyICYmIGlzT3JpZ2luID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHJlbW92ZVRyaWdnZXJMaXN0ZW5lcnMoKTogdm9pZCB7XG4gICAgdGhpcy50cmlnZ2VyRGlzcG9zYWJsZXMuZm9yRWFjaChkaXNwb3NlID0+IGRpc3Bvc2UoKSk7XG4gICAgdGhpcy50cmlnZ2VyRGlzcG9zYWJsZXMubGVuZ3RoID0gMDtcbiAgfVxuXG4gIHByaXZhdGUgY2xlYXJUb2dnbGluZ1RpbWVyKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmRlbGF5VGltZXIpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmRlbGF5VGltZXIpO1xuICAgICAgdGhpcy5kZWxheVRpbWVyID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxufVxuXG5ARGlyZWN0aXZlKClcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpkaXJlY3RpdmUtY2xhc3Mtc3VmZml4XG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTnpUb29sdGlwQmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uelZpc2libGU6IEJvb2xlYW5JbnB1dDtcblxuICBAVmlld0NoaWxkKCdvdmVybGF5JywgeyBzdGF0aWM6IGZhbHNlIH0pIG92ZXJsYXkhOiBDZGtDb25uZWN0ZWRPdmVybGF5O1xuXG4gIG56VmlzaWJsZUNoYW5nZSA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XG4gIG56VGl0bGU6IE56VFNUeXBlIHwgbnVsbCA9IG51bGw7XG4gIG56Q29udGVudDogTnpUU1R5cGUgfCBudWxsID0gbnVsbDtcbiAgbnpPdmVybGF5Q2xhc3NOYW1lITogc3RyaW5nO1xuICBuek92ZXJsYXlTdHlsZTogTmdTdHlsZUludGVyZmFjZSA9IHt9O1xuICBuek1vdXNlRW50ZXJEZWxheT86IG51bWJlcjtcbiAgbnpNb3VzZUxlYXZlRGVsYXk/OiBudW1iZXI7XG5cbiAgc2V0IG56VmlzaWJsZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIGNvbnN0IHZpc2libGUgPSB0b0Jvb2xlYW4odmFsdWUpO1xuICAgIGlmICh0aGlzLl92aXNpYmxlICE9PSB2aXNpYmxlKSB7XG4gICAgICB0aGlzLl92aXNpYmxlID0gdmlzaWJsZTtcbiAgICAgIHRoaXMubnpWaXNpYmxlQ2hhbmdlLm5leHQodmlzaWJsZSk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IG56VmlzaWJsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fdmlzaWJsZTtcbiAgfVxuXG4gIF92aXNpYmxlID0gZmFsc2U7XG5cbiAgc2V0IG56VHJpZ2dlcih2YWx1ZTogTnpUb29sdGlwVHJpZ2dlcikge1xuICAgIHRoaXMuX3RyaWdnZXIgPSB2YWx1ZTtcbiAgICB0aGlzLl9oYXNCYWNrZHJvcCA9IHRoaXMuX3RyaWdnZXIgPT09ICdjbGljayc7XG4gIH1cblxuICBnZXQgbnpUcmlnZ2VyKCk6IE56VG9vbHRpcFRyaWdnZXIge1xuICAgIHJldHVybiB0aGlzLl90cmlnZ2VyO1xuICB9XG5cbiAgcHJvdGVjdGVkIF90cmlnZ2VyOiBOelRvb2x0aXBUcmlnZ2VyID0gJ2hvdmVyJztcblxuICBzZXQgbnpQbGFjZW1lbnQodmFsdWU6IHN0cmluZykge1xuICAgIGlmICh2YWx1ZSAhPT0gdGhpcy5wcmVmZXJyZWRQbGFjZW1lbnQpIHtcbiAgICAgIHRoaXMucHJlZmVycmVkUGxhY2VtZW50ID0gdmFsdWU7XG4gICAgICB0aGlzLl9wb3NpdGlvbnMgPSBbUE9TSVRJT05fTUFQW3RoaXMubnpQbGFjZW1lbnRdLCAuLi50aGlzLl9wb3NpdGlvbnNdO1xuICAgIH1cbiAgfVxuXG4gIGdldCBuelBsYWNlbWVudCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnByZWZlcnJlZFBsYWNlbWVudDtcbiAgfVxuXG4gIG9yaWdpbj86IENka092ZXJsYXlPcmlnaW47XG4gIHByZWZlcnJlZFBsYWNlbWVudCA9ICd0b3AnO1xuXG4gIF9jbGFzc01hcDogTmdDbGFzc0ludGVyZmFjZSA9IHt9O1xuICBfaGFzQmFja2Ryb3AgPSBmYWxzZTtcbiAgX3ByZWZpeCA9ICdhbnQtdG9vbHRpcC1wbGFjZW1lbnQnO1xuICBfcG9zaXRpb25zOiBDb25uZWN0aW9uUG9zaXRpb25QYWlyW10gPSBbLi4uREVGQVVMVF9UT09MVElQX1BPU0lUSU9OU107XG5cbiAgY29uc3RydWN0b3IocHVibGljIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIHB1YmxpYyBub0FuaW1hdGlvbj86IE56Tm9BbmltYXRpb25EaXJlY3RpdmUpIHt9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5uelZpc2libGVDaGFuZ2UuY29tcGxldGUoKTtcbiAgfVxuXG4gIHNob3coKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubnpWaXNpYmxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmlzRW1wdHkoKSkge1xuICAgICAgdGhpcy5uelZpc2libGUgPSB0cnVlO1xuICAgICAgdGhpcy5uelZpc2libGVDaGFuZ2UubmV4dCh0cnVlKTtcbiAgICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgICB9XG4gIH1cblxuICBoaWRlKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5uelZpc2libGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLm56VmlzaWJsZSA9IGZhbHNlO1xuICAgIHRoaXMubnpWaXNpYmxlQ2hhbmdlLm5leHQoZmFsc2UpO1xuICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgfVxuXG4gIHVwZGF0ZUJ5RGlyZWN0aXZlKCk6IHZvaWQge1xuICAgIHRoaXMuc2V0Q2xhc3NNYXAoKTtcbiAgICB0aGlzLmNkci5kZXRlY3RDaGFuZ2VzKCk7XG5cbiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgIHRoaXMudXBkYXRlUG9zaXRpb24oKTtcbiAgICAgIHRoaXMudXBkYXRlVmlzaWJpbGl0eUJ5VGl0bGUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGb3JjZSB0aGUgY29tcG9uZW50IHRvIHVwZGF0ZSBpdHMgcG9zaXRpb24uXG4gICAqL1xuICB1cGRhdGVQb3NpdGlvbigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5vcmlnaW4gJiYgdGhpcy5vdmVybGF5ICYmIHRoaXMub3ZlcmxheS5vdmVybGF5UmVmKSB7XG4gICAgICB0aGlzLm92ZXJsYXkub3ZlcmxheVJlZi51cGRhdGVQb3NpdGlvbigpO1xuICAgIH1cbiAgfVxuXG4gIG9uUG9zaXRpb25DaGFuZ2UocG9zaXRpb246IENvbm5lY3RlZE92ZXJsYXlQb3NpdGlvbkNoYW5nZSk6IHZvaWQge1xuICAgIHRoaXMucHJlZmVycmVkUGxhY2VtZW50ID0gZ2V0UGxhY2VtZW50TmFtZShwb3NpdGlvbikhO1xuICAgIHRoaXMuc2V0Q2xhc3NNYXAoKTtcbiAgICB0aGlzLmNkci5kZXRlY3RDaGFuZ2VzKCk7XG4gIH1cblxuICBzZXRDbGFzc01hcCgpOiB2b2lkIHtcbiAgICB0aGlzLl9jbGFzc01hcCA9IHtcbiAgICAgIFt0aGlzLm56T3ZlcmxheUNsYXNzTmFtZV06IHRydWUsXG4gICAgICBbYCR7dGhpcy5fcHJlZml4fS0ke3RoaXMucHJlZmVycmVkUGxhY2VtZW50fWBdOiB0cnVlXG4gICAgfTtcbiAgfVxuXG4gIHNldE92ZXJsYXlPcmlnaW4ob3JpZ2luOiBDZGtPdmVybGF5T3JpZ2luKTogdm9pZCB7XG4gICAgdGhpcy5vcmlnaW4gPSBvcmlnaW47XG4gICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gIH1cblxuICAvKipcbiAgICogSGlkZSB0aGUgY29tcG9uZW50IHdoaWxlIHRoZSBjb250ZW50IGlzIGVtcHR5LlxuICAgKi9cbiAgcHJpdmF0ZSB1cGRhdGVWaXNpYmlsaXR5QnlUaXRsZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pc0VtcHR5KCkpIHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFbXB0eSBjb21wb25lbnQgY2Fubm90IGJlIG9wZW5lZC5cbiAgICovXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBpc0VtcHR5KCk6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1Rvb2x0aXBFbXB0eSh2YWx1ZTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD4gfCBudWxsKTogYm9vbGVhbiB7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmID8gZmFsc2UgOiB2YWx1ZSA9PT0gJycgfHwgIWlzTm90TmlsKHZhbHVlKTtcbn1cbiJdfQ==