/**
 * @fileoverview added by tsickle
 * Generated from: lib/abstract-table.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { CandyDate } from 'ng-zorro-antd/core/time';
import { isNonEmptyString, isTemplateRef } from 'ng-zorro-antd/core/util';
/**
 * @abstract
 */
import * as ɵngcc0 from '@angular/core';
var AbstractTable = /** @class */ (function () {
    function AbstractTable() {
        this.isTemplateRef = isTemplateRef;
        this.isNonEmptyString = isNonEmptyString;
        this.headRow = [];
        this.bodyRows = [];
        this.MAX_ROW = 6;
        this.MAX_COL = 7;
        this.prefixCls = 'ant-picker';
        this.activeDate = new CandyDate();
        this.showWeek = false;
        this.valueChange = new EventEmitter();
    }
    /**
     * @protected
     * @return {?}
     */
    AbstractTable.prototype.render = /**
     * @protected
     * @return {?}
     */
    function () {
        if (this.activeDate) {
            this.headRow = this.makeHeadRow();
            this.bodyRows = this.makeBodyRows();
        }
    };
    /**
     * @param {?} _index
     * @param {?} item
     * @return {?}
     */
    AbstractTable.prototype.trackByBodyRow = /**
     * @param {?} _index
     * @param {?} item
     * @return {?}
     */
    function (_index, item) {
        return item;
    };
    // Item usually is an object, so trackby has no use by default.
    // Item usually is an object, so trackby has no use by default.
    /**
     * @param {?} _index
     * @param {?} item
     * @return {?}
     */
    AbstractTable.prototype.trackByBodyColumn = 
    // Item usually is an object, so trackby has no use by default.
    /**
     * @param {?} _index
     * @param {?} item
     * @return {?}
     */
    function (_index, item) {
        return item;
    };
    /**
     * @return {?}
     */
    AbstractTable.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.render();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    AbstractTable.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.activeDate && !changes.activeDate.currentValue) {
            this.activeDate = new CandyDate();
        }
    };
    AbstractTable.propDecorators = {
        prefixCls: [{ type: Input }],
        value: [{ type: Input }],
        activeDate: [{ type: Input }],
        showWeek: [{ type: Input }],
        disabledDate: [{ type: Input }],
        cellRender: [{ type: Input }],
        fullCellRender: [{ type: Input }],
        valueChange: [{ type: Output }]
    };
AbstractTable.ɵfac = function AbstractTable_Factory(t) { return new (t || AbstractTable)(); };
AbstractTable.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AbstractTable, inputs: { prefixCls: "prefixCls", activeDate: "activeDate", showWeek: "showWeek", value: "value", disabledDate: "disabledDate", cellRender: "cellRender", fullCellRender: "fullCellRender" }, outputs: { valueChange: "valueChange" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AbstractTable, [{
        type: Directive
    }], function () { return []; }, { prefixCls: [{
            type: Input
        }], activeDate: [{
            type: Input
        }], showWeek: [{
            type: Input
        }], valueChange: [{
            type: Output
        }], value: [{
            type: Input
        }], disabledDate: [{
            type: Input
        }], cellRender: [{
            type: Input
        }], fullCellRender: [{
            type: Input
        }] }); })();
    return AbstractTable;
}());
export { AbstractTable };
if (false) {
    /** @type {?} */
    AbstractTable.prototype.isTemplateRef;
    /** @type {?} */
    AbstractTable.prototype.isNonEmptyString;
    /** @type {?} */
    AbstractTable.prototype.headRow;
    /** @type {?} */
    AbstractTable.prototype.bodyRows;
    /** @type {?} */
    AbstractTable.prototype.MAX_ROW;
    /** @type {?} */
    AbstractTable.prototype.MAX_COL;
    /** @type {?} */
    AbstractTable.prototype.prefixCls;
    /** @type {?} */
    AbstractTable.prototype.value;
    /** @type {?} */
    AbstractTable.prototype.activeDate;
    /** @type {?} */
    AbstractTable.prototype.showWeek;
    /** @type {?} */
    AbstractTable.prototype.disabledDate;
    /** @type {?} */
    AbstractTable.prototype.cellRender;
    /** @type {?} */
    AbstractTable.prototype.fullCellRender;
    /** @type {?} */
    AbstractTable.prototype.valueChange;
    /**
     * @abstract
     * @return {?}
     */
    AbstractTable.prototype.makeHeadRow = function () { };
    /**
     * @abstract
     * @return {?}
     */
    AbstractTable.prototype.makeBodyRows = function () { };
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtdGFibGUuanMiLCJzb3VyY2VzIjpbIm5nOi9uZy16b3Jyby1hbnRkL2RhdGUtcGlja2VyL2xpYi9hYnN0cmFjdC10YWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFLQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQXFCLE1BQU0sRUFBOEIsTUFBTSxlQUFlLENBQUM7QUFDdEgsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRXBELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxhQUFhLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUMxRTtBQUFJO0FBQWE7O0FBRWpCO0FBQ29DLElBRHBDO0FBQ2MsUUFFWixrQkFBYSxHQUFHLGFBQWEsQ0FBQztBQUNoQyxRQUFFLHFCQUFnQixHQUFHLGdCQUFnQixDQUFDO0FBQ3RDLFFBQUUsWUFBTyxHQUFlLEVBQUUsQ0FBQztBQUMzQixRQUFFLGFBQVEsR0FBa0IsRUFBRSxDQUFDO0FBQy9CLFFBQUUsWUFBTyxHQUFHLENBQUMsQ0FBQztBQUNkLFFBQUUsWUFBTyxHQUFHLENBQUMsQ0FBQztBQUNkLFFBQ1csY0FBUyxHQUFXLFlBQVksQ0FBQztBQUM1QyxRQUNXLGVBQVUsR0FBYyxJQUFJLFNBQVMsRUFBRSxDQUFDO0FBQ25ELFFBQVcsYUFBUSxHQUFZLEtBQUssQ0FBQztBQUNyQyxRQUlxQixnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFhLENBQUM7QUFDakUsSUE2QkEsQ0FBQztBQUNEO0FBQVE7QUFBa0I7QUFBbUI7QUFBUSxJQTdCekMsOEJBQU07QUFBTztBQUNYO0FBQ1I7QUFBUSxJQUZaO0FBQWMsUUFDWixJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7QUFDekIsWUFBTSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUN4QyxZQUFNLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQzFDLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFFSDtBQUFRO0FBQXlCO0FBQXVCO0FBQzlDO0FBQ1QsSUFGQyxzQ0FBYztBQUFPO0FBQXlCO0FBQzFDO0FBR0g7QUFBUSxJQUpULFVBQWUsTUFBYyxFQUFFLElBQWlCO0FBQUksUUFDbEQsT0FBTyxJQUFJLENBQUM7QUFDaEIsSUFBRSxDQUFDO0FBRUgsSUFBRSwrREFBK0Q7QUFDakU7QUFDRztBQUFRO0FBR0c7QUFBdUI7QUFDbkI7QUFBUSxJQUx4Qix5Q0FBaUI7QUFBSTtBQUluQjtBQUFRO0FBQXlCO0FBQ2Y7QUFBbUI7QUFFbkMsSUFQSixVQUFrQixNQUFjLEVBQUUsSUFBYztBQUFJLFFBQ2xELE9BQU8sSUFBSSxDQUFDO0FBQ2hCLElBQUUsQ0FBQztBQUVIO0FBQVE7QUFBbUI7QUFBUSxJQUdqQyxnQ0FBUTtBQUFPO0FBQ0Y7QUFFZixJQUhFO0FBQWMsUUFDWixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDbEIsSUFBRSxDQUFDO0FBRUg7QUFBUTtBQUEwQjtBQUMzQjtBQUFRLElBRGIsbUNBQVc7QUFBTztBQUNwQjtBQUFtQjtBQUFRLElBRHpCLFVBQVksT0FBc0I7QUFBSSxRQUNwQyxJQUFJLE9BQU8sQ0FBQyxVQUFVLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRTtBQUNoRSxZQUFNLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxTQUFTLEVBQUUsQ0FBQztBQUN4QyxTQUFLO0FBQ0wsSUFBRSxDQUFDLENBOUNHO0FBQUM7WUFETixTQUFTLHJCQUNrQyw0QkFTekMsS0FBSztBQUFLLHdCQUNWLEtBQUs7QUFBSyw2QkFDVixLQUFLO0FBQUssMkJBQ1YsS0FBSztBQUFLLCtCQUNWLEtBQUs7QUFBSyw2QkFDVixLQUFLO0FBQUssaUNBQ1YsS0FBSztBQUFLLDhCQUVWLE1BQU07QUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFNO0FBQUMsSUE4QnBCLG9CQUFDO0FBQ0EsQ0FEQSxBQWhERCxJQWdEQztBQUNELFNBL0NzQixhQUFhO0FBQUk7QUFBYTtBQUM5QyxJQUFKLHNDQUE4QjtBQUNoQztBQUFxQixJQUFuQix5Q0FBb0M7QUFDdEM7QUFBcUIsSUFBbkIsZ0NBQXlCO0FBQzNCO0FBQXFCLElBQW5CLGlDQUE2QjtBQUMvQjtBQUNNLElBREosZ0NBQVk7QUFDZDtBQUVLLElBRkgsZ0NBQVk7QUFDZDtBQUNvQixJQUFsQixrQ0FBMEM7QUFDNUM7QUFBcUIsSUFBbkIsOEJBQTJCO0FBQzdCO0FBQXFCLElBQW5CLG1DQUFpRDtBQUNuRDtBQUFxQixJQUFuQixpQ0FBbUM7QUFDckM7QUFBcUIsSUFBbkIscUNBQTZDO0FBQy9DO0FBQXFCLElBQW5CLG1DQUE0RjtBQUM5RjtBQUFxQixJQUFuQix1Q0FBZ0c7QUFDbEc7QUFDb0IsSUFBbEIsb0NBQStEO0FBQ2pFO0FBQ087QUFBaUI7QUFDVjtBQUFRLElBZXBCLHNEQUFtQztBQUNyQztBQUFRO0FBQWlCO0FBRXhCO0FBQVEsSUFGUCx1REFBdUM7QUFDekM7QUFDQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5cbmltcG9ydCB7IERpcmVjdGl2ZSwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkluaXQsIE91dHB1dCwgU2ltcGxlQ2hhbmdlcywgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENhbmR5RGF0ZSB9IGZyb20gJ25nLXpvcnJvLWFudGQvY29yZS90aW1lJztcbmltcG9ydCB7IEZ1bmN0aW9uUHJvcCwgTnpTYWZlQW55IH0gZnJvbSAnbmctem9ycm8tYW50ZC9jb3JlL3R5cGVzJztcbmltcG9ydCB7IGlzTm9uRW1wdHlTdHJpbmcsIGlzVGVtcGxhdGVSZWYgfSBmcm9tICduZy16b3Jyby1hbnRkL2NvcmUvdXRpbCc7XG5pbXBvcnQgeyBEYXRlQm9keVJvdywgRGF0ZUNlbGwgfSBmcm9tICcuL2ludGVyZmFjZSc7XG5cbkBEaXJlY3RpdmUoKVxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1jbGFzcy1zdWZmaXhcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdFRhYmxlIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuICBpc1RlbXBsYXRlUmVmID0gaXNUZW1wbGF0ZVJlZjtcbiAgaXNOb25FbXB0eVN0cmluZyA9IGlzTm9uRW1wdHlTdHJpbmc7XG4gIGhlYWRSb3c6IERhdGVDZWxsW10gPSBbXTtcbiAgYm9keVJvd3M6IERhdGVCb2R5Um93W10gPSBbXTtcbiAgTUFYX1JPVyA9IDY7XG4gIE1BWF9DT0wgPSA3O1xuXG4gIEBJbnB1dCgpIHByZWZpeENsczogc3RyaW5nID0gJ2FudC1waWNrZXInO1xuICBASW5wdXQoKSB2YWx1ZSE6IENhbmR5RGF0ZTtcbiAgQElucHV0KCkgYWN0aXZlRGF0ZTogQ2FuZHlEYXRlID0gbmV3IENhbmR5RGF0ZSgpO1xuICBASW5wdXQoKSBzaG93V2VlazogYm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoKSBkaXNhYmxlZERhdGU/OiAoZDogRGF0ZSkgPT4gYm9vbGVhbjtcbiAgQElucHV0KCkgY2VsbFJlbmRlcj86IHN0cmluZyB8IFRlbXBsYXRlUmVmPERhdGU+IHwgRnVuY3Rpb25Qcm9wPFRlbXBsYXRlUmVmPERhdGU+IHwgc3RyaW5nPjtcbiAgQElucHV0KCkgZnVsbENlbGxSZW5kZXI/OiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxEYXRlPiB8IEZ1bmN0aW9uUHJvcDxUZW1wbGF0ZVJlZjxEYXRlPiB8IHN0cmluZz47XG5cbiAgQE91dHB1dCgpIHJlYWRvbmx5IHZhbHVlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxDYW5keURhdGU+KCk7XG5cbiAgcHJvdGVjdGVkIHJlbmRlcigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5hY3RpdmVEYXRlKSB7XG4gICAgICB0aGlzLmhlYWRSb3cgPSB0aGlzLm1ha2VIZWFkUm93KCk7XG4gICAgICB0aGlzLmJvZHlSb3dzID0gdGhpcy5tYWtlQm9keVJvd3MoKTtcbiAgICB9XG4gIH1cblxuICB0cmFja0J5Qm9keVJvdyhfaW5kZXg6IG51bWJlciwgaXRlbTogRGF0ZUJvZHlSb3cpOiBOelNhZmVBbnkge1xuICAgIHJldHVybiBpdGVtO1xuICB9XG5cbiAgLy8gSXRlbSB1c3VhbGx5IGlzIGFuIG9iamVjdCwgc28gdHJhY2tieSBoYXMgbm8gdXNlIGJ5IGRlZmF1bHQuXG4gIHRyYWNrQnlCb2R5Q29sdW1uKF9pbmRleDogbnVtYmVyLCBpdGVtOiBEYXRlQ2VsbCk6IE56U2FmZUFueSB7XG4gICAgcmV0dXJuIGl0ZW07XG4gIH1cblxuICBhYnN0cmFjdCBtYWtlSGVhZFJvdygpOiBEYXRlQ2VsbFtdO1xuICBhYnN0cmFjdCBtYWtlQm9keVJvd3MoKTogRGF0ZUJvZHlSb3dbXTtcblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmIChjaGFuZ2VzLmFjdGl2ZURhdGUgJiYgIWNoYW5nZXMuYWN0aXZlRGF0ZS5jdXJyZW50VmFsdWUpIHtcbiAgICAgIHRoaXMuYWN0aXZlRGF0ZSA9IG5ldyBDYW5keURhdGUoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==