/**
 * @fileoverview added by tsickle
 * Generated from: lib/abstract-panel-header.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { CandyDate } from 'ng-zorro-antd/core/time';
/**
 * @abstract
 */
import * as ɵngcc0 from '@angular/core';
var AbstractPanelHeader = /** @class */ (function () {
    function AbstractPanelHeader() {
        this.prefixCls = "ant-picker-header";
        this.selectors = [];
        this.showSuperPreBtn = true;
        this.showSuperNextBtn = true;
        this.showPreBtn = true;
        this.showNextBtn = true;
        this.panelModeChange = new EventEmitter();
        this.valueChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    AbstractPanelHeader.prototype.superPreviousTitle = /**
     * @return {?}
     */
    function () {
        return this.locale.previousYear;
    };
    /**
     * @return {?}
     */
    AbstractPanelHeader.prototype.previousTitle = /**
     * @return {?}
     */
    function () {
        return this.locale.previousMonth;
    };
    /**
     * @return {?}
     */
    AbstractPanelHeader.prototype.superNextTitle = /**
     * @return {?}
     */
    function () {
        return this.locale.nextYear;
    };
    /**
     * @return {?}
     */
    AbstractPanelHeader.prototype.nextTitle = /**
     * @return {?}
     */
    function () {
        return this.locale.nextMonth;
    };
    /**
     * @return {?}
     */
    AbstractPanelHeader.prototype.superPrevious = /**
     * @return {?}
     */
    function () {
        this.changeValue(this.value.addYears(-1));
    };
    /**
     * @return {?}
     */
    AbstractPanelHeader.prototype.superNext = /**
     * @return {?}
     */
    function () {
        this.changeValue(this.value.addYears(1));
    };
    /**
     * @return {?}
     */
    AbstractPanelHeader.prototype.previous = /**
     * @return {?}
     */
    function () {
        this.changeValue(this.value.addMonths(-1));
    };
    /**
     * @return {?}
     */
    AbstractPanelHeader.prototype.next = /**
     * @return {?}
     */
    function () {
        this.changeValue(this.value.addMonths(1));
    };
    /**
     * @param {?} value
     * @return {?}
     */
    AbstractPanelHeader.prototype.changeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.value !== value) {
            this.value = value;
            this.valueChange.emit(this.value);
            this.render();
        }
    };
    /**
     * @param {?} mode
     * @return {?}
     */
    AbstractPanelHeader.prototype.changeMode = /**
     * @param {?} mode
     * @return {?}
     */
    function (mode) {
        this.panelModeChange.emit(mode);
    };
    /**
     * @private
     * @return {?}
     */
    AbstractPanelHeader.prototype.render = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.value) {
            this.selectors = this.getSelectors();
        }
    };
    /**
     * @return {?}
     */
    AbstractPanelHeader.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.value) {
            this.value = new CandyDate(); // Show today by default
        }
        this.selectors = this.getSelectors();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    AbstractPanelHeader.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.value || changes.locale) {
            this.render();
        }
    };
    AbstractPanelHeader.propDecorators = {
        value: [{ type: Input }],
        locale: [{ type: Input }],
        showSuperPreBtn: [{ type: Input }],
        showSuperNextBtn: [{ type: Input }],
        showPreBtn: [{ type: Input }],
        showNextBtn: [{ type: Input }],
        panelModeChange: [{ type: Output }],
        valueChange: [{ type: Output }]
    };
AbstractPanelHeader.ɵfac = function AbstractPanelHeader_Factory(t) { return new (t || AbstractPanelHeader)(); };
AbstractPanelHeader.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AbstractPanelHeader, inputs: { showSuperPreBtn: "showSuperPreBtn", showSuperNextBtn: "showSuperNextBtn", showPreBtn: "showPreBtn", showNextBtn: "showNextBtn", value: "value", locale: "locale" }, outputs: { panelModeChange: "panelModeChange", valueChange: "valueChange" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AbstractPanelHeader, [{
        type: Directive
    }], function () { return []; }, { showSuperPreBtn: [{
            type: Input
        }], showSuperNextBtn: [{
            type: Input
        }], showPreBtn: [{
            type: Input
        }], showNextBtn: [{
            type: Input
        }], panelModeChange: [{
            type: Output
        }], valueChange: [{
            type: Output
        }], value: [{
            type: Input
        }], locale: [{
            type: Input
        }] }); })();
    return AbstractPanelHeader;
}());
export { AbstractPanelHeader };
if (false) {
    /** @type {?} */
    AbstractPanelHeader.prototype.prefixCls;
    /** @type {?} */
    AbstractPanelHeader.prototype.selectors;
    /** @type {?} */
    AbstractPanelHeader.prototype.value;
    /** @type {?} */
    AbstractPanelHeader.prototype.locale;
    /** @type {?} */
    AbstractPanelHeader.prototype.showSuperPreBtn;
    /** @type {?} */
    AbstractPanelHeader.prototype.showSuperNextBtn;
    /** @type {?} */
    AbstractPanelHeader.prototype.showPreBtn;
    /** @type {?} */
    AbstractPanelHeader.prototype.showNextBtn;
    /** @type {?} */
    AbstractPanelHeader.prototype.panelModeChange;
    /** @type {?} */
    AbstractPanelHeader.prototype.valueChange;
    /**
     * @abstract
     * @return {?}
     */
    AbstractPanelHeader.prototype.getSelectors = function () { };
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtcGFuZWwtaGVhZGVyLmpzIiwic291cmNlcyI6WyJuZzovbmctem9ycm8tYW50ZC9kYXRlLXBpY2tlci9saWIvYWJzdHJhY3QtcGFuZWwtaGVhZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUtBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBcUIsTUFBTSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUN6RyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDcEQ7QUFBSTtBQUFhOztBQUlqQjtBQUMwQyxJQUQxQztBQUNvQixRQUVsQixjQUFTLEdBQVcsbUJBQW1CLENBQUM7QUFDMUMsUUFBRSxjQUFTLEdBQW9CLEVBQUUsQ0FBQztBQUNsQyxRQUdXLG9CQUFlLEdBQVksSUFBSSxDQUFDO0FBQzNDLFFBQVcscUJBQWdCLEdBQVksSUFBSSxDQUFDO0FBQzVDLFFBQVcsZUFBVSxHQUFZLElBQUksQ0FBQztBQUN0QyxRQUFXLGdCQUFXLEdBQVksSUFBSSxDQUFDO0FBQ3ZDLFFBQ3FCLG9CQUFlLEdBQUcsSUFBSSxZQUFZLEVBQWMsQ0FBQztBQUN0RSxRQUFxQixnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFhLENBQUM7QUFDakUsSUFpRUEsQ0FBQztBQUNEO0FBQVE7QUFBbUI7QUFBUSxJQS9EakMsZ0RBQWtCO0FBQU87QUFDZDtBQUFRLElBRG5CO0FBQWMsUUFDWixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDO0FBQ3BDLElBQUUsQ0FBQztBQUVIO0FBQVE7QUFBbUI7QUFDcEIsSUFETCwyQ0FBYTtBQUFPO0FBQ1Q7QUFBUSxJQURuQjtBQUFjLFFBQ1osT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztBQUNyQyxJQUFFLENBQUM7QUFFSDtBQUFRO0FBQW1CO0FBQ3JCLElBREosNENBQWM7QUFBTztBQUNWO0FBQVEsSUFEbkI7QUFBYyxRQUNaLE9BQU8s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QUFDTCxJQUFFLENBQUMsQ0E5RUc7QUFBQztZQUROLFNBQVMsckJBQ3dDLHdCQUsvQyxLQUFLO0FBQUsseUJBQ1YsS0FBSztBQUFLLGtDQUNWLEtBQUs7QUFBSyxtQ0FDVixLQUFLO0FBQUssNkJBQ1YsS0FBSztBQUFLLDhCQUNWLEtBQUs7QUFBSyxrQ0FFVixNQUFNO0FBQUssOEJBQ1gsTUFBTTtBQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQU07QUFBQyxJQWtFcEIsMEJBQUM7QUFDQSxDQURBLEFBaEZELElBZ0ZDO0FBQ0QsU0EvRXNCLG1CQUFtQjtBQUFJO0FBQWE7QUFDcEQsSUFBSix3Q0FBd0M7QUFDMUM7QUFBcUIsSUFBbkIsd0NBQWdDO0FBQ2xDO0FBQ29CLElBQWxCLG9DQUEyQjtBQUM3QjtBQUFxQixJQUFuQixxQ0FBMEM7QUFDNUM7QUFBcUIsSUFBbkIsOENBQXlDO0FBQzNDO0FBQXFCLElBQW5CLCtDQUEwQztBQUM1QztBQUFxQixJQUFuQix5Q0FBb0M7QUFDdEM7QUFBcUIsSUFBbkIsMENBQXFDO0FBQ3ZDO0FBQ29CLElBQWxCLDhDQUFvRTtBQUN0RTtBQUFxQixJQUFuQiwwQ0FBK0Q7QUFDakU7QUFDTztBQUFpQjtBQUFtQjtBQUVyQyxJQUZKLDZEQUF5QztBQUMzQztBQUNDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2dpdGh1Yi5jb20vTkctWk9SUk8vbmctem9ycm8tYW50ZC9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cblxuaW1wb3J0IHsgRGlyZWN0aXZlLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkNoYW5nZXMsIE9uSW5pdCwgT3V0cHV0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDYW5keURhdGUgfSBmcm9tICduZy16b3Jyby1hbnRkL2NvcmUvdGltZSc7XG5pbXBvcnQgeyBOekNhbGVuZGFySTE4bkludGVyZmFjZSB9IGZyb20gJ25nLXpvcnJvLWFudGQvaTE4bic7XG5pbXBvcnQgeyBOekRhdGVNb2RlIH0gZnJvbSAnLi4vc3RhbmRhcmQtdHlwZXMnO1xuaW1wb3J0IHsgUGFuZWxTZWxlY3RvciB9IGZyb20gJy4vaW50ZXJmYWNlJztcblxuQERpcmVjdGl2ZSgpXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLWNsYXNzLXN1ZmZpeFxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0UGFuZWxIZWFkZXIgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gIHByZWZpeENsczogc3RyaW5nID0gYGFudC1waWNrZXItaGVhZGVyYDtcbiAgc2VsZWN0b3JzOiBQYW5lbFNlbGVjdG9yW10gPSBbXTtcblxuICBASW5wdXQoKSB2YWx1ZSE6IENhbmR5RGF0ZTtcbiAgQElucHV0KCkgbG9jYWxlITogTnpDYWxlbmRhckkxOG5JbnRlcmZhY2U7XG4gIEBJbnB1dCgpIHNob3dTdXBlclByZUJ0bjogYm9vbGVhbiA9IHRydWU7XG4gIEBJbnB1dCgpIHNob3dTdXBlck5leHRCdG46IGJvb2xlYW4gPSB0cnVlO1xuICBASW5wdXQoKSBzaG93UHJlQnRuOiBib29sZWFuID0gdHJ1ZTtcbiAgQElucHV0KCkgc2hvd05leHRCdG46IGJvb2xlYW4gPSB0cnVlO1xuXG4gIEBPdXRwdXQoKSByZWFkb25seSBwYW5lbE1vZGVDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPE56RGF0ZU1vZGU+KCk7XG4gIEBPdXRwdXQoKSByZWFkb25seSB2YWx1ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Q2FuZHlEYXRlPigpO1xuXG4gIGFic3RyYWN0IGdldFNlbGVjdG9ycygpOiBQYW5lbFNlbGVjdG9yW107XG5cbiAgc3VwZXJQcmV2aW91c1RpdGxlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMubG9jYWxlLnByZXZpb3VzWWVhcjtcbiAgfVxuXG4gIHByZXZpb3VzVGl0bGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5sb2NhbGUucHJldmlvdXNNb250aDtcbiAgfVxuXG4gIHN1cGVyTmV4dFRpdGxlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMubG9jYWxlLm5leHRZZWFyO1xuICB9XG5cbiAgbmV4dFRpdGxlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMubG9jYWxlLm5leHRNb250aDtcbiAgfVxuXG4gIHN1cGVyUHJldmlvdXMoKTogdm9pZCB7XG4gICAgdGhpcy5jaGFuZ2VWYWx1ZSh0aGlzLnZhbHVlLmFkZFllYXJzKC0xKSk7XG4gIH1cblxuICBzdXBlck5leHQoKTogdm9pZCB7XG4gICAgdGhpcy5jaGFuZ2VWYWx1ZSh0aGlzLnZhbHVlLmFkZFllYXJzKDEpKTtcbiAgfVxuXG4gIHByZXZpb3VzKCk6IHZvaWQge1xuICAgIHRoaXMuY2hhbmdlVmFsdWUodGhpcy52YWx1ZS5hZGRNb250aHMoLTEpKTtcbiAgfVxuXG4gIG5leHQoKTogdm9pZCB7XG4gICAgdGhpcy5jaGFuZ2VWYWx1ZSh0aGlzLnZhbHVlLmFkZE1vbnRocygxKSk7XG4gIH1cblxuICBjaGFuZ2VWYWx1ZSh2YWx1ZTogQ2FuZHlEYXRlKTogdm9pZCB7XG4gICAgaWYgKHRoaXMudmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICB0aGlzLnZhbHVlQ2hhbmdlLmVtaXQodGhpcy52YWx1ZSk7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH1cbiAgfVxuXG4gIGNoYW5nZU1vZGUobW9kZTogTnpEYXRlTW9kZSk6IHZvaWQge1xuICAgIHRoaXMucGFuZWxNb2RlQ2hhbmdlLmVtaXQobW9kZSk7XG4gIH1cblxuICBwcml2YXRlIHJlbmRlcigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy52YWx1ZSkge1xuICAgICAgdGhpcy5zZWxlY3RvcnMgPSB0aGlzLmdldFNlbGVjdG9ycygpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIGlmICghdGhpcy52YWx1ZSkge1xuICAgICAgdGhpcy52YWx1ZSA9IG5ldyBDYW5keURhdGUoKTsgLy8gU2hvdyB0b2RheSBieSBkZWZhdWx0XG4gICAgfVxuICAgIHRoaXMuc2VsZWN0b3JzID0gdGhpcy5nZXRTZWxlY3RvcnMoKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBpZiAoY2hhbmdlcy52YWx1ZSB8fCBjaGFuZ2VzLmxvY2FsZSkge1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==