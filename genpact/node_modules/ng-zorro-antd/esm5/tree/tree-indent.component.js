/**
 * @fileoverview added by tsickle
 * Generated from: tree-indent.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __read, __spread } from "tslib";
/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function NzTreeIndentComponent_span_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 1);
} if (rf & 2) {
    var index_r2 = ctx.index;
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ctx_r0.unitMapOfClass(index_r2));
} }
var NzTreeIndentComponent = /** @class */ (function () {
    function NzTreeIndentComponent() {
        this.nzSelectMode = false;
        this.listOfUnit = [];
    }
    /**
     * @param {?} index
     * @return {?}
     */
    NzTreeIndentComponent.prototype.unitMapOfClass = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        var _a;
        return _a = {},
            _a["ant-tree-indent-unit"] = !this.nzSelectMode,
            _a["ant-tree-indent-unit-start"] = !this.nzSelectMode && (/** @type {?} */ (this.nzIsStart))[index + 1],
            _a["ant-tree-indent-unit-end"] = !this.nzSelectMode && (/** @type {?} */ (this.nzIsEnd))[index + 1],
            _a["ant-select-tree-indent-unit"] = this.nzSelectMode,
            _a["ant-select-tree-indent-unit-start"] = this.nzSelectMode && (/** @type {?} */ (this.nzIsStart))[index + 1],
            _a["ant-select-tree-indent-unit-end"] = this.nzSelectMode && (/** @type {?} */ (this.nzIsEnd))[index + 1],
            _a;
    };
    /**
     * @return {?}
     */
    NzTreeIndentComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} changes
     * @return {?}
     */
    NzTreeIndentComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var nzTreeLevel = changes.nzTreeLevel;
        if (nzTreeLevel) {
            this.listOfUnit = __spread(new Array(nzTreeLevel.currentValue || 0));
        }
    };
    NzTreeIndentComponent.propDecorators = {
        nzTreeLevel: [{ type: Input }],
        nzIsStart: [{ type: Input }],
        nzIsEnd: [{ type: Input }],
        nzSelectMode: [{ type: Input }]
    };
NzTreeIndentComponent.ɵfac = function NzTreeIndentComponent_Factory(t) { return new (t || NzTreeIndentComponent)(); };
NzTreeIndentComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NzTreeIndentComponent, selectors: [["nz-tree-indent"]], hostVars: 5, hostBindings: function NzTreeIndentComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-hidden", true);
        ɵngcc0.ɵɵclassProp("ant-tree-indent", !ctx.nzSelectMode)("ant-select-tree-indent", ctx.nzSelectMode);
    } }, inputs: { nzSelectMode: "nzSelectMode", nzTreeLevel: "nzTreeLevel", nzIsStart: "nzIsStart", nzIsEnd: "nzIsEnd" }, exportAs: ["nzTreeIndent"], features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [[3, "ngClass", 4, "ngFor", "ngForOf"], [3, "ngClass"]], template: function NzTreeIndentComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, NzTreeIndentComponent_span_0_Template, 1, 1, "span", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ctx.listOfUnit);
    } }, directives: [ɵngcc1.NgForOf, ɵngcc1.NgClass], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzTreeIndentComponent, [{
        type: Component,
        args: [{
                selector: 'nz-tree-indent',
                exportAs: 'nzTreeIndent',
                template: " <span *ngFor=\"let i of listOfUnit; let index = index\" [ngClass]=\"unitMapOfClass(index)\"></span> ",
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                host: {
                    '[attr.aria-hidden]': 'true',
                    '[class.ant-tree-indent]': '!nzSelectMode',
                    '[class.ant-select-tree-indent]': 'nzSelectMode'
                }
            }]
    }], function () { return []; }, { nzSelectMode: [{
            type: Input
        }], nzTreeLevel: [{
            type: Input
        }], nzIsStart: [{
            type: Input
        }], nzIsEnd: [{
            type: Input
        }] }); })();
    return NzTreeIndentComponent;
}());
export { NzTreeIndentComponent };
if (false) {
    /** @type {?} */
    NzTreeIndentComponent.prototype.nzTreeLevel;
    /** @type {?} */
    NzTreeIndentComponent.prototype.nzIsStart;
    /** @type {?} */
    NzTreeIndentComponent.prototype.nzIsEnd;
    /** @type {?} */
    NzTreeIndentComponent.prototype.nzSelectMode;
    /** @type {?} */
    NzTreeIndentComponent.prototype.listOfUnit;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1pbmRlbnQuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyJuZzovbmctem9ycm8tYW50ZC90cmVlL3RyZWUtaW5kZW50LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBS0EsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQW9DLE1BQU0sZUFBZSxDQUFDOzs7Ozs7Ozs7OztBQUU1RztBQUVjLElBRmQ7QUFDc0IsUUFlWCxpQkFBWSxHQUFHLEtBQUssQ0FBQztBQUNoQyxRQUNFLGVBQVUsR0FBYSxFQUFFLENBQUM7QUFDNUIsSUFvQkEsQ0FBQztBQUNEO0FBQVE7QUFBd0I7QUFBbUI7QUFBUSxJQXBCekQsOENBQWM7QUFBTztBQUF3QjtBQUMzQztBQUFRLElBRFYsVUFBZSxLQUFhO0FBQUk7QUFBZ0IsUUFDOUM7QUFDRyxZQUFELEdBQUMsc0JBQXNCLElBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWTtBQUNsRCxZQUFNLEdBQUMsNEJBQTRCLElBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxJQUFJLG1CQUFBLElBQUksQ0FBQyxTQUFTLEVBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQ3RGLFlBQU0sR0FBQywwQkFBMEIsSUFBRyxDQUFDLElBQUksQ0FBQyxZQUFZLElBQUksbUJBQUEsSUFBSSxDQUFDLE9BQU8sRUFBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDbEYsWUFBTSxHQUFDLDZCQUE2QixJQUFHLElBQUksQ0FBQyxZQUFZO0FBQ3hELFlBQU0sR0FBQyxtQ0FBbUMsSUFBRyxJQUFJLENBQUMsWUFBWSxJQUFJLG1CQUFBLElBQUksQ0FBQyxTQUFTLEVBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQzVGLFlBQU0sR0FBQyxpQ0FBaUMsSUFBRyxJQUFJLENBQUMsWUFBWSxJQUFJLG1CQUFBLElBQUksQ0FBQyxPQUFPLEVBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZGLGVBQUs7QUFDTixJQUFFLENBQUM7QUFFSDtBQUFRO0FBRUo7QUFBUSxJQUZWLHdDQUFRO0FBQU87QUFFSjtBQUFRLElBRm5CLGNBQWtCLENBQUM7QUFFckI7QUFBUTtBQUEwQjtBQUMzQjtBQUFRLElBRGIsMkNBQVc7QUFBTztBQUNwQjtBQUFtQjtBQUFRLElBRHpCLFVBQVksT0FBc0I7QUFBSSxRQUM1QixJQUFBLGlDQUFXO0FBQUUsUUFDckIsSUFBSSxXQUFXLEVBQUU7QUFDckIsWUFBTSxJQUFJLENBQUMsVUFBVSxZQUFPLElBQUksS0FBSyxDQUFDLFdBQVcsQ0FBQyxZQUFZLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0RSxTQUFLO0FBQ0wsSUFBRSxDQUFDLENBMUJLO0FBQUM7WUFaUixTQUFTLFNBQUMsOUJBWTJDLDhCQUNuRCxLQUFLO1lBWk4sUUFBUSxFQUFFLHRCQVlDLDRCQUNWLEtBQUs7QUFib0Isc0JBQzFCLFFBQVEsRUFBRSxoQ0FZQywwQkFDVixLQUFLO1VBYmtCLHNCQUN4QixoQ0FZVywrQkFDVixLQUFLO0FBYkUsRUFBRSxGQWFBO2tHQWJtRztDQUM3RyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTSxzQkFDL0MsbUJBQW1CLEVBQUUsS0FBSyxzQkFDMUIsSUFBSSxFQUFFLDBCQUNKLG9CQUFvQixFQUFFLE1BQU0sMEJBQzVCO2VBQXlCLEVBQUUsZUFBZTtTQUMxQyxnQ0FBZ0MsRUFBRSxjQUFjLHNCQUNqRCxrQkFDRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFLaUI7QUFBQyxJQXVCbkIsNEJBQUM7QUFDQSxDQURBLEFBdkNELElBdUNDO0FBQ0QsU0E1QmEscUJBQXFCO0FBQUk7QUFBYTtBQUM3QyxJQUFKLDRDQUE4QjtBQUNoQztBQUFxQixJQUFuQiwwQ0FBK0I7QUFDakM7QUFBcUIsSUFBbkIsd0NBQTZCO0FBQy9CO0FBQXFCLElBQW5CLDZDQUE4QjtBQUNoQztBQUNvQixJQUFsQiwyQ0FBMEI7QUFDNUI7QUFDQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5cbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIElucHV0LCBPbkNoYW5nZXMsIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduei10cmVlLWluZGVudCcsXG4gIGV4cG9ydEFzOiAnbnpUcmVlSW5kZW50JyxcbiAgdGVtcGxhdGU6IGAgPHNwYW4gKm5nRm9yPVwibGV0IGkgb2YgbGlzdE9mVW5pdDsgbGV0IGluZGV4ID0gaW5kZXhcIiBbbmdDbGFzc109XCJ1bml0TWFwT2ZDbGFzcyhpbmRleClcIj48L3NwYW4+IGAsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgaG9zdDoge1xuICAgICdbYXR0ci5hcmlhLWhpZGRlbl0nOiAndHJ1ZScsXG4gICAgJ1tjbGFzcy5hbnQtdHJlZS1pbmRlbnRdJzogJyFuelNlbGVjdE1vZGUnLFxuICAgICdbY2xhc3MuYW50LXNlbGVjdC10cmVlLWluZGVudF0nOiAnbnpTZWxlY3RNb2RlJ1xuICB9XG59KVxuZXhwb3J0IGNsYXNzIE56VHJlZUluZGVudENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgbnpUcmVlTGV2ZWw/OiBudW1iZXI7XG4gIEBJbnB1dCgpIG56SXNTdGFydD86IGJvb2xlYW5bXTtcbiAgQElucHV0KCkgbnpJc0VuZD86IGJvb2xlYW5bXTtcbiAgQElucHV0KCkgbnpTZWxlY3RNb2RlID0gZmFsc2U7XG5cbiAgbGlzdE9mVW5pdDogbnVtYmVyW10gPSBbXTtcblxuICB1bml0TWFwT2ZDbGFzcyhpbmRleDogbnVtYmVyKTogeyBba2V5OiBzdHJpbmddOiBib29sZWFuIH0ge1xuICAgIHJldHVybiB7XG4gICAgICBbYGFudC10cmVlLWluZGVudC11bml0YF06ICF0aGlzLm56U2VsZWN0TW9kZSxcbiAgICAgIFtgYW50LXRyZWUtaW5kZW50LXVuaXQtc3RhcnRgXTogIXRoaXMubnpTZWxlY3RNb2RlICYmIHRoaXMubnpJc1N0YXJ0IVtpbmRleCArIDFdLFxuICAgICAgW2BhbnQtdHJlZS1pbmRlbnQtdW5pdC1lbmRgXTogIXRoaXMubnpTZWxlY3RNb2RlICYmIHRoaXMubnpJc0VuZCFbaW5kZXggKyAxXSxcbiAgICAgIFtgYW50LXNlbGVjdC10cmVlLWluZGVudC11bml0YF06IHRoaXMubnpTZWxlY3RNb2RlLFxuICAgICAgW2BhbnQtc2VsZWN0LXRyZWUtaW5kZW50LXVuaXQtc3RhcnRgXTogdGhpcy5uelNlbGVjdE1vZGUgJiYgdGhpcy5ueklzU3RhcnQhW2luZGV4ICsgMV0sXG4gICAgICBbYGFudC1zZWxlY3QtdHJlZS1pbmRlbnQtdW5pdC1lbmRgXTogdGhpcy5uelNlbGVjdE1vZGUgJiYgdGhpcy5ueklzRW5kIVtpbmRleCArIDFdXG4gICAgfTtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge31cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgY29uc3QgeyBuelRyZWVMZXZlbCB9ID0gY2hhbmdlcztcbiAgICBpZiAobnpUcmVlTGV2ZWwpIHtcbiAgICAgIHRoaXMubGlzdE9mVW5pdCA9IFsuLi5uZXcgQXJyYXkobnpUcmVlTGV2ZWwuY3VycmVudFZhbHVlIHx8IDApXTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==