/**
 * @fileoverview added by tsickle
 * Generated from: submenu-inline-child.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ChangeDetectionStrategy, Component, ElementRef, Input, Renderer2, ViewEncapsulation } from '@angular/core';
import { collapseMotion } from 'ng-zorro-antd/core/animation';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

var _c0 = ["nz-submenu-inline-child", ""];
function NzSubmenuInlineChildComponent_ng_template_0_Template(rf, ctx) { }
var NzSubmenuInlineChildComponent = /** @class */ (function () {
    function NzSubmenuInlineChildComponent(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.templateOutlet = null;
        this.menuClass = '';
        this.mode = 'vertical';
        this.nzOpen = false;
        this.listOfCacheClassName = [];
        this.expandState = 'collapsed';
    }
    /**
     * @return {?}
     */
    NzSubmenuInlineChildComponent.prototype.calcMotionState = /**
     * @return {?}
     */
    function () {
        if (this.nzOpen) {
            this.expandState = 'expanded';
        }
        else {
            this.expandState = 'collapsed';
        }
    };
    /**
     * @return {?}
     */
    NzSubmenuInlineChildComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.calcMotionState();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NzSubmenuInlineChildComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        var mode = changes.mode, nzOpen = changes.nzOpen, menuClass = changes.menuClass;
        if (mode || nzOpen) {
            this.calcMotionState();
        }
        if (menuClass) {
            if (this.listOfCacheClassName.length) {
                this.listOfCacheClassName
                    .filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return !!item; }))
                    .forEach((/**
                 * @param {?} className
                 * @return {?}
                 */
                function (className) {
                    _this.renderer.removeClass(_this.elementRef.nativeElement, className);
                }));
            }
            if (this.menuClass) {
                this.listOfCacheClassName = this.menuClass.split(' ');
                this.listOfCacheClassName
                    .filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return !!item; }))
                    .forEach((/**
                 * @param {?} className
                 * @return {?}
                 */
                function (className) {
                    _this.renderer.addClass(_this.elementRef.nativeElement, className);
                }));
            }
        }
    };
    /** @nocollapse */
    NzSubmenuInlineChildComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    NzSubmenuInlineChildComponent.propDecorators = {
        templateOutlet: [{ type: Input }],
        menuClass: [{ type: Input }],
        mode: [{ type: Input }],
        nzOpen: [{ type: Input }]
    };
NzSubmenuInlineChildComponent.ɵfac = function NzSubmenuInlineChildComponent_Factory(t) { return new (t || NzSubmenuInlineChildComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
NzSubmenuInlineChildComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NzSubmenuInlineChildComponent, selectors: [["", "nz-submenu-inline-child", ""]], hostVars: 7, hostBindings: function NzSubmenuInlineChildComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵsyntheticHostProperty("@collapseMotion", ctx.expandState);
        ɵngcc0.ɵɵclassProp("ant-menu", true)("ant-menu-inline", true)("ant-menu-sub", true);
    } }, inputs: { templateOutlet: "templateOutlet", menuClass: "menuClass", mode: "mode", nzOpen: "nzOpen" }, exportAs: ["nzSubmenuInlineChild"], features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c0, decls: 1, vars: 1, consts: [[3, "ngTemplateOutlet"]], template: function NzSubmenuInlineChildComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, NzSubmenuInlineChildComponent_ng_template_0_Template, 0, 0, "ng-template", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.templateOutlet);
    } }, directives: [ɵngcc1.NgTemplateOutlet], encapsulation: 2, data: { animation: [collapseMotion] }, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NzSubmenuInlineChildComponent, [{
        type: Component,
        args: [{
                selector: '[nz-submenu-inline-child]',
                animations: [collapseMotion],
                exportAs: 'nzSubmenuInlineChild',
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: " <ng-template [ngTemplateOutlet]=\"templateOutlet\"></ng-template> ",
                host: {
                    '[class.ant-menu]': 'true',
                    '[class.ant-menu-inline]': 'true',
                    '[class.ant-menu-sub]': 'true',
                    '[@collapseMotion]': 'expandState'
                }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { templateOutlet: [{
            type: Input
        }], menuClass: [{
            type: Input
        }], mode: [{
            type: Input
        }], nzOpen: [{
            type: Input
        }] }); })();
    return NzSubmenuInlineChildComponent;
}());
export { NzSubmenuInlineChildComponent };
if (false) {
    /** @type {?} */
    NzSubmenuInlineChildComponent.prototype.templateOutlet;
    /** @type {?} */
    NzSubmenuInlineChildComponent.prototype.menuClass;
    /** @type {?} */
    NzSubmenuInlineChildComponent.prototype.mode;
    /** @type {?} */
    NzSubmenuInlineChildComponent.prototype.nzOpen;
    /** @type {?} */
    NzSubmenuInlineChildComponent.prototype.listOfCacheClassName;
    /** @type {?} */
    NzSubmenuInlineChildComponent.prototype.expandState;
    /**
     * @type {?}
     * @private
     */
    NzSubmenuInlineChildComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    NzSubmenuInlineChildComponent.prototype.renderer;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VibWVudS1pbmxpbmUtY2hpbGQuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyJuZzovbmctem9ycm8tYW50ZC9tZW51L3N1Ym1lbnUtaW5saW5lLWNoaWxkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFLQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsS0FBSyxFQUdMLFNBQVMsRUFHVCxpQkFBaUIsRUFDbEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDhCQUE4QixDQUFDOzs7Ozs7QUFJOUQ7QUFFVyxJQTBCVCx1Q0FBb0IsVUFBc0IsRUFBVSxRQUFtQjtBQUFJLFFBQXZELGVBQVUsR0FBVixVQUFVLENBQVk7QUFBQyxRQUFTLGFBQVEsR0FBUixRQUFRLENBQVc7QUFBQyxRQWIvRCxtQkFBYyxHQUFrQyxJQUFJLENBQUM7QUFDaEUsUUFBVyxjQUFTLEdBQVcsRUFBRSxDQUFDO0FBQ2xDLFFBQVcsU0FBSSxHQUFtQixVQUFVLENBQUM7QUFDN0MsUUFBVyxXQUFNLEdBQUcsS0FBSyxDQUFDO0FBQzFCLFFBQUUseUJBQW9CLEdBQWEsRUFBRSxDQUFDO0FBQ3RDLFFBQUUsZ0JBQVcsR0FBRyxXQUFXLENBQUM7QUFDNUIsSUFPNEUsQ0FBQztBQUM3RTtBQUFRO0FBQ0Y7QUFBUSxJQVRaLHVEQUFlO0FBQU87QUFDVDtBQUNmLElBRkU7QUFBYyxRQUNaLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtBQUNyQixZQUFNLElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFDO0FBQ3BDLFNBQUs7QUFBQyxhQUFLO0FBQ1gsWUFBTSxJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztBQUNyQyxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0Y7QUFBUTtBQUFtQjtBQUFRLElBQ2xDLGdEQUFRO0FBQU87QUFDRjtBQUFRLElBRHJCO0FBQWMsUUFDWixJQUFJLENB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TVAsbURBQThCO0FBQUM7QUFBUTtBQUFpQjtBQUM5RDtBQUFRLElBRDhCLGlEQUEyQjtBQUFDO0FBQUUiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9ORy1aT1JSTy9uZy16b3Jyby1hbnRkL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG5pbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBJbnB1dCxcbiAgT25DaGFuZ2VzLFxuICBPbkluaXQsXG4gIFJlbmRlcmVyMixcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgVGVtcGxhdGVSZWYsXG4gIFZpZXdFbmNhcHN1bGF0aW9uXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgY29sbGFwc2VNb3Rpb24gfSBmcm9tICduZy16b3Jyby1hbnRkL2NvcmUvYW5pbWF0aW9uJztcbmltcG9ydCB7IE56U2FmZUFueSB9IGZyb20gJ25nLXpvcnJvLWFudGQvY29yZS90eXBlcyc7XG5pbXBvcnQgeyBOek1lbnVNb2RlVHlwZSB9IGZyb20gJy4vbWVudS50eXBlcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ1tuei1zdWJtZW51LWlubGluZS1jaGlsZF0nLFxuICBhbmltYXRpb25zOiBbY29sbGFwc2VNb3Rpb25dLFxuICBleHBvcnRBczogJ256U3VibWVudUlubGluZUNoaWxkJyxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiBgIDxuZy10ZW1wbGF0ZSBbbmdUZW1wbGF0ZU91dGxldF09XCJ0ZW1wbGF0ZU91dGxldFwiPjwvbmctdGVtcGxhdGU+IGAsXG4gIGhvc3Q6IHtcbiAgICAnW2NsYXNzLmFudC1tZW51XSc6ICd0cnVlJyxcbiAgICAnW2NsYXNzLmFudC1tZW51LWlubGluZV0nOiAndHJ1ZScsXG4gICAgJ1tjbGFzcy5hbnQtbWVudS1zdWJdJzogJ3RydWUnLFxuICAgICdbQGNvbGxhcHNlTW90aW9uXSc6ICdleHBhbmRTdGF0ZSdcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBOelN1Ym1lbnVJbmxpbmVDaGlsZENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgdGVtcGxhdGVPdXRsZXQ6IFRlbXBsYXRlUmVmPE56U2FmZUFueT4gfCBudWxsID0gbnVsbDtcbiAgQElucHV0KCkgbWVudUNsYXNzOiBzdHJpbmcgPSAnJztcbiAgQElucHV0KCkgbW9kZTogTnpNZW51TW9kZVR5cGUgPSAndmVydGljYWwnO1xuICBASW5wdXQoKSBuek9wZW4gPSBmYWxzZTtcbiAgbGlzdE9mQ2FjaGVDbGFzc05hbWU6IHN0cmluZ1tdID0gW107XG4gIGV4cGFuZFN0YXRlID0gJ2NvbGxhcHNlZCc7XG4gIGNhbGNNb3Rpb25TdGF0ZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5uek9wZW4pIHtcbiAgICAgIHRoaXMuZXhwYW5kU3RhdGUgPSAnZXhwYW5kZWQnO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmV4cGFuZFN0YXRlID0gJ2NvbGxhcHNlZCc7XG4gICAgfVxuICB9XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmNhbGNNb3Rpb25TdGF0ZSgpO1xuICB9XG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBjb25zdCB7IG1vZGUsIG56T3BlbiwgbWVudUNsYXNzIH0gPSBjaGFuZ2VzO1xuICAgIGlmIChtb2RlIHx8IG56T3Blbikge1xuICAgICAgdGhpcy5jYWxjTW90aW9uU3RhdGUoKTtcbiAgICB9XG4gICAgaWYgKG1lbnVDbGFzcykge1xuICAgICAgaWYgKHRoaXMubGlzdE9mQ2FjaGVDbGFzc05hbWUubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMubGlzdE9mQ2FjaGVDbGFzc05hbWVcbiAgICAgICAgICAuZmlsdGVyKGl0ZW0gPT4gISFpdGVtKVxuICAgICAgICAgIC5mb3JFYWNoKGNsYXNzTmFtZSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubWVudUNsYXNzKSB7XG4gICAgICAgIHRoaXMubGlzdE9mQ2FjaGVDbGFzc05hbWUgPSB0aGlzLm1lbnVDbGFzcy5zcGxpdCgnICcpO1xuICAgICAgICB0aGlzLmxpc3RPZkNhY2hlQ2xhc3NOYW1lXG4gICAgICAgICAgLmZpbHRlcihpdGVtID0+ICEhaXRlbSlcbiAgICAgICAgICAuZm9yRWFjaChjbGFzc05hbWUgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdfQ==