/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable, Inject, forwardRef } from '@angular/core';
import { Chart } from 'chart.js';
import { NgChartjsCustomPluginToken } from './plugin-token';
import { PluginConfig } from './pluginsConfig';
import { StoreService } from './store.service';
import * as i0 from "@angular/core";
import * as i1 from "./plugin-token";
import * as i2 from "./store.service";
import * as ɵngcc0 from '@angular/core';
var NgChartjsService = /** @class */ (function () {
    function NgChartjsService(pluginConfig, storeService) {
        this.pluginConfig = pluginConfig;
        this.storeService = storeService;
        this.plugins = pluginConfig.plugins;
        if (this.plugins.length !== 0 || this.plugins) {
            for (var i = 0; i < this.plugins.length; i++) {
                if (this.plugins[i]) {
                    Chart.plugins.register(this.plugins[i]);
                }
            }
        }
    }
    // get chart instance by id
    /**
     * @param {?} id
     * @return {?}
     */
    NgChartjsService.prototype.getChart = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.storeService.getChart(id);
    };
    /** @nocollapse */
    NgChartjsService.ctorParameters = function () { return [
        { type: PluginConfig, decorators: [{ type: Inject, args: [forwardRef(function () { return NgChartjsCustomPluginToken; }),] }] },
        { type: StoreService }
    ]; };
    /** @nocollapse */ NgChartjsService.ngInjectableDef = i0.defineInjectable({ factory: function NgChartjsService_Factory() { return new NgChartjsService(i0.inject(i1.NgChartjsCustomPluginToken), i0.inject(i2.StoreService)); }, token: NgChartjsService, providedIn: "root" });
NgChartjsService.ɵfac = function NgChartjsService_Factory(t) { return new (t || NgChartjsService)(ɵngcc0.ɵɵinject(forwardRef(function () { return NgChartjsCustomPluginToken; })), ɵngcc0.ɵɵinject(StoreService)); };
NgChartjsService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgChartjsService, factory: function (t) { return NgChartjsService.ɵfac(t); }, providedIn: 'root' });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgChartjsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: PluginConfig, decorators: [{
                type: Inject,
                args: [forwardRef(function () { return NgChartjsCustomPluginToken; })]
            }] }, { type: StoreService }]; }, null); })();
    return NgChartjsService;
}());
export { NgChartjsService };
if (false) {
    /** @type {?} */
    NgChartjsService.prototype.plugins;
    /** @type {?} */
    NgChartjsService.prototype.pluginConfig;
    /** @type {?} */
    NgChartjsService.prototype.storeService;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctY2hhcnRqcy5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyJuZzovbmctY2hhcnRqcy9saWIvbmctY2hhcnRqcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0QsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNqQyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DO0FBR0M7QUFHRTs7QUFFVTtBQUFvRCxJQUE3RCwwQkFBMEUsWUFBMEIsRUFDNUY7QUFBZ0IsUUFEa0QsaUJBQVksR0FBWixZQUFZLENBQWM7QUFBQyxRQUM3RixpQkFBWSxHQUFaLFlBQVk7QUFBRSxRQUNwQixJQUFJLENBQUMsT0FBTyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUM7QUFDMUMsUUFBTSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDdEQsWUFBUSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7QUFDdkQsZ0JBQVUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEMsb0JBQVksS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BELGlCQUFXO0FBQ1gsYUFBUztBQUNULFNBQU87QUFDUCxLQUFLO0FBQ0wsSUFBSSwyQkFBMkI7QUFDL0I7QUFBUTtBQUFxQjtBQUNiO0FBQVEsSUFEcEIsbUNBQVE7QUFBTztBQUNYO0FBQW1CO0FBQVEsSUFEL0IsVUFBUyxFQUFVO0FBQUksUUFDckIsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzVDLEtBQUssQ0FsQks7QUFBQzs2QkFIVixVQUFVLFNBQUMsaERBS1g7U0FKQyxVQUFVLEVBQUUsTUFBTSxrQkFDbkIsN0NBS2dDLGdCQVZ4QixZQUFZLHVCQVVKLE1BQU0sU0FBQyxVQUFVLENBQUMsY0FBTSxPQUFBLDBCQUEwQixFQUExQixDQUEwQixDQUFDO0FBQVMsZ0JBVHBFLFlBQVk7QUFBRztBQUFVOzs7Ozs7Ozs7OzswREFXckI7QUFBQywyQkFmZDtBQUFFO0FBQU0sU0FTSyxnQkFBZ0I7QUFFN0I7QUFBYTtBQUVSO0FBQXdDO0FBQXFCO0FBQzdEO0FBQXFCO0FBQ0c7O0FBZkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVNBLEFBQUEsQUFBQSxBQUNBLEFBREEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFyQkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUxBLEFBQUEsQUFVQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBVEEsQUFBQSxBQUpBLEFBU0EsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCwgZm9yd2FyZFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2hhcnQgfSBmcm9tICdjaGFydC5qcyc7XG5pbXBvcnQgeyBOZ0NoYXJ0anNDdXN0b21QbHVnaW5Ub2tlbiB9IGZyb20gJy4vcGx1Z2luLXRva2VuJztcbmltcG9ydCB7IFBsdWdpbkNvbmZpZyB9IGZyb20gJy4vcGx1Z2luc0NvbmZpZyc7XG5pbXBvcnQgeyBTdG9yZVNlcnZpY2UgfSBmcm9tICcuL3N0b3JlLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBOZ0NoYXJ0anNTZXJ2aWNlIHtcblxuICAgIHByaXZhdGUgcGx1Z2luczogYW55W107XG5cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gTmdDaGFydGpzQ3VzdG9tUGx1Z2luVG9rZW4pKSBwcml2YXRlIHBsdWdpbkNvbmZpZzogUGx1Z2luQ29uZmlnLFxuICAgIHByaXZhdGUgc3RvcmVTZXJ2aWNlOiBTdG9yZVNlcnZpY2UpIHtcbiAgICAgIHRoaXMucGx1Z2lucyA9IHBsdWdpbkNvbmZpZy5wbHVnaW5zO1xuICAgICAgaWYgKHRoaXMucGx1Z2lucy5sZW5ndGggIT09IDAgfHwgdGhpcy5wbHVnaW5zKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wbHVnaW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKHRoaXMucGx1Z2luc1tpXSkge1xuICAgICAgICAgICAgQ2hhcnQucGx1Z2lucy5yZWdpc3Rlcih0aGlzLnBsdWdpbnNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBnZXQgY2hhcnQgaW5zdGFuY2UgYnkgaWRcbiAgICBnZXRDaGFydChpZDogc3RyaW5nKTogYW55IHtcbiAgICAgIHJldHVybiB0aGlzLnN0b3JlU2VydmljZS5nZXRDaGFydChpZCk7XG4gICAgfVxufVxuIl19