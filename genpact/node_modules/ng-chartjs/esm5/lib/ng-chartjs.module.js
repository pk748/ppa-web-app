/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { NgChartjsDirective } from './ng-chartjs.directive';
import { NgChartjsDefaultPluginToken, NgChartjsCustomPluginToken } from './plugin-token';
import { PluginConfig } from './pluginsConfig';
/**
 * @param {?} plugins
 * @return {?}
 */
import * as ɵngcc0 from '@angular/core';
export function ngChartjsCustomPluginsFactory(plugins) {
    return new PluginConfig(plugins);
}
/**
 * @return {?}
 */
export function ngChartjsDefaultPluginsFactory() {
    return new PluginConfig([]);
}
var NgChartjsModule = /** @class */ (function () {
    function NgChartjsModule() {
    }
    /**
     * Register a plugin.
     * @param {?=} plugins
     * @return {?}
     */
    NgChartjsModule.registerPlugin = /**
     * Register a plugin.
     * @param {?=} plugins
     * @return {?}
     */
    function (plugins) {
        if (plugins === void 0) { plugins = []; }
        return {
            ngModule: NgChartjsModule,
            providers: [
                {
                    provide: NgChartjsDefaultPluginToken,
                    useValue: plugins
                },
                {
                    deps: [NgChartjsDefaultPluginToken],
                    provide: NgChartjsCustomPluginToken,
                    useFactory: ngChartjsCustomPluginsFactory
                }
            ]
        };
    };
NgChartjsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgChartjsModule });
NgChartjsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgChartjsModule_Factory(t) { return new (t || NgChartjsModule)(); }, providers: [
        {
            provide: NgChartjsCustomPluginToken,
            useFactory: ngChartjsDefaultPluginsFactory
        }
    ], imports: [[]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgChartjsModule, { declarations: function () { return [NgChartjsDirective]; }, exports: function () { return [NgChartjsDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgChartjsModule, [{
        type: NgModule,
        args: [{
                imports: [],
                declarations: [NgChartjsDirective],
                exports: [NgChartjsDirective],
                providers: [
                    {
                        provide: NgChartjsCustomPluginToken,
                        useFactory: ngChartjsDefaultPluginsFactory
                    }
                ]
            }]
    }], function () { return []; }, null); })();
    return NgChartjsModule;
}());
export { NgChartjsModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctY2hhcnRqcy5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIm5nOi9uZy1jaGFydGpzL2xpYi9uZy1jaGFydGpzLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLDJCQUEyQixFQUFFLDBCQUEwQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDekYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DO0FBQUk7QUFBc0I7QUFBZTs7QUFHekMsTUFBTSx3Q0FBd0MsT0FBYztBQUFJLElBQzlELE1BQU0sQ0FBQyxJQUFJLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNuQyxDQUFDO0FBQ0Q7QUFDRztBQUFlO0FBQWxCLE1BQU07QUFBNkMsSUFDakQsTUFBTSxDQUFDLElBQUksWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzlCLENBQUM7QUFDRDtBQUttQjtBQUNMO0FBQU07QUFBUTtBQUc1QjtBQUEyQjtBQUN4QjtBQUFRLElBU0ssOEJBQWM7QUFBTztBQUEwQjtBQUU3RDtBQUFtQjtBQUFRLGNBRkUsT0FBbUI7QUFBSSxRQUF2Qix3QkFBQSxFQUFBLFlBQW1CO0FBQUksUUFDbEQsTUFBTSxDQUFDO0FBQ1gsWUFBTSxRQUFRLEVBQUUsZUFBZTtBQUMvQixZQUFNLFNBQVMsRUFBRTtBQUNqQixnQkFBUTtBQUNSLG9CQUFVLE9BQU8sRUFBRSwyQkFBMkI7QUFDOUMsb0JBQVUsUUFBUSxFQUFFLE9BQU87QUFDM0IsaUJBQVM7QUFDVCxnQkFBUTtBQUNSLG9CQUFVLElBQUksRUFBRSxDQUFDLDJCQUEyQixDQUFDO0FBQzdDLG9CQUFVLE9BQU8sRUFBRSwwQkFBMEI7QUFDN0Msb0JBQVUsVUFBVSxFQUFFLDZCQUE2QjtBQUNuRCxpQkFBUztBQUNULGFBQU87QUFDUCxTQUFLLENBQUM7QUFDTjttREFoQ0MsUUFBUSxTQUFDO2VBQ1IsT0FBTyxFQUFFLEVBQ1Isc0JBQ0QsWUFBWSxFQUFFLENBQUMsa0JBQWtCLENBQUMsc0JBQ2xDLE9BQU8sRUFBRSxDQUFDLGtCQUFrQixDQUFDO01BQzdCO0tBQVMsRUFBRSwwQkFDVDtjQUNFLE9BQU8sRUFBRSwwQkFBMEI7O2NBQ25DLFVBQVU7Q0FBRSw4QkFBOEIsMEJBQzNDLHNCQUNGLGtCQUNGOzs7Ozs7Ozs7Ozs7OztnREFDUztBQUFDLDBCQTVCWDtBQUFFO0FBQU0sU0E0QkssZUFBZTs7QUE1QkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFJQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBb0JBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUNBLEFBQUEsQUEvQkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQ0EsQUEzQkEsQUE0QkEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ0NoYXJ0anNEaXJlY3RpdmUgfSBmcm9tICcuL25nLWNoYXJ0anMuZGlyZWN0aXZlJztcbmltcG9ydCB7IE5nQ2hhcnRqc0RlZmF1bHRQbHVnaW5Ub2tlbiwgTmdDaGFydGpzQ3VzdG9tUGx1Z2luVG9rZW4gfSBmcm9tICcuL3BsdWdpbi10b2tlbic7XG5pbXBvcnQgeyBQbHVnaW5Db25maWcgfSBmcm9tICcuL3BsdWdpbnNDb25maWcnO1xuaW1wb3J0IHsgTmdDaGFydGpzU2VydmljZSB9IGZyb20gJy4vbmctY2hhcnRqcy5zZXJ2aWNlJztcblxuXG5leHBvcnQgZnVuY3Rpb24gbmdDaGFydGpzQ3VzdG9tUGx1Z2luc0ZhY3RvcnkocGx1Z2luczogYW55W10pOiBQbHVnaW5Db25maWcge1xuICByZXR1cm4gbmV3IFBsdWdpbkNvbmZpZyhwbHVnaW5zKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5nQ2hhcnRqc0RlZmF1bHRQbHVnaW5zRmFjdG9yeSgpOiBQbHVnaW5Db25maWcge1xuICByZXR1cm4gbmV3IFBsdWdpbkNvbmZpZyhbXSk7XG59XG5cblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtOZ0NoYXJ0anNEaXJlY3RpdmVdLFxuICBleHBvcnRzOiBbTmdDaGFydGpzRGlyZWN0aXZlXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTmdDaGFydGpzQ3VzdG9tUGx1Z2luVG9rZW4sXG4gICAgICB1c2VGYWN0b3J5OiBuZ0NoYXJ0anNEZWZhdWx0UGx1Z2luc0ZhY3RvcnlcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgTmdDaGFydGpzTW9kdWxlIHtcbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgcGx1Z2luLlxuICAgKiBAcGFyYW0gcGx1Z2luXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHJlZ2lzdGVyUGx1Z2luKHBsdWdpbnM6IGFueVtdID0gW10pOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IE5nQ2hhcnRqc01vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogTmdDaGFydGpzRGVmYXVsdFBsdWdpblRva2VuLFxuICAgICAgICAgIHVzZVZhbHVlOiBwbHVnaW5zXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBkZXBzOiBbTmdDaGFydGpzRGVmYXVsdFBsdWdpblRva2VuXSxcbiAgICAgICAgICBwcm92aWRlOiBOZ0NoYXJ0anNDdXN0b21QbHVnaW5Ub2tlbixcbiAgICAgICAgICB1c2VGYWN0b3J5OiBuZ0NoYXJ0anNDdXN0b21QbHVnaW5zRmFjdG9yeVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfTtcbiAgfVxufVxuIl19