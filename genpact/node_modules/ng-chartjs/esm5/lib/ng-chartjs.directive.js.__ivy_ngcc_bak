/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { StoreService } from './store.service';
import { EventEmitter, ElementRef, Input, Output, Directive } from '@angular/core';
import { Chart } from 'chart.js';
import { NgChartjsService } from './ng-chartjs.service';
import { getColors } from './colors';
var NgChartjsDirective = /** @class */ (function () {
    function NgChartjsDirective(element, ngChartjsService, storeService) {
        this.ngChartjsService = ngChartjsService;
        this.storeService = storeService;
        // x轴标签。这对图表来说是必要的：线，条和雷达。并且只是图表的标签（悬停）：polarArea，pie和doughnut
        this.labels = [];
        // 相当于chart.js的option
        this.options = {};
        // 鼠标点击图表所有的区域
        this.chartClick = new EventEmitter();
        // 鼠标悬浮在标签或者活跃的点上面时
        this.chartHover = new EventEmitter();
        this.initFlag = false;
        this.hasChanges = false;
        this.element = element; // 获取指令所在canvas元素
    }
    /**
     * @return {?}
     */
    NgChartjsDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.ctx = this.element.nativeElement.getContext('2d'); // 获取元素的ctx
        this.cvs = this.element.nativeElement; // 获取这个元素
        this.initFlag = true; // 是否初始化了的标志
        if (this.data || this.datasets) {
            // 判断data和datasets有一个有数据就刷新
            this.refresh();
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgChartjsDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        // TODO: 插件变化刷新，开放刷新按钮
        if (this.initFlag) {
            // Check if the changes are in the data or datasets
            if (changes.hasOwnProperty('data') || changes.hasOwnProperty('datasets')) {
                if (changes["data"]) {
                    this.updateChartData(changes["data"].currentValue);
                }
                else {
                    this.updateChartData(changes["datasets"].currentValue);
                }
                this.hasChanges = true;
            }
            if (changes.hasOwnProperty('labels')) {
                this.chart.data.labels = changes["labels"].currentValue;
                this.hasChanges = true;
            }
            if (changes.hasOwnProperty('legend')) {
                if (changes["legend"].currentValue !== changes["legend"].previousValue) {
                    this.chart.options.legend.display = changes["legend"].currentValue;
                    this.hasChanges = true;
                }
            }
            if (changes.hasOwnProperty('adding')) {
                this.addData(changes["adding"].currentValue.labels, changes["adding"].currentValue.data);
                this.hasChanges = true;
            }
            if (changes.hasOwnProperty('removing')) {
                if (changes["removing"].currentValue.orientation === 'oldest' || changes["removing"].currentValue.orientation === 'latest') {
                    this.removeData(changes["removing"].currentValue.orientation);
                    this.hasChanges = true;
                }
            }
            if (changes.hasOwnProperty('resetOption')) {
                Object.assign(this.chart.options, changes["resetOption"].currentValue);
                this.hasChanges = true;
            }
            // else {
            //   // otherwise rebuild the chart
            //   this.refresh();
            // }
            if (this.hasChanges) {
                this.chart.update();
                this.hasChanges = false;
            }
        }
    };
    /**
     * @return {?}
     */
    NgChartjsDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.chart) {
            this.chart.destroy();
            this.chart = void 0;
            if (this.element.nativeElement.hasAttribute('id')) {
                this.storeService.removeChart(this.element.nativeElement.id); // delete chart instance.
            }
        }
    };
    /**
     * @return {?}
     */
    NgChartjsDirective.prototype.refresh = /**
     * @return {?}
     */
    function () {
        this.ngOnDestroy();
        this.chart = this.getChartBuilder(this.ctx /*, data, this.options*/);
        if (this.element.nativeElement.hasAttribute('id')) {
            this.storeService.addChart(this.element.nativeElement.id, this.chart);
        }
    };
    /**
     * @param {?} labels
     * @param {?} data
     * @return {?}
     */
    NgChartjsDirective.prototype.addData = /**
     * @param {?} labels
     * @param {?} data
     * @return {?}
     */
    function (labels, data) {
        var _this = this;
        if (labels.length === 0 || data.length === 0) {
            return;
        }
        // update labels
        labels.forEach(function (label) { _this.chart.data.labels.push(label); });
        this.chart.data.datasets.forEach(function (dataset, index) {
            if (data[index]) {
                for (var i = 0; i < data[index].length; i++) {
                    dataset.data.push(data[index][i]);
                }
            }
            else {
                console.log('The added data does not match the original data');
                return;
            }
        });
    };
    /**
     * @param {?} direction
     * @return {?}
     */
    NgChartjsDirective.prototype.removeData = /**
     * @param {?} direction
     * @return {?}
     */
    function (direction) {
        if (direction === 'latest') {
            this.chart.data.labels.pop();
            this.chart.data.datasets.forEach(function (dataset) {
                dataset.data.pop();
            });
            return;
        }
        if (direction === 'oldest') {
            return;
        }
    };
    /**
     * @param {?} newDataValues
     * @return {?}
     */
    NgChartjsDirective.prototype.updateChartData = /**
     * @param {?} newDataValues
     * @return {?}
     */
    function (newDataValues) {
        if (Array.isArray(newDataValues[0].data)) {
            this.chart.data.datasets.forEach(function (dataset, i) {
                dataset.data = newDataValues[i].data;
                if (newDataValues[i].label) {
                    dataset.label = newDataValues[i].label;
                }
            });
        }
        else {
            this.chart.data.datasets[0].data = newDataValues;
        }
    };
    /**
     * @param {?} ctx
     * @return {?}
     */
    NgChartjsDirective.prototype.getChartBuilder = /**
     * @param {?} ctx
     * @return {?}
     */
    function (ctx /*, data:Array<any>, options:any*/) {
        var _this = this;
        /** @type {?} */
        var datasets = this.getDatasets();
        /** @type {?} */
        var options = Object.assign({}, this.options); // 深复制options
        if (this.legend === false) {
            // 设置options的legend TODO: 后续这个属性去除，直接在options内设置
            options.legend = { display: false };
        }
        // hock for onHover and onClick events
        options.hover = options.hover || {};
        if (!options.hover.onHover) {
            options.hover.onHover = function (active) {
                if (active && !active.length) {
                    return;
                }
                _this.chartHover.emit({ active: active });
            };
        }
        if (!options.onClick) {
            options.onClick = function (event, active) {
                _this.chartClick.emit({ event: event, active: active });
            };
        }
        /** @type {?} */
        var opts = {
            type: this.chartType,
            data: {
                labels: this.labels,
                datasets: datasets // TODO: 后续更改这个属性名字，否则警告
            },
            options: options,
            // TODO: 后续更改这个属性名字，否则警告
            plugins: this.inlinePlugins
        };
        return new Chart(ctx, opts);
    };
    /**
     * @return {?}
     */
    NgChartjsDirective.prototype.getDatasets = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var datasets = void 0;
        // in case if datasets is not provided, but data is present
        if (!this.datasets || !this.datasets.length && (this.data && this.data.length)) {
            if (Array.isArray(this.data[0])) {
                datasets = (/** @type {?} */ (this.data)).map(function (data, index) {
                    return { data: data, label: _this.labels[index] || "Label " + index };
                });
            }
            else {
                datasets = [{ data: this.data, label: "Label 0" }];
            }
        }
        if (this.datasets && this.datasets.length ||
            (datasets && datasets.length)) {
            datasets = (this.datasets || datasets)
                .map(function (elm, index) {
                /** @type {?} */
                var newElm = Object.assign({}, elm);
                if (_this.colors && _this.colors.length) {
                    Object.assign(newElm, _this.colors[index]);
                }
                else {
                    Object.assign(newElm, getColors(_this.chartType, index, newElm.data.length));
                }
                return newElm;
            });
        }
        if (!datasets) {
            throw new Error("ng-charts configuration error,\n      data or datasets field are required to render char " + this.chartType);
        }
        return datasets;
    };
    NgChartjsDirective.decorators = [
        { type: Directive, args: [{ selector: 'canvas[ngChartjs]', exportAs: 'ng-chart-js' },] },
    ];
    /** @nocollapse */
    NgChartjsDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgChartjsService },
        { type: StoreService }
    ]; };
    NgChartjsDirective.propDecorators = {
        data: [{ type: Input }],
        datasets: [{ type: Input }],
        labels: [{ type: Input }],
        options: [{ type: Input }],
        inlinePlugins: [{ type: Input }],
        chartType: [{ type: Input }],
        colors: [{ type: Input }],
        legend: [{ type: Input }],
        adding: [{ type: Input }],
        removing: [{ type: Input }],
        resetOption: [{ type: Input }],
        chartClick: [{ type: Output }],
        chartHover: [{ type: Output }]
    };
    return NgChartjsDirective;
}());
export { NgChartjsDirective };
if (false) {
    /** @type {?} */
    NgChartjsDirective.prototype.data;
    /** @type {?} */
    NgChartjsDirective.prototype.datasets;
    /** @type {?} */
    NgChartjsDirective.prototype.labels;
    /** @type {?} */
    NgChartjsDirective.prototype.options;
    /** @type {?} */
    NgChartjsDirective.prototype.inlinePlugins;
    /** @type {?} */
    NgChartjsDirective.prototype.chartType;
    /** @type {?} */
    NgChartjsDirective.prototype.colors;
    /** @type {?} */
    NgChartjsDirective.prototype.legend;
    /** @type {?} */
    NgChartjsDirective.prototype.adding;
    /** @type {?} */
    NgChartjsDirective.prototype.removing;
    /** @type {?} */
    NgChartjsDirective.prototype.resetOption;
    /** @type {?} */
    NgChartjsDirective.prototype.chartClick;
    /** @type {?} */
    NgChartjsDirective.prototype.chartHover;
    /** @type {?} */
    NgChartjsDirective.prototype.ctx;
    /** @type {?} */
    NgChartjsDirective.prototype.chart;
    /** @type {?} */
    NgChartjsDirective.prototype.cvs;
    /** @type {?} */
    NgChartjsDirective.prototype.initFlag;
    /** @type {?} */
    NgChartjsDirective.prototype.hasChanges;
    /** @type {?} */
    NgChartjsDirective.prototype.element;
    /** @type {?} */
    NgChartjsDirective.prototype.ngChartjsService;
    /** @type {?} */
    NgChartjsDirective.prototype.storeService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctY2hhcnRqcy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1jaGFydGpzLyIsInNvdXJjZXMiOlsibGliL25nLWNoYXJ0anMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUlMLFlBQVksRUFDWixVQUFVLEVBQ1YsS0FBSyxFQUNMLE1BQU0sRUFFTixTQUFTLEVBQ1YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVqQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sVUFBVSxDQUFDOztnQ0F1Q2hCLE9BQW1CLEVBQzVCLGtCQUNBO1FBREEscUJBQWdCLEdBQWhCLGdCQUFnQjtRQUNoQixpQkFBWSxHQUFaLFlBQVk7O3NCQS9CRyxFQUFFOzt1QkFFSCxFQUFFOzswQkFlZ0IsSUFBSSxZQUFZLEVBQUU7OzBCQUVsQixJQUFJLFlBQVksRUFBRTt3QkFLekMsS0FBSzswQkFDSCxLQUFLO1FBT3hCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDOzs7OztJQUd6QixxQ0FBUTs7O0lBQVI7UUFDRSxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO1FBQ3RDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBRXJCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7O1lBQy9CLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztT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QztZQUNkLE1BQU0sSUFBSSxLQUFLLENBQUMsOEZBQ3FDLElBQUksQ0FBQyxTQUFXLENBQUMsQ0FBQztTQUN4RTtRQUVELE1BQU0sQ0FBQyxRQUFRLENBQUM7OztnQkEvT25CLFNBQVMsU0FBQyxFQUFFLFFBQVEsRUFBRSxtQkFBbUIsRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFOzs7O2dCQVhuRSxVQUFVO2dCQVFILGdCQUFnQjtnQkFkaEIsWUFBWTs7O3VCQXFCbEIsS0FBSzsyQkFFTCxLQUFLO3lCQUVMLEtBQUs7MEJBRUwsS0FBSztnQ0FFTCxLQUFLOzRCQUVMLEtBQUs7eUJBRUwsS0FBSzt5QkFFTCxLQUFLO3lCQUVMLEtBQUs7MkJBQ0wsS0FBSzs4QkFDTCxLQUFLOzZCQUdMLE1BQU07NkJBRU4sTUFBTTs7NkJBNUNUOztTQWtCYSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdG9yZVNlcnZpY2UgfSBmcm9tICcuL3N0b3JlLnNlcnZpY2UnO1xuaW1wb3J0IHtcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIE9uQ2hhbmdlcyxcbiAgRXZlbnRFbWl0dGVyLFxuICBFbGVtZW50UmVmLFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBTaW1wbGVDaGFuZ2VzLFxuICBEaXJlY3RpdmVcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDaGFydCB9IGZyb20gJ2NoYXJ0LmpzJztcblxuaW1wb3J0IHsgTmdDaGFydGpzU2VydmljZSB9IGZyb20gJy4vbmctY2hhcnRqcy5zZXJ2aWNlJztcbmltcG9ydCB7IGdldENvbG9ycyB9IGZyb20gJy4vY29sb3JzJztcbi8qIHRzbGludDpkaXNhYmxlLW5leHQtbGluZSAqL1xuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnY2FudmFzW25nQ2hhcnRqc10nLCBleHBvcnRBczogJ25nLWNoYXJ0LWpzJyB9KVxuZXhwb3J0IGNsYXNzIE5nQ2hhcnRqc0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSwgT25DaGFuZ2VzLCBPbkluaXQge1xuXG4gIC8vIOWbvuihqOeahOeCuembhu+8jOWug+W6lOivpeaYr+aVsOe7hDxudW1iZXIgW10+5LuF55So5LqO57q/77yM5p2h5ZKM6Zu36L6+77yM5ZCm5YiZ5pWw5a2XW107XG4gIEBJbnB1dCgpIGRhdGE6IG51bWJlcltdIHwgYW55W107XG4gIC8vIOebuOW9k+S6jmNoYXJ0Lmpz5YaFIGRhdGE6IHtkYXRhc2V0czogW3suLi59XX1cbiAgQElucHV0KCkgZGF0YXNldHM6IGFueVtdO1xuICAvLyB46L205qCH562+44CC6L+Z5a+55Zu+6KGo5p2l6K+05piv5b+F6KaB55qE77ya57q/77yM5p2h5ZKM6Zu36L6+44CC5bm25LiU5Y+q5piv5Zu+6KGo55qE5qCH562+77yI5oKs5YGc77yJ77yacG9sYXJBcmVh77yMcGll5ZKMZG91Z2hudXRcbiAgQElucHV0KCkgbGFiZWxzOiBhbnlbXSA9IFtdO1xuICAvLyDnm7jlvZPkuo5jaGFydC5qc+eahG9wdGlvblxuICBASW5wdXQoKSBvcHRpb25zOiBhbnkgPSB7fTtcbiAgLy8g5YaF6IGU5o+S5Lu25bGe5oCnXG4gIEBJbnB1dCgpIGlubGluZVBsdWdpbnM6IGFueVtdO1xuICAvLyBjaGFydFR5cGUgbGluZSwgYmFyLCByYWRhciwgcGllLCBwb2xhckFyZWEsIGRvdWdobnV0XG4gIEBJbnB1dCgpIGNoYXJ0VHlwZTogc3RyaW5nO1xuICAvLyDmlbDmja7popzoibLvvIzlpoLmnpzmsqHmnInmjIflrprvvIzlsIbkvb/nlKjpu5jorqTlkox85oiW6ZqP5py66aKc6ImyXG4gIEBJbnB1dCgpIGNvbG9yczogYW55W107XG4gIC8vIOaYr+WQpuaYvuekuuWbvuS+i1xuICBASW5wdXQoKSBsZWdlbmQ6IGJvb2xlYW47XG5cbiAgQElucHV0KCkgYWRkaW5nOiB7IGxhYmVsczogYW55W10sIGRhdGE6IGFueVtdW10gfTtcbiAgQElucHV0KCkgcmVtb3Zpbmc6IHsgb3JpZW50YXRpb246IHN0cmluZyB9OyAgLy8gb3JpZW50YXRpb24gaXMgJ29sZGVzdCcgb3IgJ2xhdGVzdFxuICBASW5wdXQoKSByZXNldE9wdGlvbjogYW55O1xuXG4gIC8vIOm8oOagh+eCueWHu+WbvuihqOaJgOacieeahOWMuuWfn1xuICBAT3V0cHV0KCkgY2hhcnRDbGljazogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIC8vIOm8oOagh+aCrOa1ruWcqOagh+etvuaIluiAhea0u+i3g+eahOeCueS4iumdouaXtlxuICBAT3V0cHV0KCkgY2hhcnRIb3ZlcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgcHVibGljIGN0eDogYW55O1xuICBwdWJsaWMgY2hhcnQ6IGFueTtcbiAgcHJpdmF0ZSBjdnM6IGFueTtcbiAgcHJpdmF0ZSBpbml0RmxhZyA9IGZhbHNlO1xuICBwcml2YXRlIGhhc0NoYW5nZXMgPSBmYWxzZTtcblxuICBwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWY7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSBuZ0NoYXJ0anNTZXJ2aWNlOiBOZ0NoYXJ0anNTZXJ2aWNlLFxuICAgIHByaXZhdGUgc3RvcmVTZXJ2aWNlOiBTdG9yZVNlcnZpY2UpIHtcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50OyAgIC8vIOiOt+WPluaMh+S7pOaJgOWcqGNhbnZhc+WFg+e0oFxuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5jdHggPSB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudC5nZXRDb250ZXh0KCcyZCcpOyAvLyDojrflj5blhYPntKDnmoRjdHhcbiAgICB0aGlzLmN2cyA9IHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50OyAgLy8g6I635Y+W6L+Z5Liq5YWD57SgXG4gICAgdGhpcy5pbml0RmxhZyA9IHRydWU7IC8vIOaYr+WQpuWIneWni+WMluS6hueahOagh+W/l1xuXG4gICAgaWYgKHRoaXMuZGF0YSB8fCB0aGlzLmRhdGFzZXRzKSB7IC8vIOWIpOaWrWRhdGHlkoxkYXRhc2V0c+acieS4gOS4quacieaVsOaNruWwseWIt+aWsFxuICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIC8vIFRPRE86IOaPkuS7tuWPmOWMluWIt+aWsO+8jOW8gOaUvuWIt+aWsOaMiemSrlxuICAgIGlmICh0aGlzLmluaXRGbGFnKSB7XG4gICAgICAvLyBDaGVjayBpZiB0aGUgY2hhbmdlcyBhcmUgaW4gdGhlIGRhdGEgb3IgZGF0YXNldHNcbiAgICAgIGlmIChjaGFuZ2VzLmhhc093blByb3BlcnR5KCdkYXRhJykgfHwgY2hhbmdlcy5oYXNPd25Qcm9wZXJ0eSgnZGF0YXNldHMnKSkge1xuICAgICAgICBpZiAoY2hhbmdlcy5kYXRhKSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVDaGFydERhdGEoY2hhbmdlcy5kYXRhLmN1cnJlbnRWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVDaGFydERhdGEoY2hhbmdlcy5kYXRhc2V0cy5jdXJyZW50VmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaGFzQ2hhbmdlcyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFuZ2VzLmhhc093blByb3BlcnR5KCdsYWJlbHMnKSkge1xuICAgICAgICB0aGlzLmNoYXJ0LmRhdGEubGFiZWxzID0gY2hhbmdlcy5sYWJlbHMuY3VycmVudFZhbHVlO1xuICAgICAgICB0aGlzLmhhc0NoYW5nZXMgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hhbmdlcy5oYXNPd25Qcm9wZXJ0eSgnbGVnZW5kJykpIHtcbiAgICAgICAgaWYgKGNoYW5nZXMubGVnZW5kLmN1cnJlbnRWYWx1ZSAhPT0gY2hhbmdlcy5sZWdlbmQucHJldmlvdXNWYWx1ZSkge1xuICAgICAgICAgIHRoaXMuY2hhcnQub3B0aW9ucy5sZWdlbmQuZGlzcGxheSA9IGNoYW5nZXMubGVnZW5kLmN1cnJlbnRWYWx1ZTtcbiAgICAgICAgICB0aGlzLmhhc0NoYW5nZXMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFuZ2VzLmhhc093blByb3BlcnR5KCdhZGRpbmcnKSkge1xuICAgICAgICB0aGlzLmFkZERhdGEoY2hhbmdlcy5hZGRpbmcuY3VycmVudFZhbHVlLmxhYmVscywgY2hhbmdlcy5hZGRpbmcuY3VycmVudFZhbHVlLmRhdGEpO1xuICAgICAgICB0aGlzLmhhc0NoYW5nZXMgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hhbmdlcy5oYXNPd25Qcm9wZXJ0eSgncmVtb3ZpbmcnKSkge1xuICAgICAgICBpZiAoY2hhbmdlcy5yZW1vdmluZy5jdXJyZW50VmFsdWUub3JpZW50YXRpb24gPT09ICdvbGRlc3QnIHx8IGNoYW5nZXMucmVtb3ZpbmcuY3VycmVudFZhbHVlLm9yaWVudGF0aW9uID09PSAnbGF0ZXN0Jykge1xuICAgICAgICAgIHRoaXMucmVtb3ZlRGF0YShjaGFuZ2VzLnJlbW92aW5nLmN1cnJlbnRWYWx1ZS5vcmllbnRhdGlvbik7XG4gICAgICAgICAgdGhpcy5oYXNDaGFuZ2VzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoY2hhbmdlcy5oYXNPd25Qcm9wZXJ0eSgncmVzZXRPcHRpb24nKSkge1xuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMuY2hhcnQub3B0aW9ucywgY2hhbmdlcy5yZXNldE9wdGlvbi5jdXJyZW50VmFsdWUpO1xuICAgICAgICB0aGlzLmhhc0NoYW5nZXMgPSB0cnVlO1xuICAgICAgfVxuICAgICAgLy8gZWxzZSB7XG4gICAgICAvLyAgIC8vIG90aGVyd2lzZSByZWJ1aWxkIHRoZSBjaGFydFxuICAgICAgLy8gICB0aGlzLnJlZnJlc2goKTtcbiAgICAgIC8vIH1cbiAgICAgIGlmICh0aGlzLmhhc0NoYW5nZXMpIHtcbiAgICAgICAgdGhpcy5jaGFydC51cGRhdGUoKTtcbiAgICAgICAgdGhpcy5oYXNDaGFuZ2VzID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuY2hhcnQpIHtcbiAgICAgIHRoaXMuY2hhcnQuZGVzdHJveSgpO1xuICAgICAgdGhpcy5jaGFydCA9IHZvaWQgMDtcblxuICAgICAgaWYgKHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50Lmhhc0F0dHJpYnV0ZSgnaWQnKSkge1xuICAgICAgICB0aGlzLnN0b3JlU2VydmljZS5yZW1vdmVDaGFydCh0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudC5pZCk7ICAvLyBkZWxldGUgY2hhcnQgaW5zdGFuY2UuXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSByZWZyZXNoKCk6IGFueSB7XG4gICAgdGhpcy5uZ09uRGVzdHJveSgpO1xuICAgIHRoaXMuY2hhcnQgPSB0aGlzLmdldENoYXJ0QnVpbGRlcih0aGlzLmN0eC8qLCBkYXRhLCB0aGlzLm9wdGlvbnMqLyk7XG4gICAgaWYgKHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50Lmhhc0F0dHJpYnV0ZSgnaWQnKSkge1xuICAgICAgdGhpcy5zdG9yZVNlcnZpY2UuYWRkQ2hhcnQodGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuaWQsIHRoaXMuY2hhcnQpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYWRkRGF0YShsYWJlbHM6IGFueVtdLCBkYXRhOiBhbnlbXVtdKSB7XG4gICAgaWYgKGxhYmVscy5sZW5ndGggPT09IDAgfHwgZGF0YS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gdXBkYXRlIGxhYmVsc1xuICAgIGxhYmVscy5mb3JFYWNoKChsYWJlbCkgPT4geyB0aGlzLmNoYXJ0LmRhdGEubGFiZWxzLnB1c2gobGFiZWwpOyB9KTtcblxuICAgIHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0cy5mb3JFYWNoKChkYXRhc2V0LCBpbmRleCkgPT4ge1xuICAgICAgaWYgKGRhdGFbaW5kZXhdKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YVtpbmRleF0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBkYXRhc2V0LmRhdGEucHVzaChkYXRhW2luZGV4XVtpXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdUaGUgYWRkZWQgZGF0YSBkb2VzIG5vdCBtYXRjaCB0aGUgb3JpZ2luYWwgZGF0YScpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgLy8gZGlyZWN0aW9uIGlzICdpbGRlc3QnIG9yICdsYXRlc3QnXG4gIHByaXZhdGUgcmVtb3ZlRGF0YShkaXJlY3Rpb246IHN0cmluZykge1xuICAgIGlmIChkaXJlY3Rpb24gPT09ICdsYXRlc3QnKSB7XG4gICAgICB0aGlzLmNoYXJ0LmRhdGEubGFiZWxzLnBvcCgpO1xuICAgICAgdGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzLmZvckVhY2goKGRhdGFzZXQpID0+IHtcbiAgICAgICAgZGF0YXNldC5kYXRhLnBvcCgpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChkaXJlY3Rpb24gPT09ICdvbGRlc3QnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIHByaXZhdGUgdXBkYXRlQ2hhcnREYXRhKG5ld0RhdGFWYWx1ZXM6IG51bWJlcltdIHwgYW55W10pOiB2b2lkIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShuZXdEYXRhVmFsdWVzWzBdLmRhdGEpKSB7XG4gICAgICB0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHMuZm9yRWFjaCgoZGF0YXNldDogYW55LCBpOiBudW1iZXIpID0+IHtcbiAgICAgICAgZGF0YXNldC5kYXRhID0gbmV3RGF0YVZhbHVlc1tpXS5kYXRhO1xuXG4gICAgICAgIGlmIChuZXdEYXRhVmFsdWVzW2ldLmxhYmVsKSB7XG4gICAgICAgICAgZGF0YXNldC5sYWJlbCA9IG5ld0RhdGFWYWx1ZXNbaV0ubGFiZWw7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbMF0uZGF0YSA9IG5ld0RhdGFWYWx1ZXM7XG4gICAgfVxuICB9XG5cbiAgZ2V0Q2hhcnRCdWlsZGVyKGN0eDogYW55LyosIGRhdGE6QXJyYXk8YW55Piwgb3B0aW9uczphbnkqLyk6IGFueSB7XG4gICAgY29uc3QgZGF0YXNldHM6IGFueSA9IHRoaXMuZ2V0RGF0YXNldHMoKTtcblxuICAgIGNvbnN0IG9wdGlvbnM6IGFueSA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0aW9ucyk7IC8vIOa3seWkjeWItm9wdGlvbnNcbiAgICBpZiAodGhpcy5sZWdlbmQgPT09IGZhbHNlKSB7ICAvLyDorr7nva5vcHRpb25z55qEbGVnZW5kIFRPRE86IOWQjue7rei/meS4quWxnuaAp+WOu+mZpO+8jOebtOaOpeWcqG9wdGlvbnPlhoXorr7nva5cbiAgICAgIG9wdGlvbnMubGVnZW5kID0geyBkaXNwbGF5OiBmYWxzZSB9O1xuICAgIH1cbiAgICAvLyBob2NrIGZvciBvbkhvdmVyIGFuZCBvbkNsaWNrIGV2ZW50c1xuICAgIG9wdGlvbnMuaG92ZXIgPSBvcHRpb25zLmhvdmVyIHx8IHt9O1xuICAgIGlmICghb3B0aW9ucy5ob3Zlci5vbkhvdmVyKSB7XG4gICAgICBvcHRpb25zLmhvdmVyLm9uSG92ZXIgPSAoYWN0aXZlOiBhbnlbXSkgPT4ge1xuICAgICAgICBpZiAoYWN0aXZlICYmICFhY3RpdmUubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2hhcnRIb3Zlci5lbWl0KHsgYWN0aXZlIH0pO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoIW9wdGlvbnMub25DbGljaykge1xuICAgICAgb3B0aW9ucy5vbkNsaWNrID0gKGV2ZW50OiBhbnksIGFjdGl2ZTogYW55W10pID0+IHtcbiAgICAgICAgdGhpcy5jaGFydENsaWNrLmVtaXQoeyBldmVudCwgYWN0aXZlIH0pO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdCBvcHRzID0ge1xuICAgICAgdHlwZTogdGhpcy5jaGFydFR5cGUsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGxhYmVsczogdGhpcy5sYWJlbHMsXG4gICAgICAgIGRhdGFzZXRzOiBkYXRhc2V0cyAgIC8vIFRPRE86IOWQjue7reabtOaUuei/meS4quWxnuaAp+WQjeWtl++8jOWQpuWImeitpuWRilxuICAgICAgfSxcbiAgICAgIG9wdGlvbnM6IG9wdGlvbnMsICAgLy8gVE9ETzog5ZCO57ut5pu05pS56L+Z5Liq5bGe5oCn5ZCN5a2X77yM5ZCm5YiZ6K2m5ZGKXG4gICAgICBwbHVnaW5zOiB0aGlzLmlubGluZVBsdWdpbnNcbiAgICB9O1xuXG4gICAgcmV0dXJuIG5ldyBDaGFydChjdHgsIG9wdHMpO1xuICB9XG5cbiAgLy8g6I635Y+WIGNoYXJ0Lmpz55qEZGF0YXNldHPmlbDmja5cbiAgcHJpdmF0ZSBnZXREYXRhc2V0cygpOiBhbnkge1xuICAgIGxldCBkYXRhc2V0czogYW55ID0gdm9pZCAwO1xuICAgIC8vIGluIGNhc2UgaWYgZGF0YXNldHMgaXMgbm90IHByb3ZpZGVkLCBidXQgZGF0YSBpcyBwcmVzZW50XG4gICAgaWYgKCF0aGlzLmRhdGFzZXRzIHx8ICF0aGlzLmRhdGFzZXRzLmxlbmd0aCAmJiAodGhpcy5kYXRhICYmIHRoaXMuZGF0YS5sZW5ndGgpKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLmRhdGFbMF0pKSB7XG4gICAgICAgIGRhdGFzZXRzID0gKHRoaXMuZGF0YSBhcyBudW1iZXJbXVtdKS5tYXAoKGRhdGE6IG51bWJlcltdLCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHsgZGF0YSwgbGFiZWw6IHRoaXMubGFiZWxzW2luZGV4XSB8fCBgTGFiZWwgJHtpbmRleH1gIH07XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YXNldHMgPSBbeyBkYXRhOiB0aGlzLmRhdGEsIGxhYmVsOiBgTGFiZWwgMGAgfV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZGF0YXNldHMgJiYgdGhpcy5kYXRhc2V0cy5sZW5ndGggfHxcbiAgICAgIChkYXRhc2V0cyAmJiBkYXRhc2V0cy5sZW5ndGgpKSB7XG4gICAgICBkYXRhc2V0cyA9ICh0aGlzLmRhdGFzZXRzIHx8IGRhdGFzZXRzKVxuICAgICAgICAubWFwKChlbG06IG51bWJlciwgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICAgIGNvbnN0IG5ld0VsbTogYW55ID0gT2JqZWN0LmFzc2lnbih7fSwgZWxtKTtcbiAgICAgICAgICBpZiAodGhpcy5jb2xvcnMgJiYgdGhpcy5jb2xvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKG5ld0VsbSwgdGhpcy5jb2xvcnNbaW5kZXhdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihuZXdFbG0sIGdldENvbG9ycyh0aGlzLmNoYXJ0VHlwZSwgaW5kZXgsIG5ld0VsbS5kYXRhLmxlbmd0aCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbmV3RWxtO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIWRhdGFzZXRzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYG5nLWNoYXJ0cyBjb25maWd1cmF0aW9uIGVycm9yLFxuICAgICAgZGF0YSBvciBkYXRhc2V0cyBmaWVsZCBhcmUgcmVxdWlyZWQgdG8gcmVuZGVyIGNoYXIgJHt0aGlzLmNoYXJ0VHlwZX1gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YXNldHM7XG4gIH1cbn1cbiJdfQ==