/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { NgChartjsDirective } from './ng-chartjs.directive';
import { NgChartjsDefaultPluginToken, NgChartjsCustomPluginToken } from './plugin-token';
import { PluginConfig } from './pluginsConfig';
/**
 * @param {?} plugins
 * @return {?}
 */
export function ngChartjsCustomPluginsFactory(plugins) {
    return new PluginConfig(plugins);
}
/**
 * @return {?}
 */
export function ngChartjsDefaultPluginsFactory() {
    return new PluginConfig([]);
}
var NgChartjsModule = /** @class */ (function () {
    function NgChartjsModule() {
    }
    /**
     * Register a plugin.
     * @param {?=} plugins
     * @return {?}
     */
    NgChartjsModule.registerPlugin = /**
     * Register a plugin.
     * @param {?=} plugins
     * @return {?}
     */
    function (plugins) {
        if (plugins === void 0) { plugins = []; }
        return {
            ngModule: NgChartjsModule,
            providers: [
                {
                    provide: NgChartjsDefaultPluginToken,
                    useValue: plugins
                },
                {
                    deps: [NgChartjsDefaultPluginToken],
                    provide: NgChartjsCustomPluginToken,
                    useFactory: ngChartjsCustomPluginsFactory
                }
            ]
        };
    };
    NgChartjsModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [NgChartjsDirective],
                    exports: [NgChartjsDirective],
                    providers: [
                        {
                            provide: NgChartjsCustomPluginToken,
                            useFactory: ngChartjsDefaultPluginsFactory
                        }
                    ]
                },] },
    ];
    return NgChartjsModule;
}());
export { NgChartjsModule };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctY2hhcnRqcy5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1jaGFydGpzLyIsInNvdXJjZXMiOlsibGliL25nLWNoYXJ0anMubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6RixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7Ozs7O0FBSS9DLE1BQU0sd0NBQXdDLE9BQWM7SUFDMUQsTUFBTSxDQUFDLElBQUksWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQ2xDOzs7O0FBRUQsTUFBTTtJQUNKLE1BQU0sQ0FBQyxJQUFJLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUM3Qjs7Ozs7Ozs7O0lBb0JlLDhCQUFjOzs7OztjQUFDLE9BQW1CO1FBQW5CLHdCQUFBLEVBQUEsWUFBbUI7UUFDOUMsTUFBTSxDQUFDO1lBQ0wsUUFBUSxFQUFFLGVBQWU7WUFDekIsU0FBUyxFQUFFO2dCQUNUO29CQUNFLE9BQU8sRUFBRSwyQkFBMkI7b0JBQ3BDLFFBQVEsRUFBRSxPQUFPO2lCQUNsQjtnQkFDRDtvQkFDRSxJQUFJLEVBQUUsQ0FBQywyQkFBMkIsQ0FBQztvQkFDbkMsT0FBTyxFQUFFLDBCQUEwQjtvQkFDbkMsVUFBVSxFQUFFLDZCQUE2QjtpQkFDMUM7YUFDRjtTQUNGLENBQUM7OztnQkEvQkwsUUFBUSxTQUFDO29CQUNSLE9BQU8sRUFBRSxFQUNSO29CQUNELFlBQVksRUFBRSxDQUFDLGtCQUFrQixDQUFDO29CQUNsQyxPQUFPLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQztvQkFDN0IsU0FBUyxFQUFFO3dCQUNUOzRCQUNFLE9BQU8sRUFBRSwwQkFBMEI7NEJBQ25DLFVBQVUsRUFBRSw4QkFBOEI7eUJBQzNDO3FCQUNGO2lCQUNGOzswQkEzQkQ7O1NBNEJhLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdDaGFydGpzRGlyZWN0aXZlIH0gZnJvbSAnLi9uZy1jaGFydGpzLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBOZ0NoYXJ0anNEZWZhdWx0UGx1Z2luVG9rZW4sIE5nQ2hhcnRqc0N1c3RvbVBsdWdpblRva2VuIH0gZnJvbSAnLi9wbHVnaW4tdG9rZW4nO1xuaW1wb3J0IHsgUGx1Z2luQ29uZmlnIH0gZnJvbSAnLi9wbHVnaW5zQ29uZmlnJztcbmltcG9ydCB7IE5nQ2hhcnRqc1NlcnZpY2UgfSBmcm9tICcuL25nLWNoYXJ0anMuc2VydmljZSc7XG5cblxuZXhwb3J0IGZ1bmN0aW9uIG5nQ2hhcnRqc0N1c3RvbVBsdWdpbnNGYWN0b3J5KHBsdWdpbnM6IGFueVtdKTogUGx1Z2luQ29uZmlnIHtcbiAgcmV0dXJuIG5ldyBQbHVnaW5Db25maWcocGx1Z2lucyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBuZ0NoYXJ0anNEZWZhdWx0UGx1Z2luc0ZhY3RvcnkoKTogUGx1Z2luQ29uZmlnIHtcbiAgcmV0dXJuIG5ldyBQbHVnaW5Db25maWcoW10pO1xufVxuXG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgXSxcbiAgZGVjbGFyYXRpb25zOiBbTmdDaGFydGpzRGlyZWN0aXZlXSxcbiAgZXhwb3J0czogW05nQ2hhcnRqc0RpcmVjdGl2ZV0sXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IE5nQ2hhcnRqc0N1c3RvbVBsdWdpblRva2VuLFxuICAgICAgdXNlRmFjdG9yeTogbmdDaGFydGpzRGVmYXVsdFBsdWdpbnNGYWN0b3J5XG4gICAgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIE5nQ2hhcnRqc01vZHVsZSB7XG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIHBsdWdpbi5cbiAgICogQHBhcmFtIHBsdWdpblxuICAgKi9cbiAgcHVibGljIHN0YXRpYyByZWdpc3RlclBsdWdpbihwbHVnaW5zOiBhbnlbXSA9IFtdKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBOZ0NoYXJ0anNNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IE5nQ2hhcnRqc0RlZmF1bHRQbHVnaW5Ub2tlbixcbiAgICAgICAgICB1c2VWYWx1ZTogcGx1Z2luc1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZGVwczogW05nQ2hhcnRqc0RlZmF1bHRQbHVnaW5Ub2tlbl0sXG4gICAgICAgICAgcHJvdmlkZTogTmdDaGFydGpzQ3VzdG9tUGx1Z2luVG9rZW4sXG4gICAgICAgICAgdXNlRmFjdG9yeTogbmdDaGFydGpzQ3VzdG9tUGx1Z2luc0ZhY3RvcnlcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH07XG4gIH1cbn1cbiJdfQ==