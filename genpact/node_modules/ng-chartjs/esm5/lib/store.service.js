/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
var StoreService = /** @class */ (function () {
    function StoreService() {
        this._chartInstances = [];
        this._chartId = [];
    }
    /**
     * @param {?} id
     * @param {?} chart
     * @return {?}
     */
    StoreService.prototype.addChart = /**
     * @param {?} id
     * @param {?} chart
     * @return {?}
     */
    function (id, chart) {
        for (var i = 0; i < this._chartId.length; i++) {
            if (id === this._chartId[i]) {
                return;
            }
        }
        this._chartId.push(id);
        this._chartInstances.push(chart);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    StoreService.prototype.removeChart = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        for (var i = 0; i < this._chartId.length; i++) {
            if (id === this._chartId[i]) {
                this._chartId.splice(i, 1);
                this._chartInstances.splice(i, 1); // delete chart instance.
            }
        }
    };
    /**
     * @param {?} id
     * @return {?}
     */
    StoreService.prototype.getChart = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        for (var i = 0; i < this._chartId.length; i++) {
            if (id === this._chartId[i]) {
                return this._chartInstances[i];
            }
        }
        return null;
    };
    /** @nocollapse */ StoreService.ngInjectableDef = i0.defineInjectable({ factory: function StoreService_Factory() { return new StoreService(); }, token: StoreService, providedIn: "root" });
StoreService.ɵfac = function StoreService_Factory(t) { return new (t || StoreService)(); };
StoreService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: StoreService, factory: function (t) { return StoreService.ɵfac(t); }, providedIn: 'root' });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StoreService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
    return StoreService;
}());
export { StoreService };
if (false) {
    /** @type {?} */
    StoreService.prototype._chartInstances;
    /** @type {?} */
    StoreService.prototype._chartId;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmUuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L25nLWNoYXJ0anMvbGliL3N0b3JlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0M7O0FBR0M7QUFFaUI7QUFDVCwrQkFEMEIsRUFBRTtBQUNyQyx3QkFBK0IsRUFBRTtBQUNqQztBQUNLO0FBQVE7QUFBcUI7QUFDbkI7QUFBbUI7QUFBUSxJQUR4QywrQkFBUTtBQUFPO0FBQXFCO0FBQ25CO0FBQW1CO0FBQVEsSUFENUMsVUFBUyxFQUFVLEVBQUUsS0FBVTtBQUFJLFFBQ2pDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztBQUNwRCxZQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNwQyxnQkFBUSxNQUFNLENBQUM7QUFDZixhQUFPO0FBQ1AsU0FBSztBQUNMLFFBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDM0IsUUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNyQyxLQUFHO0FBRUg7QUFBUTtBQUFxQjtBQUNmO0FBQVEsSUFEcEIsa0NBQVc7QUFBTztBQUNiO0FBQW1CO0FBQVEsSUFEaEMsVUFBWSxFQUFVO0FBQUksUUFDeEIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO0FBQ3BELFlBQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BDLGdCQUFRLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNuQyxnQkFBUSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFBMkIsYUFDOUQ7QUFDUCxTQUFLO0FBQ0wsS0FBRztBQUVIO0FBQVE7QUFBcUI7QUFDWDtBQUFRLElBRHhCLCtCQUFRO0FBQU87QUFDVDtBQUFtQjtBQUFRLElBRGpDLFVBQVMsRUFBVTtBQUFJLFFBQ3JCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztBQUNwRCxZQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNwQyxnQkFBUSxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2QyxhQUFPO0FBQ1AsU0FBSztBQUNMLFFBQUksTUFBTSxDQUFDLElBQUksQ0FBQztBQUNoQixLQUFHLENBOUJPO2dEQUhULFVBQVUsU0FBQyxzQkFDVixVQUFVLEVBQUUsTUFBTSxrQkFDbkIsN0hBQ1U7Ozs7Ozs7O2dEQU1QO0FBQUMsdUJBWEw7QUFBRTtBQUFNLFNBS0ssWUFBWTtBQUN4QjtBQUFhO0FBQXFCO0FBRy9CO0FBQXFCO0FBQ047O0FBVkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQU1BLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFqQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUpBLEFBS0EsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgU3RvcmVTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBfY2hhcnRJbnN0YW5jZXM6IGFueVtdID0gW107XG4gIHByaXZhdGUgX2NoYXJ0SWQ6IHN0cmluZ1tdID0gW107XG5cbiAgYWRkQ2hhcnQoaWQ6IHN0cmluZywgY2hhcnQ6IGFueSk6IHZvaWQge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fY2hhcnRJZC5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGlkID09PSB0aGlzLl9jaGFydElkW2ldKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fY2hhcnRJZC5wdXNoKGlkKTtcbiAgICB0aGlzLl9jaGFydEluc3RhbmNlcy5wdXNoKGNoYXJ0KTtcbiAgfVxuXG4gIHJlbW92ZUNoYXJ0KGlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2NoYXJ0SWQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChpZCA9PT0gdGhpcy5fY2hhcnRJZFtpXSkge1xuICAgICAgICB0aGlzLl9jaGFydElkLnNwbGljZShpLCAxKTtcbiAgICAgICAgdGhpcy5fY2hhcnRJbnN0YW5jZXMuc3BsaWNlKGksIDEpOyAgLy8gZGVsZXRlIGNoYXJ0IGluc3RhbmNlLlxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldENoYXJ0KGlkOiBzdHJpbmcpOiBhbnkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fY2hhcnRJZC5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGlkID09PSB0aGlzLl9jaGFydElkW2ldKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jaGFydEluc3RhbmNlc1tpXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbiJdfQ==