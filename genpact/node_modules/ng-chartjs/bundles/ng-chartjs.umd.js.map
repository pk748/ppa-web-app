{"version":3,"file":"ng-chartjs.umd.js.map","sources":["ng://ng-chartjs/lib/store.service.ts","ng://ng-chartjs/lib/plugin-token.ts","ng://ng-chartjs/lib/pluginsConfig.ts","ng://ng-chartjs/lib/ng-chartjs.service.ts","ng://ng-chartjs/lib/colors.ts","ng://ng-chartjs/lib/ng-chartjs.directive.ts","ng://ng-chartjs/lib/ng-chartjs.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StoreService {\n  private _chartInstances: any[] = [];\n  private _chartId: string[] = [];\n\n  addChart(id: string, chart: any): void {\n    for (let i = 0; i < this._chartId.length; i++) {\n      if (id === this._chartId[i]) {\n        return;\n      }\n    }\n    this._chartId.push(id);\n    this._chartInstances.push(chart);\n  }\n\n  removeChart(id: string): void {\n    for (let i = 0; i < this._chartId.length; i++) {\n      if (id === this._chartId[i]) {\n        this._chartId.splice(i, 1);\n        this._chartInstances.splice(i, 1);  // delete chart instance.\n      }\n    }\n  }\n\n  getChart(id: string): any {\n    for (let i = 0; i < this._chartId.length; i++) {\n      if (id === this._chartId[i]) {\n        return this._chartInstances[i];\n      }\n    }\n    return null;\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { PluginConfig } from './pluginsConfig';\n\nexport const NgChartjsDefaultPluginToken: InjectionToken<PluginConfig>\n    = new InjectionToken<PluginConfig>('[ngx-chart-js] Global Default Plugin');\n\nexport const NgChartjsCustomPluginToken: InjectionToken<PluginConfig>\n    = new InjectionToken<PluginConfig>('[ngx-chart-js] Global Custom Plugin');\n","export class PluginConfig {\n    private _plugins: any[];\n    constructor(plugins: any[] = []) {\n        this._plugins = plugins;\n    }\n\n    get plugins() {\n        return this._plugins;\n    }\n}\n","import { Injectable, Inject, forwardRef } from '@angular/core';\nimport { Chart } from 'chart.js';\nimport { NgChartjsCustomPluginToken } from './plugin-token';\nimport { PluginConfig } from './pluginsConfig';\nimport { StoreService } from './store.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgChartjsService {\n\n    private plugins: any[];\n\n    constructor(@Inject(forwardRef(() => NgChartjsCustomPluginToken)) private pluginConfig: PluginConfig,\n    private storeService: StoreService) {\n      this.plugins = pluginConfig.plugins;\n      if (this.plugins.length !== 0 || this.plugins) {\n        for (let i = 0; i < this.plugins.length; i++) {\n          if (this.plugins[i]) {\n            Chart.plugins.register(this.plugins[i]);\n          }\n        }\n      }\n    }\n    // get chart instance by id\n    getChart(id: string): any {\n      return this.storeService.getChart(id);\n    }\n}\n","export interface Color {\n    backgroundColor?: string | string[];\n    borderWidth?: number | number[];\n    borderColor?: string | string[];\n    borderCapStyle?: string;\n    borderDash?: number[];\n    borderDashOffset?: number;\n    borderJoinStyle?: string;\n\n    pointBorderColor?: string | string[];\n    pointBackgroundColor?: string | string[];\n    pointBorderWidth?: number | number[];\n\n    pointRadius?: number | number[];\n    pointHoverRadius?: number | number[];\n    pointHitRadius?: number | number[];\n\n    pointHoverBackgroundColor?: string | string[];\n    pointHoverBorderColor?: string | string[];\n    pointHoverBorderWidth?: number | number[];\n    pointStyle?: string | string[];\n\n    hoverBackgroundColor?: string | string[];\n    hoverBorderColor?: string | string[];\n    hoverBorderWidth?: number;\n}\n\n// Default colors\nexport const DefaultColors: number[][] = [\n    [63, 81, 181],       // Indogo\n    [233, 30, 99],       // Pink\n    [156, 39, 176],      // Purple\n    [0, 188, 212],       // Cyan\n    [3, 169, 244],       // Light Blue\n    [0, 150, 136],       // Teal\n    [255, 152, 0],       // Orange\n    [96, 125, 139],      // Blue Grey\n    [255, 193, 7],       // Amber\n    [37, 155, 36],       // Green\n    [205, 220, 57],      // Lime\n    [86, 119, 252]       // Blue\n];\n\n// pie | doughnut\nexport interface Colors extends Color {\n    data?: number[];\n    label?: string;\n}\n\nfunction rgba(colour: number[], alpha: number): string {\n    return 'rgba(' + colour.concat(alpha).join(',') + ')';\n}\n\nfunction getRandomInt(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction formatLineColor(colors: number[]): Color {\n    return {\n        backgroundColor: rgba(colors, 0.4),\n        borderColor: rgba(colors, 1),\n        pointBackgroundColor: rgba(colors, 1),\n        pointBorderColor: '#fff',\n        pointHoverBackgroundColor: '#fff',\n        pointHoverBorderColor: rgba(colors, 0.8)\n    };\n}\n\nfunction formatBarColor(colors: number[]): Color {\n    return {\n        backgroundColor: rgba(colors, 0.6),\n        borderColor: rgba(colors, 1),\n        hoverBackgroundColor: rgba(colors, 0.8),\n        hoverBorderColor: rgba(colors, 1)\n    };\n}\n\nfunction formatPieColors(colors: number[][]): Colors {\n    return {\n        backgroundColor: colors.map((color: number[]) => rgba(color, 0.6)),\n        borderColor: colors.map(() => '#fff'),\n        pointBackgroundColor: colors.map((color: number[]) => rgba(color, 1)),\n        pointBorderColor: colors.map(() => '#fff'),\n        pointHoverBackgroundColor: colors.map((color: number[]) => rgba(color, 1)),\n        pointHoverBorderColor: colors.map((color: number[]) => rgba(color, 1))\n    };\n}\n\nfunction formatPolarAreaColors(colors: number[][]): Color {\n    return {\n        backgroundColor: colors.map((color: number[]) => rgba(color, 0.6)),\n        borderColor: colors.map((color: number[]) => rgba(color, 1)),\n        hoverBackgroundColor: colors.map((color: number[]) => rgba(color, 0.8)),\n        hoverBorderColor: colors.map((color: number[]) => rgba(color, 1))\n    };\n}\n\nfunction getRandomColor(): number[] {\n    return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\n}\n\n// Generate colors for line|bar charts\nfunction generateColor(index: number): number[] {\n    return DefaultColors[index] || getRandomColor();\n}\n\n\n// Generate colors for pie|doughnut charts\nfunction generateColors(count: number): number[][] {\n    const colorsArr: number[][] = new Array(count);\n    for (let i = 0; i < count; i++) {\n        colorsArr[i] = DefaultColors[i] || getRandomColor();\n    }\n    return colorsArr;\n}\n\n// Generate colors by chart type\nexport function getColors(chartType: string, index: number, count: number): Color | number[] {\n    if (chartType === 'pie' || chartType === 'doughnut') {\n        return formatPieColors(generateColors(count));\n    }\n\n    if (chartType === 'polarArea') {\n        return formatPolarAreaColors(generateColors(count));\n    }\n\n    if (chartType === 'line' || chartType === 'radar') {\n        return formatLineColor(generateColor(index));\n    }\n\n    if (chartType === 'bar' || chartType === 'horizontalBar') {\n        return formatBarColor(generateColor(index));\n    }\n    return generateColor(index);\n}\n","import { StoreService } from './store.service';\nimport {\n  OnDestroy,\n  OnInit,\n  OnChanges,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Output,\n  SimpleChanges,\n  Directive\n} from '@angular/core';\nimport { Chart } from 'chart.js';\n\nimport { NgChartjsService } from './ng-chartjs.service';\nimport { getColors } from './colors';\n/* tslint:disable-next-line */\n@Directive({ selector: 'canvas[ngChartjs]', exportAs: 'ng-chart-js' })\nexport class NgChartjsDirective implements OnDestroy, OnChanges, OnInit {\n\n  // å¾è¡¨çç¹éï¼å®åºè¯¥æ¯æ°ç»<number []>ä»ç¨äºçº¿ï¼æ¡åé·è¾¾ï¼å¦åæ°å­[];\n  @Input() data: number[] | any[];\n  // ç¸å½äºchart.jså data: {datasets: [{...}]}\n  @Input() datasets: any[];\n  // xè½´æ ç­¾ãè¿å¯¹å¾è¡¨æ¥è¯´æ¯å¿è¦çï¼çº¿ï¼æ¡åé·è¾¾ãå¹¶ä¸åªæ¯å¾è¡¨çæ ç­¾ï¼æ¬åï¼ï¼polarAreaï¼pieådoughnut\n  @Input() labels: any[] = [];\n  // ç¸å½äºchart.jsçoption\n  @Input() options: any = {};\n  // åèæä»¶å±æ§\n  @Input() inlinePlugins: any[];\n  // chartType line, bar, radar, pie, polarArea, doughnut\n  @Input() chartType: string;\n  // æ°æ®é¢è²ï¼å¦ææ²¡ææå®ï¼å°ä½¿ç¨é»è®¤å|æéæºé¢è²\n  @Input() colors: any[];\n  // æ¯å¦æ¾ç¤ºå¾ä¾\n  @Input() legend: boolean;\n\n  @Input() adding: { labels: any[], data: any[][] };\n  @Input() removing: { orientation: string };  // orientation is 'oldest' or 'latest\n  @Input() resetOption: any;\n\n  // é¼ æ ç¹å»å¾è¡¨ææçåºå\n  @Output() chartClick: EventEmitter<any> = new EventEmitter();\n  // é¼ æ æ¬æµ®å¨æ ç­¾æèæ´»è·çç¹ä¸é¢æ¶\n  @Output() chartHover: EventEmitter<any> = new EventEmitter();\n\n  public ctx: any;\n  public chart: any;\n  private cvs: any;\n  private initFlag = false;\n  private hasChanges = false;\n\n  private element: ElementRef;\n\n  public constructor(element: ElementRef,\n    private ngChartjsService: NgChartjsService,\n    private storeService: StoreService) {\n    this.element = element;   // è·åæä»¤æå¨canvasåç´ \n  }\n\n  ngOnInit() {\n    this.ctx = this.element.nativeElement.getContext('2d'); // è·ååç´ çctx\n    this.cvs = this.element.nativeElement;  // è·åè¿ä¸ªåç´ \n    this.initFlag = true; // æ¯å¦åå§åäºçæ å¿\n\n    if (this.data || this.datasets) { // å¤æ­dataådatasetsæä¸ä¸ªææ°æ®å°±å·æ°\n      this.refresh();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // TODO: æä»¶ååå·æ°ï¼å¼æ¾å·æ°æé®\n    if (this.initFlag) {\n      // Check if the changes are in the data or datasets\n      if (changes.hasOwnProperty('data') || changes.hasOwnProperty('datasets')) {\n        if (changes.data) {\n          this.updateChartData(changes.data.currentValue);\n        } else {\n          this.updateChartData(changes.datasets.currentValue);\n        }\n        this.hasChanges = true;\n      }\n\n      if (changes.hasOwnProperty('labels')) {\n        this.chart.data.labels = changes.labels.currentValue;\n        this.hasChanges = true;\n      }\n\n      if (changes.hasOwnProperty('legend')) {\n        if (changes.legend.currentValue !== changes.legend.previousValue) {\n          this.chart.options.legend.display = changes.legend.currentValue;\n          this.hasChanges = true;\n        }\n      }\n\n      if (changes.hasOwnProperty('adding')) {\n        this.addData(changes.adding.currentValue.labels, changes.adding.currentValue.data);\n        this.hasChanges = true;\n      }\n\n      if (changes.hasOwnProperty('removing')) {\n        if (changes.removing.currentValue.orientation === 'oldest' || changes.removing.currentValue.orientation === 'latest') {\n          this.removeData(changes.removing.currentValue.orientation);\n          this.hasChanges = true;\n        }\n      }\n\n      if (changes.hasOwnProperty('resetOption')) {\n        Object.assign(this.chart.options, changes.resetOption.currentValue);\n        this.hasChanges = true;\n      }\n      // else {\n      //   // otherwise rebuild the chart\n      //   this.refresh();\n      // }\n      if (this.hasChanges) {\n        this.chart.update();\n        this.hasChanges = false;\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.chart) {\n      this.chart.destroy();\n      this.chart = void 0;\n\n      if (this.element.nativeElement.hasAttribute('id')) {\n        this.storeService.removeChart(this.element.nativeElement.id);  // delete chart instance.\n      }\n    }\n  }\n\n  private refresh(): any {\n    this.ngOnDestroy();\n    this.chart = this.getChartBuilder(this.ctx/*, data, this.options*/);\n    if (this.element.nativeElement.hasAttribute('id')) {\n      this.storeService.addChart(this.element.nativeElement.id, this.chart);\n    }\n  }\n\n  private addData(labels: any[], data: any[][]) {\n    if (labels.length === 0 || data.length === 0) {\n      return;\n    }\n    // update labels\n    labels.forEach((label) => { this.chart.data.labels.push(label); });\n\n    this.chart.data.datasets.forEach((dataset, index) => {\n      if (data[index]) {\n        for (let i = 0; i < data[index].length; i++) {\n          dataset.data.push(data[index][i]);\n        }\n      } else {\n        console.log('The added data does not match the original data');\n        return;\n      }\n    });\n  }\n  // direction is 'ildest' or 'latest'\n  private removeData(direction: string) {\n    if (direction === 'latest') {\n      this.chart.data.labels.pop();\n      this.chart.data.datasets.forEach((dataset) => {\n        dataset.data.pop();\n      });\n      return;\n    }\n    if (direction === 'oldest') {\n      return;\n    }\n  }\n  private updateChartData(newDataValues: number[] | any[]): void {\n    if (Array.isArray(newDataValues[0].data)) {\n      this.chart.data.datasets.forEach((dataset: any, i: number) => {\n        dataset.data = newDataValues[i].data;\n\n        if (newDataValues[i].label) {\n          dataset.label = newDataValues[i].label;\n        }\n      });\n    } else {\n      this.chart.data.datasets[0].data = newDataValues;\n    }\n  }\n\n  getChartBuilder(ctx: any/*, data:Array<any>, options:any*/): any {\n    const datasets: any = this.getDatasets();\n\n    const options: any = Object.assign({}, this.options); // æ·±å¤å¶options\n    if (this.legend === false) {  // è®¾ç½®optionsçlegend TODO: åç»­è¿ä¸ªå±æ§å»é¤ï¼ç´æ¥å¨optionsåè®¾ç½®\n      options.legend = { display: false };\n    }\n    // hock for onHover and onClick events\n    options.hover = options.hover || {};\n    if (!options.hover.onHover) {\n      options.hover.onHover = (active: any[]) => {\n        if (active && !active.length) {\n          return;\n        }\n        this.chartHover.emit({ active });\n      };\n    }\n\n    if (!options.onClick) {\n      options.onClick = (event: any, active: any[]) => {\n        this.chartClick.emit({ event, active });\n      };\n    }\n\n    const opts = {\n      type: this.chartType,\n      data: {\n        labels: this.labels,\n        datasets: datasets   // TODO: åç»­æ´æ¹è¿ä¸ªå±æ§åå­ï¼å¦åè­¦å\n      },\n      options: options,   // TODO: åç»­æ´æ¹è¿ä¸ªå±æ§åå­ï¼å¦åè­¦å\n      plugins: this.inlinePlugins\n    };\n\n    return new Chart(ctx, opts);\n  }\n\n  // è·å chart.jsçdatasetsæ°æ®\n  private getDatasets(): any {\n    let datasets: any = void 0;\n    // in case if datasets is not provided, but data is present\n    if (!this.datasets || !this.datasets.length && (this.data && this.data.length)) {\n      if (Array.isArray(this.data[0])) {\n        datasets = (this.data as number[][]).map((data: number[], index: number) => {\n          return { data, label: this.labels[index] || `Label ${index}` };\n        });\n      } else {\n        datasets = [{ data: this.data, label: `Label 0` }];\n      }\n    }\n\n    if (this.datasets && this.datasets.length ||\n      (datasets && datasets.length)) {\n      datasets = (this.datasets || datasets)\n        .map((elm: number, index: number) => {\n          const newElm: any = Object.assign({}, elm);\n          if (this.colors && this.colors.length) {\n            Object.assign(newElm, this.colors[index]);\n          } else {\n            Object.assign(newElm, getColors(this.chartType, index, newElm.data.length));\n          }\n          return newElm;\n        });\n    }\n\n    if (!datasets) {\n      throw new Error(`ng-charts configuration error,\n      data or datasets field are required to render char ${this.chartType}`);\n    }\n\n    return datasets;\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { NgChartjsDirective } from './ng-chartjs.directive';\nimport { NgChartjsDefaultPluginToken, NgChartjsCustomPluginToken } from './plugin-token';\nimport { PluginConfig } from './pluginsConfig';\nimport { NgChartjsService } from './ng-chartjs.service';\n\n\nexport function ngChartjsCustomPluginsFactory(plugins: any[]): PluginConfig {\n  return new PluginConfig(plugins);\n}\n\nexport function ngChartjsDefaultPluginsFactory(): PluginConfig {\n  return new PluginConfig([]);\n}\n\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [NgChartjsDirective],\n  exports: [NgChartjsDirective],\n  providers: [\n    {\n      provide: NgChartjsCustomPluginToken,\n      useFactory: ngChartjsDefaultPluginsFactory\n    }\n  ]\n})\nexport class NgChartjsModule {\n  /**\n   * Register a plugin.\n   * @param plugin\n   */\n  public static registerPlugin(plugins: any[] = []): ModuleWithProviders {\n    return {\n      ngModule: NgChartjsModule,\n      providers: [\n        {\n          provide: NgChartjsDefaultPluginToken,\n          useValue: plugins\n        },\n        {\n          deps: [NgChartjsDefaultPluginToken],\n          provide: NgChartjsCustomPluginToken,\n          useFactory: ngChartjsCustomPluginsFactory\n        }\n      ]\n    };\n  }\n}\n"],"names":["Injectable","InjectionToken","Chart","Inject","forwardRef","EventEmitter","Directive","ElementRef","Input","Output","NgModule"],"mappings":"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"}
