(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('chart.js')) :
    typeof define === 'function' && define.amd ? define('ng-chartjs', ['exports', '@angular/core', 'chart.js'], factory) :
    (factory((global['ng-chartjs'] = {}),global.ng.core,null));
}(this, (function (exports,i0,chart_js) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var StoreService = (function () {
        function StoreService() {
            this._chartInstances = [];
            this._chartId = [];
        }
        /**
         * @param {?} id
         * @param {?} chart
         * @return {?}
         */
        StoreService.prototype.addChart = /**
         * @param {?} id
         * @param {?} chart
         * @return {?}
         */
            function (id, chart) {
                for (var i = 0; i < this._chartId.length; i++) {
                    if (id === this._chartId[i]) {
                        return;
                    }
                }
                this._chartId.push(id);
                this._chartInstances.push(chart);
            };
        /**
         * @param {?} id
         * @return {?}
         */
        StoreService.prototype.removeChart = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                for (var i = 0; i < this._chartId.length; i++) {
                    if (id === this._chartId[i]) {
                        this._chartId.splice(i, 1);
                        this._chartInstances.splice(i, 1); // delete chart instance.
                    }
                }
            };
        /**
         * @param {?} id
         * @return {?}
         */
        StoreService.prototype.getChart = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                for (var i = 0; i < this._chartId.length; i++) {
                    if (id === this._chartId[i]) {
                        return this._chartInstances[i];
                    }
                }
                return null;
            };
        StoreService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] },
        ];
        /** @nocollapse */ StoreService.ngInjectableDef = i0.defineInjectable({ factory: function StoreService_Factory() { return new StoreService(); }, token: StoreService, providedIn: "root" });
        return StoreService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var NgChartjsDefaultPluginToken = new i0.InjectionToken('[ngx-chart-js] Global Default Plugin');
    /** @type {?} */
    var NgChartjsCustomPluginToken = new i0.InjectionToken('[ngx-chart-js] Global Custom Plugin');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var PluginConfig = (function () {
        function PluginConfig(plugins) {
            if (plugins === void 0) {
                plugins = [];
            }
            this._plugins = plugins;
        }
        Object.defineProperty(PluginConfig.prototype, "plugins", {
            get: /**
             * @return {?}
             */ function () {
                return this._plugins;
            },
            enumerable: true,
            configurable: true
        });
        return PluginConfig;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgChartjsService = (function () {
        function NgChartjsService(pluginConfig, storeService) {
            this.pluginConfig = pluginConfig;
            this.storeService = storeService;
            this.plugins = pluginConfig.plugins;
            if (this.plugins.length !== 0 || this.plugins) {
                for (var i = 0; i < this.plugins.length; i++) {
                    if (this.plugins[i]) {
                        chart_js.Chart.plugins.register(this.plugins[i]);
                    }
                }
            }
        }
        // get chart instance by id
        /**
         * @param {?} id
         * @return {?}
         */
        NgChartjsService.prototype.getChart = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                return this.storeService.getChart(id);
            };
        NgChartjsService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] },
        ];
        /** @nocollapse */
        NgChartjsService.ctorParameters = function () {
            return [
                { type: PluginConfig, decorators: [{ type: i0.Inject, args: [i0.forwardRef(function () { return NgChartjsCustomPluginToken; }),] }] },
                { type: StoreService }
            ];
        };
        /** @nocollapse */ NgChartjsService.ngInjectableDef = i0.defineInjectable({ factory: function NgChartjsService_Factory() { return new NgChartjsService(i0.inject(NgChartjsCustomPluginToken), i0.inject(StoreService)); }, token: NgChartjsService, providedIn: "root" });
        return NgChartjsService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DefaultColors = [
        [63, 81, 181],
        // Indogo
        [233, 30, 99],
        // Pink
        [156, 39, 176],
        // Purple
        [0, 188, 212],
        // Cyan
        [3, 169, 244],
        // Light Blue
        [0, 150, 136],
        // Teal
        [255, 152, 0],
        // Orange
        [96, 125, 139],
        // Blue Grey
        [255, 193, 7],
        // Amber
        [37, 155, 36],
        // Green
        [205, 220, 57],
        // Lime
        [86, 119, 252] // Blue
    ];
    /**
     * @param {?} colour
     * @param {?} alpha
     * @return {?}
     */
    function rgba(colour, alpha) {
        return 'rgba(' + colour.concat(alpha).join(',') + ')';
    }
    /**
     * @param {?} min
     * @param {?} max
     * @return {?}
     */
    function getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }
    /**
     * @param {?} colors
     * @return {?}
     */
    function formatLineColor(colors) {
        return {
            backgroundColor: rgba(colors, 0.4),
            borderColor: rgba(colors, 1),
            pointBackgroundColor: rgba(colors, 1),
            pointBorderColor: '#fff',
            pointHoverBackgroundColor: '#fff',
            pointHoverBorderColor: rgba(colors, 0.8)
        };
    }
    /**
     * @param {?} colors
     * @return {?}
     */
    function formatBarColor(colors) {
        return {
            backgroundColor: rgba(colors, 0.6),
            borderColor: rgba(colors, 1),
            hoverBackgroundColor: rgba(colors, 0.8),
            hoverBorderColor: rgba(colors, 1)
        };
    }
    /**
     * @param {?} colors
     * @return {?}
     */
    function formatPieColors(colors) {
        return {
            backgroundColor: colors.map(function (color) { return rgba(color, 0.6); }),
            borderColor: colors.map(function () { return '#fff'; }),
            pointBackgroundColor: colors.map(function (color) { return rgba(color, 1); }),
            pointBorderColor: colors.map(function () { return '#fff'; }),
            pointHoverBackgroundColor: colors.map(function (color) { return rgba(color, 1); }),
            pointHoverBorderColor: colors.map(function (color) { return rgba(color, 1); })
        };
    }
    /**
     * @param {?} colors
     * @return {?}
     */
    function formatPolarAreaColors(colors) {
        return {
            backgroundColor: colors.map(function (color) { return rgba(color, 0.6); }),
            borderColor: colors.map(function (color) { return rgba(color, 1); }),
            hoverBackgroundColor: colors.map(function (color) { return rgba(color, 0.8); }),
            hoverBorderColor: colors.map(function (color) { return rgba(color, 1); })
        };
    }
    /**
     * @return {?}
     */
    function getRandomColor() {
        return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];
    }
    /**
     * @param {?} index
     * @return {?}
     */
    function generateColor(index) {
        return DefaultColors[index] || getRandomColor();
    }
    /**
     * @param {?} count
     * @return {?}
     */
    function generateColors(count) {
        /** @type {?} */
        var colorsArr = new Array(count);
        for (var i = 0; i < count; i++) {
            colorsArr[i] = DefaultColors[i] || getRandomColor();
        }
        return colorsArr;
    }
    /**
     * @param {?} chartType
     * @param {?} index
     * @param {?} count
     * @return {?}
     */
    function getColors(chartType, index, count) {
        if (chartType === 'pie' || chartType === 'doughnut') {
            return formatPieColors(generateColors(count));
        }
        if (chartType === 'polarArea') {
            return formatPolarAreaColors(generateColors(count));
        }
        if (chartType === 'line' || chartType === 'radar') {
            return formatLineColor(generateColor(index));
        }
        if (chartType === 'bar' || chartType === 'horizontalBar') {
            return formatBarColor(generateColor(index));
        }
        return generateColor(index);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgChartjsDirective = (function () {
        function NgChartjsDirective(element, ngChartjsService, storeService) {
            this.ngChartjsService = ngChartjsService;
            this.storeService = storeService;
            // x轴标签。这对图表来说是必要的：线，条和雷达。并且只是图表的标签（悬停）：polarArea，pie和doughnut
            this.labels = [];
            // 相当于chart.js的option
            this.options = {};
            // 鼠标点击图表所有的区域
            this.chartClick = new i0.EventEmitter();
            // 鼠标悬浮在标签或者活跃的点上面时
            this.chartHover = new i0.EventEmitter();
            this.initFlag = false;
            this.hasChanges = false;
            this.element = element; // 获取指令所在canvas元素
        }
        /**
         * @return {?}
         */
        NgChartjsDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.ctx = this.element.nativeElement.getContext('2d'); // 获取元素的ctx
                this.cvs = this.element.nativeElement; // 获取这个元素
                this.initFlag = true; // 是否初始化了的标志
                if (this.data || this.datasets) {
                    // 判断data和datasets有一个有数据就刷新
                    this.refresh();
                }
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        NgChartjsDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                // TODO: 插件变化刷新，开放刷新按钮
                if (this.initFlag) {
                    // Check if the changes are in the data or datasets
                    if (changes.hasOwnProperty('data') || changes.hasOwnProperty('datasets')) {
                        if (changes["data"]) {
                            this.updateChartData(changes["data"].currentValue);
                        }
                        else {
                            this.updateChartData(changes["datasets"].currentValue);
                        }
                        this.hasChanges = true;
                    }
                    if (changes.hasOwnProperty('labels')) {
                        this.chart.data.labels = changes["labels"].currentValue;
                        this.hasChanges = true;
                    }
                    if (changes.hasOwnProperty('legend')) {
                        if (changes["legend"].currentValue !== changes["legend"].previousValue) {
                            this.chart.options.legend.display = changes["legend"].currentValue;
                            this.hasChanges = true;
                        }
                    }
                    if (changes.hasOwnProperty('adding')) {
                        this.addData(changes["adding"].currentValue.labels, changes["adding"].currentValue.data);
                        this.hasChanges = true;
                    }
                    if (changes.hasOwnProperty('removing')) {
                        if (changes["removing"].currentValue.orientation === 'oldest' || changes["removing"].currentValue.orientation === 'latest') {
                            this.removeData(changes["removing"].currentValue.orientation);
                            this.hasChanges = true;
                        }
                    }
                    if (changes.hasOwnProperty('resetOption')) {
                        Object.assign(this.chart.options, changes["resetOption"].currentValue);
                        this.hasChanges = true;
                    }
                    // else {
                    //   // otherwise rebuild the chart
                    //   this.refresh();
                    // }
                    if (this.hasChanges) {
                        this.chart.update();
                        this.hasChanges = false;
                    }
                }
            };
        /**
         * @return {?}
         */
        NgChartjsDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.chart) {
                    this.chart.destroy();
                    this.chart = void 0;
                    if (this.element.nativeElement.hasAttribute('id')) {
                        this.storeService.removeChart(this.element.nativeElement.id); // delete chart instance.
                    }
                }
            };
        /**
         * @return {?}
         */
        NgChartjsDirective.prototype.refresh = /**
         * @return {?}
         */
            function () {
                this.ngOnDestroy();
                this.chart = this.getChartBuilder(this.ctx /*, data, this.options*/);
                if (this.element.nativeElement.hasAttribute('id')) {
                    this.storeService.addChart(this.element.nativeElement.id, this.chart);
                }
            };
        /**
         * @param {?} labels
         * @param {?} data
         * @return {?}
         */
        NgChartjsDirective.prototype.addData = /**
         * @param {?} labels
         * @param {?} data
         * @return {?}
         */
            function (labels, data) {
                var _this = this;
                if (labels.length === 0 || data.length === 0) {
                    return;
                }
                // update labels
                labels.forEach(function (label) { _this.chart.data.labels.push(label); });
                this.chart.data.datasets.forEach(function (dataset, index) {
                    if (data[index]) {
                        for (var i = 0; i < data[index].length; i++) {
                            dataset.data.push(data[index][i]);
                        }
                    }
                    else {
                        console.log('The added data does not match the original data');
                        return;
                    }
                });
            };
        /**
         * @param {?} direction
         * @return {?}
         */
        NgChartjsDirective.prototype.removeData = /**
         * @param {?} direction
         * @return {?}
         */
            function (direction) {
                if (direction === 'latest') {
                    this.chart.data.labels.pop();
                    this.chart.data.datasets.forEach(function (dataset) {
                        dataset.data.pop();
                    });
                    return;
                }
                if (direction === 'oldest') {
                    return;
                }
            };
        /**
         * @param {?} newDataValues
         * @return {?}
         */
        NgChartjsDirective.prototype.updateChartData = /**
         * @param {?} newDataValues
         * @return {?}
         */
            function (newDataValues) {
                if (Array.isArray(newDataValues[0].data)) {
                    this.chart.data.datasets.forEach(function (dataset, i) {
                        dataset.data = newDataValues[i].data;
                        if (newDataValues[i].label) {
                            dataset.label = newDataValues[i].label;
                        }
                    });
                }
                else {
                    this.chart.data.datasets[0].data = newDataValues;
                }
            };
        /**
         * @param {?} ctx
         * @return {?}
         */
        NgChartjsDirective.prototype.getChartBuilder = /**
         * @param {?} ctx
         * @return {?}
         */
            function (ctx /*, data:Array<any>, options:any*/) {
                var _this = this;
                /** @type {?} */
                var datasets = this.getDatasets();
                /** @type {?} */
                var options = Object.assign({}, this.options); // 深复制options
                if (this.legend === false) {
                    // 设置options的legend TODO: 后续这个属性去除，直接在options内设置
                    options.legend = { display: false };
                }
                // hock for onHover and onClick events
                options.hover = options.hover || {};
                if (!options.hover.onHover) {
                    options.hover.onHover = function (active) {
                        if (active && !active.length) {
                            return;
                        }
                        _this.chartHover.emit({ active: active });
                    };
                }
                if (!options.onClick) {
                    options.onClick = function (event, active) {
                        _this.chartClick.emit({ event: event, active: active });
                    };
                }
                /** @type {?} */
                var opts = {
                    type: this.chartType,
                    data: {
                        labels: this.labels,
                        datasets: datasets // TODO: 后续更改这个属性名字，否则警告
                    },
                    options: options,
                    // TODO: 后续更改这个属性名字，否则警告
                    plugins: this.inlinePlugins
                };
                return new chart_js.Chart(ctx, opts);
            };
        /**
         * @return {?}
         */
        NgChartjsDirective.prototype.getDatasets = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var datasets = void 0;
                // in case if datasets is not provided, but data is present
                if (!this.datasets || !this.datasets.length && (this.data && this.data.length)) {
                    if (Array.isArray(this.data[0])) {
                        datasets = ((this.data)).map(function (data, index) {
                            return { data: data, label: _this.labels[index] || "Label " + index };
                        });
                    }
                    else {
                        datasets = [{ data: this.data, label: "Label 0" }];
                    }
                }
                if (this.datasets && this.datasets.length ||
                    (datasets && datasets.length)) {
                    datasets = (this.datasets || datasets)
                        .map(function (elm, index) {
                        /** @type {?} */
                        var newElm = Object.assign({}, elm);
                        if (_this.colors && _this.colors.length) {
                            Object.assign(newElm, _this.colors[index]);
                        }
                        else {
                            Object.assign(newElm, getColors(_this.chartType, index, newElm.data.length));
                        }
                        return newElm;
                    });
                }
                if (!datasets) {
                    throw new Error("ng-charts configuration error,\n      data or datasets field are required to render char " + this.chartType);
                }
                return datasets;
            };
        NgChartjsDirective.decorators = [
            { type: i0.Directive, args: [{ selector: 'canvas[ngChartjs]', exportAs: 'ng-chart-js' },] },
        ];
        /** @nocollapse */
        NgChartjsDirective.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: NgChartjsService },
                { type: StoreService }
            ];
        };
        NgChartjsDirective.propDecorators = {
            data: [{ type: i0.Input }],
            datasets: [{ type: i0.Input }],
            labels: [{ type: i0.Input }],
            options: [{ type: i0.Input }],
            inlinePlugins: [{ type: i0.Input }],
            chartType: [{ type: i0.Input }],
            colors: [{ type: i0.Input }],
            legend: [{ type: i0.Input }],
            adding: [{ type: i0.Input }],
            removing: [{ type: i0.Input }],
            resetOption: [{ type: i0.Input }],
            chartClick: [{ type: i0.Output }],
            chartHover: [{ type: i0.Output }]
        };
        return NgChartjsDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @param {?} plugins
     * @return {?}
     */
    function ngChartjsCustomPluginsFactory(plugins) {
        return new PluginConfig(plugins);
    }
    /**
     * @return {?}
     */
    function ngChartjsDefaultPluginsFactory() {
        return new PluginConfig([]);
    }
    var NgChartjsModule = (function () {
        function NgChartjsModule() {
        }
        /**
         * Register a plugin.
         * @param {?=} plugins
         * @return {?}
         */
        NgChartjsModule.registerPlugin = /**
         * Register a plugin.
         * @param {?=} plugins
         * @return {?}
         */
            function (plugins) {
                if (plugins === void 0) {
                    plugins = [];
                }
                return {
                    ngModule: NgChartjsModule,
                    providers: [
                        {
                            provide: NgChartjsDefaultPluginToken,
                            useValue: plugins
                        },
                        {
                            deps: [NgChartjsDefaultPluginToken],
                            provide: NgChartjsCustomPluginToken,
                            useFactory: ngChartjsCustomPluginsFactory
                        }
                    ]
                };
            };
        NgChartjsModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [],
                        declarations: [NgChartjsDirective],
                        exports: [NgChartjsDirective],
                        providers: [
                            {
                                provide: NgChartjsCustomPluginToken,
                                useFactory: ngChartjsDefaultPluginsFactory
                            }
                        ]
                    },] },
        ];
        return NgChartjsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.NgChartjsDirective = NgChartjsDirective;
    exports.ngChartjsCustomPluginsFactory = ngChartjsCustomPluginsFactory;
    exports.ngChartjsDefaultPluginsFactory = ngChartjsDefaultPluginsFactory;
    exports.NgChartjsModule = NgChartjsModule;
    exports.NgChartjsService = NgChartjsService;
    exports.ɵb = NgChartjsCustomPluginToken;
    exports.ɵa = NgChartjsDefaultPluginToken;
    exports.ɵc = PluginConfig;
    exports.ɵd = StoreService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,