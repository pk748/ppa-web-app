{"version":3,"sources":["ng://ng-chartjs/lib/store.service.ts","ng://ng-chartjs/lib/plugin-token.ts","ng://ng-chartjs/lib/pluginsConfig.ts","ng://ng-chartjs/lib/ng-chartjs.service.ts","ng://ng-chartjs/lib/colors.ts","ng://ng-chartjs/lib/ng-chartjs.directive.ts","ng://ng-chartjs/lib/ng-chartjs.module.ts"],"names":["StoreService","prototype","addChart","id","chart","i","this","_chartId","length","push","_chartInstances","removeChart","splice","getChart","Injectable","args","providedIn","NgChartjsDefaultPluginToken","InjectionToken","NgChartjsCustomPluginToken","PluginConfig","plugins","_plugins","Object","defineProperty","NgChartjsService","pluginConfig","storeService","Chart","register","decorators","type","Inject","forwardRef","DefaultColors","rgba","colour","alpha","concat","join","getRandomInt","min","max","Math","floor","random","getRandomColor","generateColor","index","generateColors","count","colorsArr","Array","getColors","chartType","formatPieColors","colors","backgroundColor","map","color","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","formatPolarAreaColors","hoverBackgroundColor","hoverBorderColor","formatLineColor","formatBarColor","NgChartjsDirective","element","ngChartjsService","EventEmitter","ngOnInit","ctx","nativeElement","getContext","cvs","initFlag","data","datasets","refresh","ngOnChanges","changes","hasOwnProperty","updateChartData","currentValue","hasChanges","labels","previousValue","options","legend","display","addData","orientation","removeData","assign","update","ngOnDestroy","destroy","hasAttribute","getChartBuilder","forEach","label","_this","dataset","console","log","direction","pop","newDataValues","isArray","getDatasets","hover","onHover","active","chartHover","emit","onClick","event","chartClick","opts","inlinePlugins","elm","newElm","Error","Directive","selector","exportAs","ElementRef","Input","Output","ngChartjsCustomPluginsFactory","ngChartjsDefaultPluginsFactory","NgChartjsModule","registerPlugin","ngModule","providers","provide","useValue","deps","useFactory","NgModule","imports","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StoreService {\n  private _chartInstances: any[] = [];\n  private _chartId: string[] = [];\n\n  addChart(id: string, chart: any): void {\n    for (let i = 0; i < this._chartId.length; i++) {\n      if (id === this._chartId[i]) {\n        return;\n      }\n    }\n    this._chartId.push(id);\n    this._chartInstances.push(chart);\n  }\n\n  removeChart(id: string): void {\n    for (let i = 0; i < this._chartId.length; i++) {\n      if (id === this._chartId[i]) {\n        this._chartId.splice(i, 1);\n        this._chartInstances.splice(i, 1);  // delete chart instance.\n      }\n    }\n  }\n\n  getChart(id: string): any {\n    for (let i = 0; i < this._chartId.length; i++) {\n      if (id === this._chartId[i]) {\n        return this._chartInstances[i];\n      }\n    }\n    return null;\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { PluginConfig } from './pluginsConfig';\n\nexport const NgChartjsDefaultPluginToken: InjectionToken<PluginConfig>\n    = new InjectionToken<PluginConfig>('[ngx-chart-js] Global Default Plugin');\n\nexport const NgChartjsCustomPluginToken: InjectionToken<PluginConfig>\n    = new InjectionToken<PluginConfig>('[ngx-chart-js] Global Custom Plugin');\n","export class PluginConfig {\n    private _plugins: any[];\n    constructor(plugins: any[] = []) {\n        this._plugins = plugins;\n    }\n\n    get plugins() {\n        return this._plugins;\n    }\n}\n","import { Injectable, Inject, forwardRef } from '@angular/core';\nimport { Chart } from 'chart.js';\nimport { NgChartjsCustomPluginToken } from './plugin-token';\nimport { PluginConfig } from './pluginsConfig';\nimport { StoreService } from './store.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgChartjsService {\n\n    private plugins: any[];\n\n    constructor(@Inject(forwardRef(() => NgChartjsCustomPluginToken)) private pluginConfig: PluginConfig,\n    private storeService: StoreService) {\n      this.plugins = pluginConfig.plugins;\n      if (this.plugins.length !== 0 || this.plugins) {\n        for (let i = 0; i < this.plugins.length; i++) {\n          if (this.plugins[i]) {\n            Chart.plugins.register(this.plugins[i]);\n          }\n        }\n      }\n    }\n    // get chart instance by id\n    getChart(id: string): any {\n      return this.storeService.getChart(id);\n    }\n}\n","export interface Color {\n    backgroundColor?: string | string[];\n    borderWidth?: number | number[];\n    borderColor?: string | string[];\n    borderCapStyle?: string;\n    borderDash?: number[];\n    borderDashOffset?: number;\n    borderJoinStyle?: string;\n\n    pointBorderColor?: string | string[];\n    pointBackgroundColor?: string | string[];\n    pointBorderWidth?: number | number[];\n\n    pointRadius?: number | number[];\n    pointHoverRadius?: number | number[];\n    pointHitRadius?: number | number[];\n\n    pointHoverBackgroundColor?: string | string[];\n    pointHoverBorderColor?: string | string[];\n    pointHoverBorderWidth?: number | number[];\n    pointStyle?: string | string[];\n\n    hoverBackgroundColor?: string | string[];\n    hoverBorderColor?: string | string[];\n    hoverBorderWidth?: number;\n}\n\n// Default colors\nexport const DefaultColors: number[][] = [\n    [63, 81, 181],       // Indogo\n    [233, 30, 99],       // Pink\n    [156, 39, 176],      // Purple\n    [0, 188, 212],       // Cyan\n    [3, 169, 244],       // Light Blue\n    [0, 150, 136],       // Teal\n    [255, 152, 0],       // Orange\n    [96, 125, 139],      // Blue Grey\n    [255, 193, 7],       // Amber\n    [37, 155, 36],       // Green\n    [205, 220, 57],      // Lime\n    [86, 119, 252]       // Blue\n];\n\n// pie | doughnut\nexport interface Colors extends Color {\n    data?: number[];\n    label?: string;\n}\n\nfunction rgba(colour: number[], alpha: number): string {\n    return 'rgba(' + colour.concat(alpha).join(',') + ')';\n}\n\nfunction getRandomInt(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction formatLineColor(colors: number[]): Color {\n    return {\n        backgroundColor: rgba(colors, 0.4),\n        borderColor: rgba(colors, 1),\n        pointBackgroundColor: rgba(colors, 1),\n        pointBorderColor: '#fff',\n        pointHoverBackgroundColor: '#fff',\n        pointHoverBorderColor: rgba(colors, 0.8)\n    };\n}\n\nfunction formatBarColor(colors: number[]): Color {\n    return {\n        backgroundColor: rgba(colors, 0.6),\n        borderColor: rgba(colors, 1),\n        hoverBackgroundColor: rgba(colors, 0.8),\n        hoverBorderColor: rgba(colors, 1)\n    };\n}\n\nfunction formatPieColors(colors: number[][]): Colors {\n    return {\n        backgroundColor: colors.map((color: number[]) => rgba(color, 0.6)),\n        borderColor: colors.map(() => '#fff'),\n        pointBackgroundColor: colors.map((color: number[]) => rgba(color, 1)),\n        pointBorderColor: colors.map(() => '#fff'),\n        pointHoverBackgroundColor: colors.map((color: number[]) => rgba(color, 1)),\n        pointHoverBorderColor: colors.map((color: number[]) => rgba(color, 1))\n    };\n}\n\nfunction formatPolarAreaColors(colors: number[][]): Color {\n    return {\n        backgroundColor: colors.map((color: number[]) => rgba(color, 0.6)),\n        borderColor: colors.map((color: number[]) => rgba(color, 1)),\n        hoverBackgroundColor: colors.map((color: number[]) => rgba(color, 0.8)),\n        hoverBorderColor: colors.map((color: number[]) => rgba(color, 1))\n    };\n}\n\nfunction getRandomColor(): number[] {\n    return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\n}\n\n// Generate colors for line|bar charts\nfunction generateColor(index: number): number[] {\n    return DefaultColors[index] || getRandomColor();\n}\n\n\n// Generate colors for pie|doughnut charts\nfunction generateColors(count: number): number[][] {\n    const colorsArr: number[][] = new Array(count);\n    for (let i = 0; i < count; i++) {\n        colorsArr[i] = DefaultColors[i] || getRandomColor();\n    }\n    return colorsArr;\n}\n\n// Generate colors by chart type\nexport function getColors(chartType: string, index: number, count: number): Color | number[] {\n    if (chartType === 'pie' || chartType === 'doughnut') {\n        return formatPieColors(generateColors(count));\n    }\n\n    if (chartType === 'polarArea') {\n        return formatPolarAreaColors(generateColors(count));\n    }\n\n    if (chartType === 'line' || chartType === 'radar') {\n        return formatLineColor(generateColor(index));\n    }\n\n    if (chartType === 'bar' || chartType === 'horizontalBar') {\n        return formatBarColor(generateColor(index));\n    }\n    return generateColor(index);\n}\n","import { StoreService } from './store.service';\nimport {\n  OnDestroy,\n  OnInit,\n  OnChanges,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Output,\n  SimpleChanges,\n  Directive\n} from '@angular/core';\nimport { Chart } from 'chart.js';\n\nimport { NgChartjsService } from './ng-chartjs.service';\nimport { getColors } from './colors';\n/* tslint:disable-next-line */\n@Directive({ selector: 'canvas[ngChartjs]', exportAs: 'ng-chart-js' })\nexport class NgChartjsDirective implements OnDestroy, OnChanges, OnInit {\n\n  // å¾è¡¨çç¹éï¼å®åºè¯¥æ¯æ°ç»<number []>ä»ç¨äºçº¿ï¼æ¡åé·è¾¾ï¼å¦åæ°å­[];\n  @Input() data: number[] | any[];\n  // ç¸å½äºchart.jså data: {datasets: [{...}]}\n  @Input() datasets: any[];\n  // xè½´æ ç­¾ãè¿å¯¹å¾è¡¨æ¥è¯´æ¯å¿è¦çï¼çº¿ï¼æ¡åé·è¾¾ãå¹¶ä¸åªæ¯å¾è¡¨çæ ç­¾ï¼æ¬åï¼ï¼polarAreaï¼pieådoughnut\n  @Input() labels: any[] = [];\n  // ç¸å½äºchart.jsçoption\n  @Input() options: any = {};\n  // åèæä»¶å±æ§\n  @Input() inlinePlugins: any[];\n  // chartType line, bar, radar, pie, polarArea, doughnut\n  @Input() chartType: string;\n  // æ°æ®é¢è²ï¼å¦ææ²¡ææå®ï¼å°ä½¿ç¨é»è®¤å|æéæºé¢è²\n  @Input() colors: any[];\n  // æ¯å¦æ¾ç¤ºå¾ä¾\n  @Input() legend: boolean;\n\n  @Input() adding: { labels: any[], data: any[][] };\n  @Input() removing: { orientation: string };  // orientation is 'oldest' or 'latest\n  @Input() resetOption: any;\n\n  // é¼ æ ç¹å»å¾è¡¨ææçåºå\n  @Output() chartClick: EventEmitter<any> = new EventEmitter();\n  // é¼ æ æ¬æµ®å¨æ ç­¾æèæ´»è·çç¹ä¸é¢æ¶\n  @Output() chartHover: EventEmitter<any> = new EventEmitter();\n\n  public ctx: any;\n  public chart: any;\n  private cvs: any;\n  private initFlag = false;\n  private hasChanges = false;\n\n  private element: ElementRef;\n\n  public constructor(element: ElementRef,\n    private ngChartjsService: NgChartjsService,\n    private storeService: StoreService) {\n    this.element = element;   // è·åæä»¤æå¨canvasåç´ \n  }\n\n  ngOnInit() {\n    this.ctx = this.element.nativeElement.getContext('2d'); // è·ååç´ çctx\n    this.cvs = this.element.nativeElement;  // è·åè¿ä¸ªåç´ \n    this.initFlag = true; // æ¯å¦åå§åäºçæ å¿\n\n    if (this.data || this.datasets) { // å¤æ­dataådatasetsæä¸ä¸ªææ°æ®å°±å·æ°\n      this.refresh();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // TODO: æä»¶ååå·æ°ï¼å¼æ¾å·æ°æé®\n    if (this.initFlag) {\n      // Check if the changes are in the data or datasets\n      if (changes.hasOwnProperty('data') || changes.hasOwnProperty('datasets')) {\n        if (changes.data) {\n          this.updateChartData(changes.data.currentValue);\n        } else {\n          this.updateChartData(changes.datasets.currentValue);\n        }\n        this.hasChanges = true;\n      }\n\n      if (changes.hasOwnProperty('labels')) {\n        this.chart.data.labels = changes.labels.currentValue;\n        this.hasChanges = true;\n      }\n\n      if (changes.hasOwnProperty('legend')) {\n        if (changes.legend.currentValue !== changes.legend.previousValue) {\n          this.chart.options.legend.display = changes.legend.currentValue;\n          this.hasChanges = true;\n        }\n      }\n\n      if (changes.hasOwnProperty('adding')) {\n        this.addData(changes.adding.currentValue.labels, changes.adding.currentValue.data);\n        this.hasChanges = true;\n      }\n\n      if (changes.hasOwnProperty('removing')) {\n        if (changes.removing.currentValue.orientation === 'oldest' || changes.removing.currentValue.orientation === 'latest') {\n          this.removeData(changes.removing.currentValue.orientation);\n          this.hasChanges = true;\n        }\n      }\n\n      if (changes.hasOwnProperty('resetOption')) {\n        Object.assign(this.chart.options, changes.resetOption.currentValue);\n        this.hasChanges = true;\n      }\n      // else {\n      //   // otherwise rebuild the chart\n      //   this.refresh();\n      // }\n      if (this.hasChanges) {\n        this.chart.update();\n        this.hasChanges = false;\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.chart) {\n      this.chart.destroy();\n      this.chart = void 0;\n\n      if (this.element.nativeElement.hasAttribute('id')) {\n        this.storeService.removeChart(this.element.nativeElement.id);  // delete chart instance.\n      }\n    }\n  }\n\n  private refresh(): any {\n    this.ngOnDestroy();\n    this.chart = this.getChartBuilder(this.ctx/*, data, this.options*/);\n    if (this.element.nativeElement.hasAttribute('id')) {\n      this.storeService.addChart(this.element.nativeElement.id, this.chart);\n    }\n  }\n\n  private addData(labels: any[], data: any[][]) {\n    if (labels.length === 0 || data.length === 0) {\n      return;\n    }\n    // update labels\n    labels.forEach((label) => { this.chart.data.labels.push(label); });\n\n    this.chart.data.datasets.forEach((dataset, index) => {\n      if (data[index]) {\n        for (let i = 0; i < data[index].length; i++) {\n          dataset.data.push(data[index][i]);\n        }\n      } else {\n        console.log('The added data does not match the original data');\n        return;\n      }\n    });\n  }\n  // direction is 'ildest' or 'latest'\n  private removeData(direction: string) {\n    if (direction === 'latest') {\n      this.chart.data.labels.pop();\n      this.chart.data.datasets.forEach((dataset) => {\n        dataset.data.pop();\n      });\n      return;\n    }\n    if (direction === 'oldest') {\n      return;\n    }\n  }\n  private updateChartData(newDataValues: number[] | any[]): void {\n    if (Array.isArray(newDataValues[0].data)) {\n      this.chart.data.datasets.forEach((dataset: any, i: number) => {\n        dataset.data = newDataValues[i].data;\n\n        if (newDataValues[i].label) {\n          dataset.label = newDataValues[i].label;\n        }\n      });\n    } else {\n      this.chart.data.datasets[0].data = newDataValues;\n    }\n  }\n\n  getChartBuilder(ctx: any/*, data:Array<any>, options:any*/): any {\n    const datasets: any = this.getDatasets();\n\n    const options: any = Object.assign({}, this.options); // æ·±å¤å¶options\n    if (this.legend === false) {  // è®¾ç½®optionsçlegend TODO: åç»­è¿ä¸ªå±æ§å»é¤ï¼ç´æ¥å¨optionsåè®¾ç½®\n      options.legend = { display: false };\n    }\n    // hock for onHover and onClick events\n    options.hover = options.hover || {};\n    if (!options.hover.onHover) {\n      options.hover.onHover = (active: any[]) => {\n        if (active && !active.length) {\n          return;\n        }\n        this.chartHover.emit({ active });\n      };\n    }\n\n    if (!options.onClick) {\n      options.onClick = (event: any, active: any[]) => {\n        this.chartClick.emit({ event, active });\n      };\n    }\n\n    const opts = {\n      type: this.chartType,\n      data: {\n        labels: this.labels,\n        datasets: datasets   // TODO: åç»­æ´æ¹è¿ä¸ªå±æ§åå­ï¼å¦åè­¦å\n      },\n      options: options,   // TODO: åç»­æ´æ¹è¿ä¸ªå±æ§åå­ï¼å¦åè­¦å\n      plugins: this.inlinePlugins\n    };\n\n    return new Chart(ctx, opts);\n  }\n\n  // è·å chart.jsçdatasetsæ°æ®\n  private getDatasets(): any {\n    let datasets: any = void 0;\n    // in case if datasets is not provided, but data is present\n    if (!this.datasets || !this.datasets.length && (this.data && this.data.length)) {\n      if (Array.isArray(this.data[0])) {\n        datasets = (this.data as number[][]).map((data: number[], index: number) => {\n          return { data, label: this.labels[index] || `Label ${index}` };\n        });\n      } else {\n        datasets = [{ data: this.data, label: `Label 0` }];\n      }\n    }\n\n    if (this.datasets && this.datasets.length ||\n      (datasets && datasets.length)) {\n      datasets = (this.datasets || datasets)\n        .map((elm: number, index: number) => {\n          const newElm: any = Object.assign({}, elm);\n          if (this.colors && this.colors.length) {\n            Object.assign(newElm, this.colors[index]);\n          } else {\n            Object.assign(newElm, getColors(this.chartType, index, newElm.data.length));\n          }\n          return newElm;\n        });\n    }\n\n    if (!datasets) {\n      throw new Error(`ng-charts configuration error,\n      data or datasets field are required to render char ${this.chartType}`);\n    }\n\n    return datasets;\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { NgChartjsDirective } from './ng-chartjs.directive';\nimport { NgChartjsDefaultPluginToken, NgChartjsCustomPluginToken } from './plugin-token';\nimport { PluginConfig } from './pluginsConfig';\nimport { NgChartjsService } from './ng-chartjs.service';\n\n\nexport function ngChartjsCustomPluginsFactory(plugins: any[]): PluginConfig {\n  return new PluginConfig(plugins);\n}\n\nexport function ngChartjsDefaultPluginsFactory(): PluginConfig {\n  return new PluginConfig([]);\n}\n\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [NgChartjsDirective],\n  exports: [NgChartjsDirective],\n  providers: [\n    {\n      provide: NgChartjsCustomPluginToken,\n      useFactory: ngChartjsDefaultPluginsFactory\n    }\n  ]\n})\nexport class NgChartjsModule {\n  /**\n   * Register a plugin.\n   * @param plugin\n   */\n  public static registerPlugin(plugins: any[] = []): ModuleWithProviders {\n    return {\n      ngModule: NgChartjsModule,\n      providers: [\n        {\n          provide: NgChartjsDefaultPluginToken,\n          useValue: plugins\n        },\n        {\n          deps: [NgChartjsDefaultPluginToken],\n          provide: NgChartjsCustomPluginToken,\n          useFactory: ngChartjsCustomPluginsFactory\n        }\n      ]\n    };\n  }\n}\n"]}