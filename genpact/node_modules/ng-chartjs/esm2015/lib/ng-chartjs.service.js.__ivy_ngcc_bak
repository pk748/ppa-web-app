/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable, Inject, forwardRef } from '@angular/core';
import { Chart } from 'chart.js';
import { NgChartjsCustomPluginToken } from './plugin-token';
import { PluginConfig } from './pluginsConfig';
import { StoreService } from './store.service';
import * as i0 from "@angular/core";
import * as i1 from "./plugin-token";
import * as i2 from "./store.service";
export class NgChartjsService {
    /**
     * @param {?} pluginConfig
     * @param {?} storeService
     */
    constructor(pluginConfig, storeService) {
        this.pluginConfig = pluginConfig;
        this.storeService = storeService;
        this.plugins = pluginConfig.plugins;
        if (this.plugins.length !== 0 || this.plugins) {
            for (let i = 0; i < this.plugins.length; i++) {
                if (this.plugins[i]) {
                    Chart.plugins.register(this.plugins[i]);
                }
            }
        }
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getChart(id) {
        return this.storeService.getChart(id);
    }
}
NgChartjsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
NgChartjsService.ctorParameters = () => [
    { type: PluginConfig, decorators: [{ type: Inject, args: [forwardRef(() => NgChartjsCustomPluginToken),] }] },
    { type: StoreService }
];
/** @nocollapse */ NgChartjsService.ngInjectableDef = i0.defineInjectable({ factory: function NgChartjsService_Factory() { return new NgChartjsService(i0.inject(i1.NgChartjsCustomPluginToken), i0.inject(i2.StoreService)); }, token: NgChartjsService, providedIn: "root" });
if (false) {
    /** @type {?} */
    NgChartjsService.prototype.plugins;
    /** @type {?} */
    NgChartjsService.prototype.pluginConfig;
    /** @type {?} */
    NgChartjsService.prototype.storeService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctY2hhcnRqcy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctY2hhcnRqcy8iLCJzb3VyY2VzIjpbImxpYi9uZy1jaGFydGpzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ2pDLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7Ozs7QUFLL0MsTUFBTTs7Ozs7SUFJRixZQUEwRSxZQUEwQixFQUM1RjtRQURrRSxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUM1RixpQkFBWSxHQUFaLFlBQVk7UUFDbEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDO1FBQ3BDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUM5QyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7Z0JBQzdDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNwQixLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ3pDO2FBQ0Y7U0FDRjtLQUNGOzs7OztJQUVELFFBQVEsQ0FBQyxFQUFVO1FBQ2pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUN2Qzs7O1lBckJKLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7OztZQUxRLFlBQVksdUJBVUosTUFBTSxTQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQztZQVQzRCxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0LCBmb3J3YXJkUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDaGFydCB9IGZyb20gJ2NoYXJ0LmpzJztcbmltcG9ydCB7IE5nQ2hhcnRqc0N1c3RvbVBsdWdpblRva2VuIH0gZnJvbSAnLi9wbHVnaW4tdG9rZW4nO1xuaW1wb3J0IHsgUGx1Z2luQ29uZmlnIH0gZnJvbSAnLi9wbHVnaW5zQ29uZmlnJztcbmltcG9ydCB7IFN0b3JlU2VydmljZSB9IGZyb20gJy4vc3RvcmUuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5nQ2hhcnRqc1NlcnZpY2Uge1xuXG4gICAgcHJpdmF0ZSBwbHVnaW5zOiBhbnlbXTtcblxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBOZ0NoYXJ0anNDdXN0b21QbHVnaW5Ub2tlbikpIHByaXZhdGUgcGx1Z2luQ29uZmlnOiBQbHVnaW5Db25maWcsXG4gICAgcHJpdmF0ZSBzdG9yZVNlcnZpY2U6IFN0b3JlU2VydmljZSkge1xuICAgICAgdGhpcy5wbHVnaW5zID0gcGx1Z2luQ29uZmlnLnBsdWdpbnM7XG4gICAgICBpZiAodGhpcy5wbHVnaW5zLmxlbmd0aCAhPT0gMCB8fCB0aGlzLnBsdWdpbnMpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBsdWdpbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAodGhpcy5wbHVnaW5zW2ldKSB7XG4gICAgICAgICAgICBDaGFydC5wbHVnaW5zLnJlZ2lzdGVyKHRoaXMucGx1Z2luc1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGdldCBjaGFydCBpbnN0YW5jZSBieSBpZFxuICAgIGdldENoYXJ0KGlkOiBzdHJpbmcpOiBhbnkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RvcmVTZXJ2aWNlLmdldENoYXJ0KGlkKTtcbiAgICB9XG59XG4iXX0=