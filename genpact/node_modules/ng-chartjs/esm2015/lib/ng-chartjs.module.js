/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { NgChartjsDirective } from './ng-chartjs.directive';
import { NgChartjsDefaultPluginToken, NgChartjsCustomPluginToken } from './plugin-token';
import { PluginConfig } from './pluginsConfig';
/**
 * @param {?} plugins
 * @return {?}
 */
import * as ɵngcc0 from '@angular/core';
export function ngChartjsCustomPluginsFactory(plugins) {
    return new PluginConfig(plugins);
}
/**
 * @return {?}
 */
export function ngChartjsDefaultPluginsFactory() {
    return new PluginConfig([]);
}
export class NgChartjsModule {
    /**
     * Register a plugin.
     * @param {?=} plugins
     * @return {?}
     */
    static registerPlugin(plugins = []) {
        return {
            ngModule: NgChartjsModule,
            providers: [
                {
                    provide: NgChartjsDefaultPluginToken,
                    useValue: plugins
                },
                {
                    deps: [NgChartjsDefaultPluginToken],
                    provide: NgChartjsCustomPluginToken,
                    useFactory: ngChartjsCustomPluginsFactory
                }
            ]
        };
    }
}
NgChartjsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgChartjsModule });
NgChartjsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgChartjsModule_Factory(t) { return new (t || NgChartjsModule)(); }, providers: [
        {
            provide: NgChartjsCustomPluginToken,
            useFactory: ngChartjsDefaultPluginsFactory
        }
    ], imports: [[]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgChartjsModule, { declarations: function () { return [NgChartjsDirective]; }, exports: function () { return [NgChartjsDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgChartjsModule, [{
        type: NgModule,
        args: [{
                imports: [],
                declarations: [NgChartjsDirective],
                exports: [NgChartjsDirective],
                providers: [
                    {
                        provide: NgChartjsCustomPluginToken,
                        useFactory: ngChartjsDefaultPluginsFactory
                    }
                ]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctY2hhcnRqcy5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIm5nOi9uZy1jaGFydGpzL2xpYi9uZy1jaGFydGpzLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLDJCQUEyQixFQUFFLDBCQUEwQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDekYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DO0FBQUk7QUFBc0I7QUFBZTs7QUFHekMsTUFBTSx3Q0FBd0MsT0FBYztBQUFJLElBQzlELE1BQU0sQ0FBQyxJQUFJLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNuQyxDQUFDO0FBQ0Q7QUFDRztBQUFlO0FBQWxCLE1BQU07QUFBNkMsSUFDakQsTUFBTSxDQUFDLElBQUksWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzlCLENBQUM7QUFlRCxNQUFNO0FBQ047QUFDRTtBQUNFO0FBRUU7QUFBbUI7QUFBUSxJQUF4QixNQUFNLENBQUMsY0FBYyxDQUFDLFVBQWlCLEVBQUU7QUFBSSxRQUNsRCxNQUFNLENBQUM7QUFDWCxZQUFNLFFBQVEsRUFBRSxlQUFlO0FBQy9CLFlBQU0sU0FBUyxFQUFFO0FBQ2pCLGdCQUFRO0FBQ1Isb0JBQVUsT0FBTyxFQUFFLDJCQUEyQjtBQUM5QyxvQkFBVSxRQUFRLEVBQUUsT0FBTztBQUMzQixpQkFBUztBQUNULGdCQUFRO0FBQ1Isb0JBQVUsSUFBSSxFQUFFLENBQUMsMkJBQTJCLENBQUM7QUFDN0Msb0JBQVUsT0FBTyxFQUFFLDBCQUEwQjtBQUM3QyxvQkFBVSxVQUFVLEVBQUUsNkJBQTZCO0FBQ25ELGlCQUFTO0FBQ1QsYUFBTztBQUNQLFNBQUssQ0FBQztBQUNOO0FBRUE7MkNBbENDLFFBQVEsU0FBQztHQUNSLE9BQU8sRUFBRSxFQUNSLGtCQUNELFlBQVksRUFBRSxDQUFDLGtCQUFrQixDQUFDLGtCQUNsQyxPQUFPLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxrQkFDN0IsU0FBUyxFQUFFOztLQUNULDBCQUNFLE9BQU8sRUFBRTtpQkFBMEIsMEJBQ25DLFVBQVU7QUFBRTtvQkFBOEI7aUJBQzNDLGtCQUNGLGNBQ0Y7Ozs7Ozs7Ozs7Ozs7OzBCQUNLOztBQTVCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUlBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFlQSxBQUFBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUNBLEFBQUEsQUEvQkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdDaGFydGpzRGlyZWN0aXZlIH0gZnJvbSAnLi9uZy1jaGFydGpzLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBOZ0NoYXJ0anNEZWZhdWx0UGx1Z2luVG9rZW4sIE5nQ2hhcnRqc0N1c3RvbVBsdWdpblRva2VuIH0gZnJvbSAnLi9wbHVnaW4tdG9rZW4nO1xuaW1wb3J0IHsgUGx1Z2luQ29uZmlnIH0gZnJvbSAnLi9wbHVnaW5zQ29uZmlnJztcbmltcG9ydCB7IE5nQ2hhcnRqc1NlcnZpY2UgfSBmcm9tICcuL25nLWNoYXJ0anMuc2VydmljZSc7XG5cblxuZXhwb3J0IGZ1bmN0aW9uIG5nQ2hhcnRqc0N1c3RvbVBsdWdpbnNGYWN0b3J5KHBsdWdpbnM6IGFueVtdKTogUGx1Z2luQ29uZmlnIHtcbiAgcmV0dXJuIG5ldyBQbHVnaW5Db25maWcocGx1Z2lucyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBuZ0NoYXJ0anNEZWZhdWx0UGx1Z2luc0ZhY3RvcnkoKTogUGx1Z2luQ29uZmlnIHtcbiAgcmV0dXJuIG5ldyBQbHVnaW5Db25maWcoW10pO1xufVxuXG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgXSxcbiAgZGVjbGFyYXRpb25zOiBbTmdDaGFydGpzRGlyZWN0aXZlXSxcbiAgZXhwb3J0czogW05nQ2hhcnRqc0RpcmVjdGl2ZV0sXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IE5nQ2hhcnRqc0N1c3RvbVBsdWdpblRva2VuLFxuICAgICAgdXNlRmFjdG9yeTogbmdDaGFydGpzRGVmYXVsdFBsdWdpbnNGYWN0b3J5XG4gICAgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIE5nQ2hhcnRqc01vZHVsZSB7XG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIHBsdWdpbi5cbiAgICogQHBhcmFtIHBsdWdpblxuICAgKi9cbiAgcHVibGljIHN0YXRpYyByZWdpc3RlclBsdWdpbihwbHVnaW5zOiBhbnlbXSA9IFtdKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBOZ0NoYXJ0anNNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IE5nQ2hhcnRqc0RlZmF1bHRQbHVnaW5Ub2tlbixcbiAgICAgICAgICB1c2VWYWx1ZTogcGx1Z2luc1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZGVwczogW05nQ2hhcnRqc0RlZmF1bHRQbHVnaW5Ub2tlbl0sXG4gICAgICAgICAgcHJvdmlkZTogTmdDaGFydGpzQ3VzdG9tUGx1Z2luVG9rZW4sXG4gICAgICAgICAgdXNlRmFjdG9yeTogbmdDaGFydGpzQ3VzdG9tUGx1Z2luc0ZhY3RvcnlcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH07XG4gIH1cbn1cbiJdfQ==