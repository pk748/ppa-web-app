/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { NgChartjsDirective } from './ng-chartjs.directive';
import { NgChartjsDefaultPluginToken, NgChartjsCustomPluginToken } from './plugin-token';
import { PluginConfig } from './pluginsConfig';
/**
 * @param {?} plugins
 * @return {?}
 */
export function ngChartjsCustomPluginsFactory(plugins) {
    return new PluginConfig(plugins);
}
/**
 * @return {?}
 */
export function ngChartjsDefaultPluginsFactory() {
    return new PluginConfig([]);
}
export class NgChartjsModule {
    /**
     * Register a plugin.
     * @param {?=} plugins
     * @return {?}
     */
    static registerPlugin(plugins = []) {
        return {
            ngModule: NgChartjsModule,
            providers: [
                {
                    provide: NgChartjsDefaultPluginToken,
                    useValue: plugins
                },
                {
                    deps: [NgChartjsDefaultPluginToken],
                    provide: NgChartjsCustomPluginToken,
                    useFactory: ngChartjsCustomPluginsFactory
                }
            ]
        };
    }
}
NgChartjsModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: [NgChartjsDirective],
                exports: [NgChartjsDirective],
                providers: [
                    {
                        provide: NgChartjsCustomPluginToken,
                        useFactory: ngChartjsDefaultPluginsFactory
                    }
                ]
            },] },
];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctY2hhcnRqcy5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1jaGFydGpzLyIsInNvdXJjZXMiOlsibGliL25nLWNoYXJ0anMubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6RixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7Ozs7O0FBSS9DLE1BQU0sd0NBQXdDLE9BQWM7SUFDMUQsTUFBTSxDQUFDLElBQUksWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQ2xDOzs7O0FBRUQsTUFBTTtJQUNKLE1BQU0sQ0FBQyxJQUFJLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUM3QjtBQWVELE1BQU07Ozs7OztJQUtHLE1BQU0sQ0FBQyxjQUFjLENBQUMsVUFBaUIsRUFBRTtRQUM5QyxNQUFNLENBQUM7WUFDTCxRQUFRLEVBQUUsZUFBZTtZQUN6QixTQUFTLEVBQUU7Z0JBQ1Q7b0JBQ0UsT0FBTyxFQUFFLDJCQUEyQjtvQkFDcEMsUUFBUSxFQUFFLE9BQU87aUJBQ2xCO2dCQUNEO29CQUNFLElBQUksRUFBRSxDQUFDLDJCQUEyQixDQUFDO29CQUNuQyxPQUFPLEVBQUUsMEJBQTBCO29CQUNuQyxVQUFVLEVBQUUsNkJBQTZCO2lCQUMxQzthQUNGO1NBQ0YsQ0FBQzs7OztZQS9CTCxRQUFRLFNBQUM7Z0JBQ1IsT0FBTyxFQUFFLEVBQ1I7Z0JBQ0QsWUFBWSxFQUFFLENBQUMsa0JBQWtCLENBQUM7Z0JBQ2xDLE9BQU8sRUFBRSxDQUFDLGtCQUFrQixDQUFDO2dCQUM3QixTQUFTLEVBQUU7b0JBQ1Q7d0JBQ0UsT0FBTyxFQUFFLDBCQUEwQjt3QkFDbkMsVUFBVSxFQUFFLDhCQUE4QjtxQkFDM0M7aUJBQ0Y7YUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ0NoYXJ0anNEaXJlY3RpdmUgfSBmcm9tICcuL25nLWNoYXJ0anMuZGlyZWN0aXZlJztcbmltcG9ydCB7IE5nQ2hhcnRqc0RlZmF1bHRQbHVnaW5Ub2tlbiwgTmdDaGFydGpzQ3VzdG9tUGx1Z2luVG9rZW4gfSBmcm9tICcuL3BsdWdpbi10b2tlbic7XG5pbXBvcnQgeyBQbHVnaW5Db25maWcgfSBmcm9tICcuL3BsdWdpbnNDb25maWcnO1xuaW1wb3J0IHsgTmdDaGFydGpzU2VydmljZSB9IGZyb20gJy4vbmctY2hhcnRqcy5zZXJ2aWNlJztcblxuXG5leHBvcnQgZnVuY3Rpb24gbmdDaGFydGpzQ3VzdG9tUGx1Z2luc0ZhY3RvcnkocGx1Z2luczogYW55W10pOiBQbHVnaW5Db25maWcge1xuICByZXR1cm4gbmV3IFBsdWdpbkNvbmZpZyhwbHVnaW5zKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5nQ2hhcnRqc0RlZmF1bHRQbHVnaW5zRmFjdG9yeSgpOiBQbHVnaW5Db25maWcge1xuICByZXR1cm4gbmV3IFBsdWdpbkNvbmZpZyhbXSk7XG59XG5cblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtOZ0NoYXJ0anNEaXJlY3RpdmVdLFxuICBleHBvcnRzOiBbTmdDaGFydGpzRGlyZWN0aXZlXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTmdDaGFydGpzQ3VzdG9tUGx1Z2luVG9rZW4sXG4gICAgICB1c2VGYWN0b3J5OiBuZ0NoYXJ0anNEZWZhdWx0UGx1Z2luc0ZhY3RvcnlcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgTmdDaGFydGpzTW9kdWxlIHtcbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgcGx1Z2luLlxuICAgKiBAcGFyYW0gcGx1Z2luXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHJlZ2lzdGVyUGx1Z2luKHBsdWdpbnM6IGFueVtdID0gW10pOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IE5nQ2hhcnRqc01vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogTmdDaGFydGpzRGVmYXVsdFBsdWdpblRva2VuLFxuICAgICAgICAgIHVzZVZhbHVlOiBwbHVnaW5zXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBkZXBzOiBbTmdDaGFydGpzRGVmYXVsdFBsdWdpblRva2VuXSxcbiAgICAgICAgICBwcm92aWRlOiBOZ0NoYXJ0anNDdXN0b21QbHVnaW5Ub2tlbixcbiAgICAgICAgICB1c2VGYWN0b3J5OiBuZ0NoYXJ0anNDdXN0b21QbHVnaW5zRmFjdG9yeVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfTtcbiAgfVxufVxuIl19