/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @record
 */
export function Color() { }
/** @type {?|undefined} */
Color.prototype.backgroundColor;
/** @type {?|undefined} */
Color.prototype.borderWidth;
/** @type {?|undefined} */
Color.prototype.borderColor;
/** @type {?|undefined} */
Color.prototype.borderCapStyle;
/** @type {?|undefined} */
Color.prototype.borderDash;
/** @type {?|undefined} */
Color.prototype.borderDashOffset;
/** @type {?|undefined} */
Color.prototype.borderJoinStyle;
/** @type {?|undefined} */
Color.prototype.pointBorderColor;
/** @type {?|undefined} */
Color.prototype.pointBackgroundColor;
/** @type {?|undefined} */
Color.prototype.pointBorderWidth;
/** @type {?|undefined} */
Color.prototype.pointRadius;
/** @type {?|undefined} */
Color.prototype.pointHoverRadius;
/** @type {?|undefined} */
Color.prototype.pointHitRadius;
/** @type {?|undefined} */
Color.prototype.pointHoverBackgroundColor;
/** @type {?|undefined} */
Color.prototype.pointHoverBorderColor;
/** @type {?|undefined} */
Color.prototype.pointHoverBorderWidth;
/** @type {?|undefined} */
Color.prototype.pointStyle;
/** @type {?|undefined} */
Color.prototype.hoverBackgroundColor;
/** @type {?|undefined} */
Color.prototype.hoverBorderColor;
/** @type {?|undefined} */
Color.prototype.hoverBorderWidth;
/** @type {?} */
export const DefaultColors = [
    [63, 81, 181],
    // Indogo
    [233, 30, 99],
    // Pink
    [156, 39, 176],
    // Purple
    [0, 188, 212],
    // Cyan
    [3, 169, 244],
    // Light Blue
    [0, 150, 136],
    // Teal
    [255, 152, 0],
    // Orange
    [96, 125, 139],
    // Blue Grey
    [255, 193, 7],
    // Amber
    [37, 155, 36],
    // Green
    [205, 220, 57],
    // Lime
    [86, 119, 252] // Blue
];
/**
 * @record
 */
export function Colors() { }
/** @type {?|undefined} */
Colors.prototype.data;
/** @type {?|undefined} */
Colors.prototype.label;
/**
 * @param {?} colour
 * @param {?} alpha
 * @return {?}
 */
function rgba(colour, alpha) {
    return 'rgba(' + colour.concat(alpha).join(',') + ')';
}
/**
 * @param {?} min
 * @param {?} max
 * @return {?}
 */
function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}
/**
 * @param {?} colors
 * @return {?}
 */
function formatLineColor(colors) {
    return {
        backgroundColor: rgba(colors, 0.4),
        borderColor: rgba(colors, 1),
        pointBackgroundColor: rgba(colors, 1),
        pointBorderColor: '#fff',
        pointHoverBackgroundColor: '#fff',
        pointHoverBorderColor: rgba(colors, 0.8)
    };
}
/**
 * @param {?} colors
 * @return {?}
 */
function formatBarColor(colors) {
    return {
        backgroundColor: rgba(colors, 0.6),
        borderColor: rgba(colors, 1),
        hoverBackgroundColor: rgba(colors, 0.8),
        hoverBorderColor: rgba(colors, 1)
    };
}
/**
 * @param {?} colors
 * @return {?}
 */
function formatPieColors(colors) {
    return {
        backgroundColor: colors.map((color) => rgba(color, 0.6)),
        borderColor: colors.map(() => '#fff'),
        pointBackgroundColor: colors.map((color) => rgba(color, 1)),
        pointBorderColor: colors.map(() => '#fff'),
        pointHoverBackgroundColor: colors.map((color) => rgba(color, 1)),
        pointHoverBorderColor: colors.map((color) => rgba(color, 1))
    };
}
/**
 * @param {?} colors
 * @return {?}
 */
function formatPolarAreaColors(colors) {
    return {
        backgroundColor: colors.map((color) => rgba(color, 0.6)),
        borderColor: colors.map((color) => rgba(color, 1)),
        hoverBackgroundColor: colors.map((color) => rgba(color, 0.8)),
        hoverBorderColor: colors.map((color) => rgba(color, 1))
    };
}
/**
 * @return {?}
 */
function getRandomColor() {
    return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];
}
/**
 * @param {?} index
 * @return {?}
 */
function generateColor(index) {
    return DefaultColors[index] || getRandomColor();
}
/**
 * @param {?} count
 * @return {?}
 */
function generateColors(count) {
    /** @type {?} */
    const colorsArr = new Array(count);
    for (let i = 0; i < count; i++) {
        colorsArr[i] = DefaultColors[i] || getRandomColor();
    }
    return colorsArr;
}
/**
 * @param {?} chartType
 * @param {?} index
 * @param {?} count
 * @return {?}
 */
export function getColors(chartType, index, count) {
    if (chartType === 'pie' || chartType === 'doughnut') {
        return formatPieColors(generateColors(count));
    }
    if (chartType === 'polarArea') {
        return formatPolarAreaColors(generateColors(count));
    }
    if (chartType === 'line' || chartType === 'radar') {
        return formatLineColor(generateColor(index));
    }
    if (chartType === 'bar' || chartType === 'horizontalBar') {
        return formatBarColor(generateColor(index));
    }
    return generateColor(index);
}

//# sourceMappingURL=data:application/json;base64,