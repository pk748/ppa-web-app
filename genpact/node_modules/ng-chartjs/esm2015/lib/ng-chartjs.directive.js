/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { StoreService } from './store.service';
import { EventEmitter, ElementRef, Input, Output, Directive } from '@angular/core';
import { Chart } from 'chart.js';
import { NgChartjsService } from './ng-chartjs.service';
import { getColors } from './colors';
import * as ɵngcc0 from '@angular/core';
export class NgChartjsDirective {
    /**
     * @param {?} element
     * @param {?} ngChartjsService
     * @param {?} storeService
     */
    constructor(element, ngChartjsService, storeService) {
        this.ngChartjsService = ngChartjsService;
        this.storeService = storeService;
        // x轴标签。这对图表来说是必要的：线，条和雷达。并且只是图表的标签（悬停）：polarArea，pie和doughnut
        this.labels = [];
        // 相当于chart.js的option
        this.options = {};
        // 鼠标点击图表所有的区域
        this.chartClick = new EventEmitter();
        // 鼠标悬浮在标签或者活跃的点上面时
        this.chartHover = new EventEmitter();
        this.initFlag = false;
        this.hasChanges = false;
        this.element = element; // 获取指令所在canvas元素
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.ctx = this.element.nativeElement.getContext('2d'); // 获取元素的ctx
        this.cvs = this.element.nativeElement; // 获取这个元素
        this.initFlag = true; // 是否初始化了的标志
        if (this.data || this.datasets) {
            // 判断data和datasets有一个有数据就刷新
            this.refresh();
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        // TODO: 插件变化刷新，开放刷新按钮
        if (this.initFlag) {
            // Check if the changes are in the data or datasets
            if (changes.hasOwnProperty('data') || changes.hasOwnProperty('datasets')) {
                if (changes["data"]) {
                    this.updateChartData(changes["data"].currentValue);
                }
                else {
                    this.updateChartData(changes["datasets"].currentValue);
                }
                this.hasChanges = true;
            }
            if (changes.hasOwnProperty('labels')) {
                this.chart.data.labels = changes["labels"].currentValue;
                this.hasChanges = true;
            }
            if (changes.hasOwnProperty('legend')) {
                if (changes["legend"].currentValue !== changes["legend"].previousValue) {
                    this.chart.options.legend.display = changes["legend"].currentValue;
                    this.hasChanges = true;
                }
            }
            if (changes.hasOwnProperty('adding')) {
                this.addData(changes["adding"].currentValue.labels, changes["adding"].currentValue.data);
                this.hasChanges = true;
            }
            if (changes.hasOwnProperty('removing')) {
                if (changes["removing"].currentValue.orientation === 'oldest' || changes["removing"].currentValue.orientation === 'latest') {
                    this.removeData(changes["removing"].currentValue.orientation);
                    this.hasChanges = true;
                }
            }
            if (changes.hasOwnProperty('resetOption')) {
                Object.assign(this.chart.options, changes["resetOption"].currentValue);
                this.hasChanges = true;
            }
            // else {
            //   // otherwise rebuild the chart
            //   this.refresh();
            // }
            if (this.hasChanges) {
                this.chart.update();
                this.hasChanges = false;
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.chart) {
            this.chart.destroy();
            this.chart = void 0;
            if (this.element.nativeElement.hasAttribute('id')) {
                this.storeService.removeChart(this.element.nativeElement.id); // delete chart instance.
            }
        }
    }
    /**
     * @return {?}
     */
    refresh() {
        this.ngOnDestroy();
        this.chart = this.getChartBuilder(this.ctx /*, data, this.options*/);
        if (this.element.nativeElement.hasAttribute('id')) {
            this.storeService.addChart(this.element.nativeElement.id, this.chart);
        }
    }
    /**
     * @param {?} labels
     * @param {?} data
     * @return {?}
     */
    addData(labels, data) {
        if (labels.length === 0 || data.length === 0) {
            return;
        }
        // update labels
        labels.forEach((label) => { this.chart.data.labels.push(label); });
        this.chart.data.datasets.forEach((dataset, index) => {
            if (data[index]) {
                for (let i = 0; i < data[index].length; i++) {
                    dataset.data.push(data[index][i]);
                }
            }
            else {
                console.log('The added data does not match the original data');
                return;
            }
        });
    }
    /**
     * @param {?} direction
     * @return {?}
     */
    removeData(direction) {
        if (direction === 'latest') {
            this.chart.data.labels.pop();
            this.chart.data.datasets.forEach((dataset) => {
                dataset.data.pop();
            });
            return;
        }
        if (direction === 'oldest') {
            return;
        }
    }
    /**
     * @param {?} newDataValues
     * @return {?}
     */
    updateChartData(newDataValues) {
        if (Array.isArray(newDataValues[0].data)) {
            this.chart.data.datasets.forEach((dataset, i) => {
                dataset.data = newDataValues[i].data;
                if (newDataValues[i].label) {
                    dataset.label = newDataValues[i].label;
                }
            });
        }
        else {
            this.chart.data.datasets[0].data = newDataValues;
        }
    }
    /**
     * @param {?} ctx
     * @return {?}
     */
    getChartBuilder(ctx /*, data:Array<any>, options:any*/) {
        /** @type {?} */
        const datasets = this.getDatasets();
        /** @type {?} */
        const options = Object.assign({}, this.options); // 深复制options
        if (this.legend === false) {
            // 设置options的legend TODO: 后续这个属性去除，直接在options内设置
            options.legend = { display: false };
        }
        // hock for onHover and onClick events
        options.hover = options.hover || {};
        if (!options.hover.onHover) {
            options.hover.onHover = (active) => {
                if (active && !active.length) {
                    return;
                }
                this.chartHover.emit({ active });
            };
        }
        if (!options.onClick) {
            options.onClick = (event, active) => {
                this.chartClick.emit({ event, active });
            };
        }
        /** @type {?} */
        const opts = {
            type: this.chartType,
            data: {
                labels: this.labels,
                datasets: datasets // TODO: 后续更改这个属性名字，否则警告
            },
            options: options,
            // TODO: 后续更改这个属性名字，否则警告
            plugins: this.inlinePlugins
        };
        return new Chart(ctx, opts);
    }
    /**
     * @return {?}
     */
    getDatasets() {
        /** @type {?} */
        let datasets = void 0;
        // in case if datasets is not provided, but data is present
        if (!this.datasets || !this.datasets.length && (this.data && this.data.length)) {
            if (Array.isArray(this.data[0])) {
                datasets = (/** @type {?} */ (this.data)).map((data, index) => {
                    return { data, label: this.labels[index] || `Label ${index}` };
                });
            }
            else {
                datasets = [{ data: this.data, label: `Label 0` }];
            }
        }
        if (this.datasets && this.datasets.length ||
            (datasets && datasets.length)) {
            datasets = (this.datasets || datasets)
                .map((elm, index) => {
                /** @type {?} */
                const newElm = Object.assign({}, elm);
                if (this.colors && this.colors.length) {
                    Object.assign(newElm, this.colors[index]);
                }
                else {
                    Object.assign(newElm, getColors(this.chartType, index, newElm.data.length));
                }
                return newElm;
            });
        }
        if (!datasets) {
            throw new Error(`ng-charts configuration error,
      data or datasets field are required to render char ${this.chartType}`);
        }
        return datasets;
    }
}
NgChartjsDirective.ɵfac = function NgChartjsDirective_Factory(t) { return new (t || NgChartjsDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(NgChartjsService), ɵngcc0.ɵɵdirectiveInject(StoreService)); };
NgChartjsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgChartjsDirective, selectors: [["canvas", "ngChartjs", ""]], inputs: { labels: "labels", options: "options", data: "data", datasets: "datasets", inlinePlugins: "inlinePlugins", chartType: "chartType", colors: "colors", legend: "legend", adding: "adding", removing: "removing", resetOption: "resetOption" }, outputs: { chartClick: "chartClick", chartHover: "chartHover" }, exportAs: ["ng-chart-js"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/** @nocollapse */
NgChartjsDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgChartjsService },
    { type: StoreService }
];
NgChartjsDirective.propDecorators = {
    data: [{ type: Input }],
    datasets: [{ type: Input }],
    labels: [{ type: Input }],
    options: [{ type: Input }],
    inlinePlugins: [{ type: Input }],
    chartType: [{ type: Input }],
    colors: [{ type: Input }],
    legend: [{ type: Input }],
    adding: [{ type: Input }],
    removing: [{ type: Input }],
    resetOption: [{ type: Input }],
    chartClick: [{ type: Output }],
    chartHover: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgChartjsDirective, [{
        type: Directive,
        args: [{ selector: 'canvas[ngChartjs]', exportAs: 'ng-chart-js' }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: NgChartjsService }, { type: StoreService }]; }, { labels: [{
            type: Input
        }], options: [{
            type: Input
        }], chartClick: [{
            type: Output
        }], chartHover: [{
            type: Output
        }], data: [{
            type: Input
        }], datasets: [{
            type: Input
        }], inlinePlugins: [{
            type: Input
        }], chartType: [{
            type: Input
        }], colors: [{
            type: Input
        }], legend: [{
            type: Input
        }], adding: [{
            type: Input
        }], removing: [{
            type: Input
        }], resetOption: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    NgChartjsDirective.prototype.data;
    /** @type {?} */
    NgChartjsDirective.prototype.datasets;
    /** @type {?} */
    NgChartjsDirective.prototype.labels;
    /** @type {?} */
    NgChartjsDirective.prototype.options;
    /** @type {?} */
    NgChartjsDirective.prototype.inlinePlugins;
    /** @type {?} */
    NgChartjsDirective.prototype.chartType;
    /** @type {?} */
    NgChartjsDirective.prototype.colors;
    /** @type {?} */
    NgChartjsDirective.prototype.legend;
    /** @type {?} */
    NgChartjsDirective.prototype.adding;
    /** @type {?} */
    NgChartjsDirective.prototype.removing;
    /** @type {?} */
    NgChartjsDirective.prototype.resetOption;
    /** @type {?} */
    NgChartjsDirective.prototype.chartClick;
    /** @type {?} */
    NgChartjsDirective.prototype.chartHover;
    /** @type {?} */
    NgChartjsDirective.prototype.ctx;
    /** @type {?} */
    NgChartjsDirective.prototype.chart;
    /** @type {?} */
    NgChartjsDirective.prototype.cvs;
    /** @type {?} */
    NgChartjsDirective.prototype.initFlag;
    /** @type {?} */
    NgChartjsDirective.prototype.hasChanges;
    /** @type {?} */
    NgChartjsDirective.prototype.element;
    /** @type {?} */
    NgChartjsDirective.prototype.ngChartjsService;
    /** @type {?} */
    NgChartjsDirective.prototype.storeService;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,