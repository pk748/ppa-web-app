/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Renderer2, Input, Output, EventEmitter } from '@angular/core';
import { from } from 'rxjs';
import { map, take, filter } from 'rxjs/operators';
import { HighlightJS } from './highlight.service';
/**
 * There are 2 ways to higlight a code
 *  1 - using the [code] input (default) <code highlight [code]="yourCode"></code>
 *  2 - using element text content <code> {{yourCode}} </code>
 */
var HighlightDirective = /** @class */ (function () {
    function HighlightDirective(el, renderer, hljs) {
        this.renderer = renderer;
        this.hljs = hljs;
        this.highlighted = new EventEmitter();
        this.el = el.nativeElement;
    }
    Object.defineProperty(HighlightDirective.prototype, "setCode", {
        set: /**
         * @param {?} code
         * @return {?}
         */
        function (code) {
            var _this = this;
            this.code = code;
            this.hljs.isReady.subscribe(function () { return _this.highlightElement(_this.el, code); });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    HighlightDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** Acitvate MutationObserver if `auto` option is true and `[code]` input is not used
         * This will highlight using the text content */
        if (!this.code && this.hljs.options.auto) {
            this.hljs.isReady.subscribe(function () {
                _this.highlightTextContent();
                /** Highlight when text content changes */
                _this.domObs = new MutationObserver(function () { return _this.highlightTextContent(); });
                _this.domObs.observe(_this.el, { childList: true, subtree: true });
            });
        }
    };
    /** Highlight using element text content */
    /**
     * Highlight using element text content
     * @return {?}
     */
    HighlightDirective.prototype.highlightTextContent = /**
     * Highlight using element text content
     * @return {?}
     */
    function () {
        if (!this.highlight) {
            if (this.el.tagName.toLowerCase() === 'code') {
                this.highlightElement(this.el, this.el.innerText.trim());
            }
            else {
                console.warn("[HighlightDirective]: Use 'highlight' on <code> element only");
            }
        }
        else if (this.highlight === 'all') {
            this.highlightChildren(this.el, 'pre code');
        }
        else {
            this.highlightChildren(this.el, this.highlight);
        }
    };
    /** Highlight a code block */
    /**
     * Highlight a code block
     * @param {?} el
     * @param {?} code
     * @return {?}
     */
    HighlightDirective.prototype.highlightElement = /**
     * Highlight a code block
     * @param {?} el
     * @param {?} code
     * @return {?}
     */
    function (el, code) {
        /** @type {?} */
        var res = this.hljs.highlightAuto(code, this.language);
        if (res.value !== el.innerHTML) {
            this.renderer.addClass(el, 'hljs');
            this.renderer.setProperty(el, 'innerHTML', res.value);
            this.highlighted.emit(res);
        }
    };
    /** Highlight multiple code blocks */
    /**
     * Highlight multiple code blocks
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */
    HighlightDirective.prototype.highlightChildren = /**
     * Highlight multiple code blocks
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */
    function (el, selector) {
        var _this = this;
        /** @type {?} */
        var codeElements = el.querySelectorAll(selector);
        /** highlight children with the same selector */
        from(codeElements).pipe(filter(function (code) { return code.childNodes.length === 1 && code.childNodes[0].nodeName === '#text'; }), map(function (codeElement) { return _this.highlightElement(codeElement, codeElement.innerText.trim()); }), take(1)).subscribe();
    };
    /**
     * @return {?}
     */
    HighlightDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        /** Disconnect MutationObserver */
        if (!this.code && this.hljs.options.auto) {
            this.domObs.disconnect();
        }
    };
    HighlightDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[highlight]'
                },] }
    ];
    /** @nocollapse */
    HighlightDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: HighlightJS }
    ]; };
    HighlightDirective.propDecorators = {
        highlight: [{ type: Input }],
        language: [{ type: Input }],
        setCode: [{ type: Input, args: ['code',] }],
        highlighted: [{ type: Output }]
    };
    return HighlightDirective;
}());
export { HighlightDirective };
if (false) {
    /** @type {?} */
    HighlightDirective.prototype.el;
    /** @type {?} */
    HighlightDirective.prototype.domObs;
    /** @type {?} */
    HighlightDirective.prototype.code;
    /** @type {?} */
    HighlightDirective.prototype.highlight;
    /** @type {?} */
    HighlightDirective.prototype.language;
    /** @type {?} */
    HighlightDirective.prototype.highlighted;
    /** @type {?} */
    HighlightDirective.prototype.renderer;
    /** @type {?} */
    HighlightDirective.prototype.hljs;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1oaWdobGlnaHRqcy8iLCJzb3VyY2VzIjpbImxpYi9oaWdobGlnaHQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQWEsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDakgsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM1QixPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7Ozs7OztBQVFsRDtJQWtCRSw0QkFBWSxFQUFjLEVBQVUsUUFBbUIsRUFBVSxJQUFpQjtRQUE5QyxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQVUsU0FBSSxHQUFKLElBQUksQ0FBYTtRQUZ4RSxnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFtQixDQUFDO1FBRzFELElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQztJQUM3QixDQUFDO0lBVkQsc0JBQ0ksdUNBQU87Ozs7O1FBRFgsVUFDWSxJQUFZO1lBRHhCLGlCQUlDO1lBRkMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7WUFDakIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBcEMsQ0FBb0MsQ0FBQyxDQUFDO1FBQzFFLENBQUM7OztPQUFBOzs7O0lBUUQscUNBQVE7OztJQUFSO1FBQUEsaUJBY0M7UUFaQzt3REFDZ0Q7UUFDaEQsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxD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WDtRQUNFLGtDQUFrQztRQUNsQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUU7WUFDeEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztTQUMxQjtJQUNILENBQUM7O2dCQWxGRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGFBQWE7aUJBQ3hCOzs7O2dCQWJtQixVQUFVO2dCQUFFLFNBQVM7Z0JBR2hDLFdBQVc7Ozs0QkFnQmpCLEtBQUs7MkJBQ0wsS0FBSzswQkFDTCxLQUFLLFNBQUMsTUFBTTs4QkFNWixNQUFNOztJQW1FVCx5QkFBQztDQUFBLEFBbkZELElBbUZDO1NBaEZZLGtCQUFrQjs7O0lBRTdCLGdDQUFnQjs7SUFDaEIsb0NBQXlCOztJQUN6QixrQ0FBYTs7SUFDYix1Q0FBMkI7O0lBQzNCLHNDQUE0Qjs7SUFPNUIseUNBQTREOztJQUVoQyxzQ0FBMkI7O0lBQUUsa0NBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIE9uRGVzdHJveSwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgZnJvbSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAsIHRha2UsIGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgSGlnaGxpZ2h0SlMgfSBmcm9tICcuL2hpZ2hsaWdodC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgSGlnaGxpZ2h0UmVzdWx0IH0gZnJvbSAnLi9oaWdobGlnaHQubW9kZWwnO1xyXG5cclxuLyoqIFRoZXJlIGFyZSAyIHdheXMgdG8gaGlnbGlnaHQgYSBjb2RlXHJcbiAqICAxIC0gdXNpbmcgdGhlIFtjb2RlXSBpbnB1dCAoZGVmYXVsdCkgPGNvZGUgaGlnaGxpZ2h0IFtjb2RlXT1cInlvdXJDb2RlXCI+PC9jb2RlPlxyXG4gKiAgMiAtIHVzaW5nIGVsZW1lbnQgdGV4dCBjb250ZW50IDxjb2RlPiB7e3lvdXJDb2RlfX0gPC9jb2RlPlxyXG4gKi9cclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2hpZ2hsaWdodF0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBIaWdobGlnaHREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XHJcblxyXG4gIGVsOiBIVE1MRWxlbWVudDtcclxuICBkb21PYnM6IE11dGF0aW9uT2JzZXJ2ZXI7XHJcbiAgY29kZTogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIGhpZ2hsaWdodDogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIGxhbmd1YWdlOiBzdHJpbmdbXTtcclxuICBASW5wdXQoJ2NvZGUnKVxyXG4gIHNldCBzZXRDb2RlKGNvZGU6IHN0cmluZykge1xyXG4gICAgdGhpcy5jb2RlID0gY29kZTtcclxuICAgIHRoaXMuaGxqcy5pc1JlYWR5LnN1YnNjcmliZSgoKSA9PiB0aGlzLmhpZ2hsaWdodEVsZW1lbnQodGhpcy5lbCwgY29kZSkpO1xyXG4gIH1cclxuXHJcbiAgQE91dHB1dCgpIGhpZ2hsaWdodGVkID0gbmV3IEV2ZW50RW1pdHRlcjxIaWdobGlnaHRSZXN1bHQ+KCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgaGxqczogSGlnaGxpZ2h0SlMpIHtcclxuICAgIHRoaXMuZWwgPSBlbC5uYXRpdmVFbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcblxyXG4gICAgLyoqIEFjaXR2YXRlIE11dGF0aW9uT2JzZXJ2ZXIgaWYgYGF1dG9gIG9wdGlvbiBpcyB0cnVlIGFuZCBgW2NvZGVdYCBpbnB1dCBpcyBub3QgdXNlZFxyXG4gICAgICogVGhpcyB3aWxsIGhpZ2hsaWdodCB1c2luZyB0aGUgdGV4dCBjb250ZW50ICovXHJcbiAgICBpZiAoIXRoaXMuY29kZSAmJiB0aGlzLmhsanMub3B0aW9ucy5hdXRvKSB7XHJcblxyXG4gICAgICB0aGlzLmhsanMuaXNSZWFkeS5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0VGV4dENvbnRlbnQoKTtcclxuXHJcbiAgICAgICAgLyoqIEhpZ2hsaWdodCB3aGVuIHRleHQgY29udGVudCBjaGFuZ2VzICovXHJcbiAgICAgICAgdGhpcy5kb21PYnMgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigoKSA9PiB0aGlzLmhpZ2hsaWdodFRleHRDb250ZW50KCkpO1xyXG4gICAgICAgIHRoaXMuZG9tT2JzLm9ic2VydmUodGhpcy5lbCwgeyBjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWUgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqIEhpZ2hsaWdodCB1c2luZyBlbGVtZW50IHRleHQgY29udGVudCAqL1xyXG4gIGhpZ2hsaWdodFRleHRDb250ZW50KCkge1xyXG4gICAgaWYgKCF0aGlzLmhpZ2hsaWdodCkge1xyXG4gICAgICBpZiAodGhpcy5lbC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdjb2RlJykge1xyXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0RWxlbWVudCh0aGlzLmVsLCB0aGlzLmVsLmlubmVyVGV4dC50cmltKCkpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihgW0hpZ2hsaWdodERpcmVjdGl2ZV06IFVzZSAnaGlnaGxpZ2h0JyBvbiA8Y29kZT4gZWxlbWVudCBvbmx5YCk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAodGhpcy5oaWdobGlnaHQgPT09ICdhbGwnKSB7XHJcbiAgICAgIHRoaXMuaGlnaGxpZ2h0Q2hpbGRyZW4odGhpcy5lbCwgJ3ByZSBjb2RlJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmhpZ2hsaWdodENoaWxkcmVuKHRoaXMuZWwsIHRoaXMuaGlnaGxpZ2h0KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKiBIaWdobGlnaHQgYSBjb2RlIGJsb2NrICovXHJcbiAgaGlnaGxpZ2h0RWxlbWVudChlbDogSFRNTEVsZW1lbnQsIGNvZGU6IHN0cmluZykge1xyXG5cclxuICAgIGNvbnN0IHJlczogSGlnaGxpZ2h0UmVzdWx0ID0gdGhpcy5obGpzLmhpZ2hsaWdodEF1dG8oY29kZSwgdGhpcy5sYW5ndWFnZSk7XHJcbiAgICBpZiAocmVzLnZhbHVlICE9PSBlbC5pbm5lckhUTUwpIHtcclxuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyhlbCwgJ2hsanMnKTtcclxuICAgICAgdGhpcy5yZW5kZXJlci5zZXRQcm9wZXJ0eShlbCwgJ2lubmVySFRNTCcsIHJlcy52YWx1ZSk7XHJcbiAgICAgIHRoaXMuaGlnaGxpZ2h0ZWQuZW1pdChyZXMpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqIEhpZ2hsaWdodCBtdWx0aXBsZSBjb2RlIGJsb2NrcyAqL1xyXG4gIGhpZ2hsaWdodENoaWxkcmVuKGVsOiBIVE1MRWxlbWVudCwgc2VsZWN0b3I6IHN0cmluZykge1xyXG5cclxuICAgIGNvbnN0IGNvZGVFbGVtZW50cyA9IGVsLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xyXG5cclxuICAgIC8qKiBoaWdobGlnaHQgY2hpbGRyZW4gd2l0aCB0aGUgc2FtZSBzZWxlY3RvciAqL1xyXG4gICAgZnJvbShjb2RlRWxlbWVudHMpLnBpcGUoXHJcbiAgICAgIGZpbHRlcigoY29kZTogSFRNTEVsZW1lbnQpID0+IGNvZGUuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgJiYgY29kZS5jaGlsZE5vZGVzWzBdLm5vZGVOYW1lID09PSAnI3RleHQnKSxcclxuICAgICAgbWFwKChjb2RlRWxlbWVudDogSFRNTEVsZW1lbnQpID0+IHRoaXMuaGlnaGxpZ2h0RWxlbWVudChjb2RlRWxlbWVudCwgY29kZUVsZW1lbnQuaW5uZXJUZXh0LnRyaW0oKSkpLFxyXG4gICAgICB0YWtlKDEpXHJcbiAgICApLnN1YnNjcmliZSgpO1xyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAvKiogRGlzY29ubmVjdCBNdXRhdGlvbk9ic2VydmVyICovXHJcbiAgICBpZiAoIXRoaXMuY29kZSAmJiB0aGlzLmhsanMub3B0aW9ucy5hdXRvKSB7XHJcbiAgICAgIHRoaXMuZG9tT2JzLmRpc2Nvbm5lY3QoKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19