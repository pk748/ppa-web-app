/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Inject, Optional } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { BehaviorSubject, from, of } from 'rxjs';
import { take, filter, tap, switchMap } from 'rxjs/operators';
import { OPTIONS } from './highlight.token';
import * as i0 from "@angular/core";
import * as i1 from "./highlight.token";
import * as i2 from "@angular/common";
import * as ɵngcc0 from '@angular/core';
var HighlightJS = /** @class */ (function () {
    function HighlightJS(options, _document) {
        this._document = _document;
        this.options = {
            theme: 'github',
            path: 'assets/lib/hljs',
            auto: true
        };
        this._isReady$ = new BehaviorSubject(false);
        this.options = tslib_1.__assign({}, this.options, options);
        this._hljsLoader().subscribe();
    }
    Object.defineProperty(HighlightJS.prototype, "isReady", {
        // Stream that emits when highlightjs is loaded
        get: 
        // Stream that emits when highlightjs is loaded
        /**
         * @return {?}
         */
        function () {
            return this._isReady$.pipe(filter(function (isReady) { return isReady; }), take(1));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} name
     * @param {?} value
     * @param {?} ignore_illegals
     * @param {?=} continuation
     * @return {?}
     */
    HighlightJS.prototype.highlight = /**
     * @param {?} name
     * @param {?} value
     * @param {?} ignore_illegals
     * @param {?=} continuation
     * @return {?}
     */
    function (name, value, ignore_illegals, continuation) {
        if (this.hljs) {
            return this.hljs.highlight(name, value, ignore_illegals, continuation);
        }
    };
    /**
     * @param {?} value
     * @param {?} languageSubset
     * @return {?}
     */
    HighlightJS.prototype.highlightAuto = /**
     * @param {?} value
     * @param {?} languageSubset
     * @return {?}
     */
    function (value, languageSubset) {
        if (this.hljs) {
            return this.hljs.highlightAuto(value, languageSubset);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    HighlightJS.prototype.fixMarkup = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.hljs) {
            return this.hljs.fixMarkup(value);
        }
    };
    /**
     * @param {?} block
     * @return {?}
     */
    HighlightJS.prototype.highlightBlock = /**
     * @param {?} block
     * @return {?}
     */
    function (block) {
        if (this.hljs) {
            this.hljs.highlightBlock(block);
        }
    };
    /**
     * @param {?} config
     * @return {?}
     */
    HighlightJS.prototype.configure = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        if (this.hljs) {
            this.hljs.configure(config);
        }
    };
    /**
     * @return {?}
     */
    HighlightJS.prototype.initHighlighting = /**
     * @return {?}
     */
    function () {
        if (this.hljs) {
            this.hljs.initHighlighting();
        }
    };
    /**
     * @return {?}
     */
    HighlightJS.prototype.initHighlightingOnLoad = /**
     * @return {?}
     */
    function () {
        if (this.hljs) {
            this.hljs.initHighlightingOnLoad();
        }
    };
    /**
     * @param {?} name
     * @param {?} language
     * @return {?}
     */
    HighlightJS.prototype.registerLanguage = /**
     * @param {?} name
     * @param {?} language
     * @return {?}
     */
    function (name, language) {
        if (this.hljs) {
            this.hljs.registerLanguage(name, language);
        }
    };
    /**
     * @return {?}
     */
    HighlightJS.prototype.listLanguages = /**
     * @return {?}
     */
    function () {
        if (this.hljs) {
            return this.hljs.listLanguages();
        }
    };
    /**
     * @param {?} name
     * @return {?}
     */
    HighlightJS.prototype.getLanguage = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        if (this.hljs) {
            return this.hljs.getLanguage(name);
        }
    };
    /**
     * @return {?}
     */
    HighlightJS.prototype._hljsLoader = /**
     * @return {?}
     */
    function () {
        if (this._document.defaultView.hljs) {
            return this._initHLJS();
        }
        else {
            this._themeLoader().subscribe();
            return this._loadScript();
        }
    };
    /**
     * Load hljs script
     */
    /**
     * Load hljs script
     * @return {?}
     */
    HighlightJS.prototype._loadScript = /**
     * Load hljs script
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var promise = new Promise(function (resolve) {
            /** @type {?} */
            var script = _this._document.createElement('script');
            script.async = true;
            script.type = 'text/javascript';
            script.onload = resolve;
            script.src = _this.options.path + "/highlight.pack.js";
            _this._document.head.appendChild(script);
        });
        return from(promise).pipe(switchMap(function () { return _this._initHLJS(); }));
    };
    /**
     * Load hljs theme
     */
    /**
     * Load hljs theme
     * @return {?}
     */
    HighlightJS.prototype._themeLoader = /**
     * Load hljs theme
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var promise = new Promise(function (resolve) {
            /** @type {?} */
            var style = _this._document.createElement('link');
            style.rel = 'stylesheet';
            style.type = 'text/css';
            style.onload = resolve;
            style.href = _this.options.path + "/styles/" + _this.options.theme + ".css";
            _this._document.head.appendChild(style);
        });
        return from(promise);
    };
    /**
     * Initialize hljs on load
     */
    /**
     * Initialize hljs on load
     * @return {?}
     */
    HighlightJS.prototype._initHLJS = /**
     * Initialize hljs on load
     * @return {?}
     */
    function () {
        var _this = this;
        return of({}).pipe(tap(function () {
            _this.hljs = _this._document.defaultView.hljs;
            _this.hljs.configure(_this.options.config);
            _this._isReady$.next(true);
        }));
    };
    /** @nocollapse */
    HighlightJS.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [OPTIONS,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    /** @nocollapse */ HighlightJS.ngInjectableDef = i0.defineInjectable({ factory: function HighlightJS_Factory() { return new HighlightJS(i0.inject(i1.OPTIONS, 8), i0.inject(i2.DOCUMENT)); }, token: HighlightJS, providedIn: "root" });
HighlightJS.ɵfac = function HighlightJS_Factory(t) { return new (t || HighlightJS)(ɵngcc0.ɵɵinject(OPTIONS, 8), ɵngcc0.ɵɵinject(DOCUMENT)); };
HighlightJS.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HighlightJS, factory: function (t) { return HighlightJS.ɵfac(t); }, providedIn: 'root' });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HighlightJS, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [OPTIONS]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, null); })();
    return HighlightJS;
}());
export { HighlightJS };
if (false) {
    /** @type {?} */
    HighlightJS.prototype.hljs;
    /** @type {?} */
    HighlightJS.prototype.options;
    /** @type {?} */
    HighlightJS.prototype._isReady$;
    /** @type {?} */
    HighlightJS.prototype._document;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,