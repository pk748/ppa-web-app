import { InjectionToken, Injectable, Inject, Optional, Directive, ElementRef, Renderer2, Input, Output, EventEmitter, NgModule, defineInjectable, inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { BehaviorSubject, from, of } from 'rxjs';
import { take, filter, tap, switchMap, map } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
const OPTIONS = new InjectionToken('OPTIONS');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class HighlightJS {
    /**
     * @param {?} options
     * @param {?} _document
     */
    constructor(options, _document) {
        this._document = _document;
        this.options = {
            theme: 'github',
            path: 'assets/lib/hljs',
            auto: true
        };
        this._isReady$ = new BehaviorSubject(false);
        this.options = Object.assign({}, this.options, options);
        this._hljsLoader().subscribe();
    }
    // Stream that emits when highlightjs is loaded
    /**
     * @return {?}
     */
    get isReady() {
        return this._isReady$.pipe(filter(isReady => isReady), take(1));
    }
    /**
     * @param {?} name
     * @param {?} value
     * @param {?} ignore_illegals
     * @param {?=} continuation
     * @return {?}
     */
    highlight(name, value, ignore_illegals, continuation) {
        if (this.hljs) {
            return this.hljs.highlight(name, value, ignore_illegals, continuation);
        }
    }
    /**
     * @param {?} value
     * @param {?} languageSubset
     * @return {?}
     */
    highlightAuto(value, languageSubset) {
        if (this.hljs) {
            return this.hljs.highlightAuto(value, languageSubset);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    fixMarkup(value) {
        if (this.hljs) {
            return this.hljs.fixMarkup(value);
        }
    }
    /**
     * @param {?} block
     * @return {?}
     */
    highlightBlock(block) {
        if (this.hljs) {
            this.hljs.highlightBlock(block);
        }
    }
    /**
     * @param {?} config
     * @return {?}
     */
    configure(config) {
        if (this.hljs) {
            this.hljs.configure(config);
        }
    }
    /**
     * @return {?}
     */
    initHighlighting() {
        if (this.hljs) {
            this.hljs.initHighlighting();
        }
    }
    /**
     * @return {?}
     */
    initHighlightingOnLoad() {
        if (this.hljs) {
            this.hljs.initHighlightingOnLoad();
        }
    }
    /**
     * @param {?} name
     * @param {?} language
     * @return {?}
     */
    registerLanguage(name, language) {
        if (this.hljs) {
            this.hljs.registerLanguage(name, language);
        }
    }
    /**
     * @return {?}
     */
    listLanguages() {
        if (this.hljs) {
            return this.hljs.listLanguages();
        }
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getLanguage(name) {
        if (this.hljs) {
            return this.hljs.getLanguage(name);
        }
    }
    /**
     * @return {?}
     */
    _hljsLoader() {
        if (this._document.defaultView.hljs) {
            return this._initHLJS();
        }
        else {
            this._themeLoader().subscribe();
            return this._loadScript();
        }
    }
    /**
     * Load hljs script
     * @return {?}
     */
    _loadScript() {
        /** @type {?} */
        const promise = new Promise((resolve) => {
            /** @type {?} */
            const script = this._document.createElement('script');
            script.async = true;
            script.type = 'text/javascript';
            script.onload = resolve;
            script.src = `${this.options.path}/highlight.pack.js`;
            this._document.head.appendChild(script);
        });
        return from(promise).pipe(switchMap(() => this._initHLJS()));
    }
    /**
     * Load hljs theme
     * @return {?}
     */
    _themeLoader() {
        /** @type {?} */
        const promise = new Promise((resolve) => {
            /** @type {?} */
            const style = this._document.createElement('link');
            style.rel = 'stylesheet';
            style.type = 'text/css';
            style.onload = resolve;
            style.href = `${this.options.path}/styles/${this.options.theme}.css`;
            this._document.head.appendChild(style);
        });
        return from(promise);
    }
    /**
     * Initialize hljs on load
     * @return {?}
     */
    _initHLJS() {
        return of({}).pipe(tap(() => {
            this.hljs = this._document.defaultView.hljs;
            this.hljs.configure(this.options.config);
            this._isReady$.next(true);
        }));
    }
}
HighlightJS.ɵfac = function HighlightJS_Factory(t) { return new (t || HighlightJS)(ɵngcc0.ɵɵinject(OPTIONS, 8), ɵngcc0.ɵɵinject(DOCUMENT)); };
HighlightJS.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HighlightJS, factory: HighlightJS.ɵfac, providedIn: 'root' });
/** @nocollapse */
HighlightJS.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [OPTIONS,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
/** @nocollapse */ HighlightJS.ngInjectableDef = defineInjectable({ factory: function HighlightJS_Factory() { return new HighlightJS(inject(OPTIONS, 8), inject(DOCUMENT)); }, token: HighlightJS, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HighlightJS, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [OPTIONS]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * There are 2 ways to higlight a code
 *  1 - using the [code] input (default) <code highlight [code]="yourCode"></code>
 *  2 - using element text content <code> {{yourCode}} </code>
 */
class HighlightDirective {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} hljs
     */
    constructor(el, renderer, hljs) {
        this.renderer = renderer;
        this.hljs = hljs;
        this.highlighted = new EventEmitter();
        this.el = el.nativeElement;
    }
    /**
     * @param {?} code
     * @return {?}
     */
    set setCode(code) {
        this.code = code;
        this.hljs.isReady.subscribe(() => this.highlightElement(this.el, code));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** Acitvate MutationObserver if `auto` option is true and `[code]` input is not used
         * This will highlight using the text content */
        if (!this.code && this.hljs.options.auto) {
            this.hljs.isReady.subscribe(() => {
                this.highlightTextContent();
                /** Highlight when text content changes */
                this.domObs = new MutationObserver(() => this.highlightTextContent());
                this.domObs.observe(this.el, { childList: true, subtree: true });
            });
        }
    }
    /**
     * Highlight using element text content
     * @return {?}
     */
    highlightTextContent() {
        if (!this.highlight) {
            if (this.el.tagName.toLowerCase() === 'code') {
                this.highlightElement(this.el, this.el.innerText.trim());
            }
            else {
                console.warn(`[HighlightDirective]: Use 'highlight' on <code> element only`);
            }
        }
        else if (this.highlight === 'all') {
            this.highlightChildren(this.el, 'pre code');
        }
        else {
            this.highlightChildren(this.el, this.highlight);
        }
    }
    /**
     * Highlight a code block
     * @param {?} el
     * @param {?} code
     * @return {?}
     */
    highlightElement(el, code) {
        /** @type {?} */
        const res = this.hljs.highlightAuto(code, this.language);
        if (res.value !== el.innerHTML) {
            this.renderer.addClass(el, 'hljs');
            this.renderer.setProperty(el, 'innerHTML', res.value);
            this.highlighted.emit(res);
        }
    }
    /**
     * Highlight multiple code blocks
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */
    highlightChildren(el, selector) {
        /** @type {?} */
        const codeElements = el.querySelectorAll(selector);
        /** highlight children with the same selector */
        from(codeElements).pipe(filter((code) => code.childNodes.length === 1 && code.childNodes[0].nodeName === '#text'), map((codeElement) => this.highlightElement(codeElement, codeElement.innerText.trim())), take(1)).subscribe();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        /** Disconnect MutationObserver */
        if (!this.code && this.hljs.options.auto) {
            this.domObs.disconnect();
        }
    }
}
HighlightDirective.ɵfac = function HighlightDirective_Factory(t) { return new (t || HighlightDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(HighlightJS)); };
HighlightDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: HighlightDirective, selectors: [["", "highlight", ""]], inputs: { setCode: ["code", "setCode"], highlight: "highlight", language: "language" }, outputs: { highlighted: "highlighted" } });
/** @nocollapse */
HighlightDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: HighlightJS }
];
HighlightDirective.propDecorators = {
    highlight: [{ type: Input }],
    language: [{ type: Input }],
    setCode: [{ type: Input, args: ['code',] }],
    highlighted: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HighlightDirective, [{
        type: Directive,
        args: [{
                selector: '[highlight]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: HighlightJS }]; }, { highlighted: [{
            type: Output
        }], setCode: [{
            type: Input,
            args: ['code']
        }], highlight: [{
            type: Input
        }], language: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class HighlightModule {
    /**
     * @param {?=} options
     * @return {?}
     */
    static forRoot(options) {
        return {
            ngModule: HighlightModule,
            providers: [
                { provide: OPTIONS, useValue: options }
            ]
        };
    }
}
HighlightModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: HighlightModule });
HighlightModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function HighlightModule_Factory(t) { return new (t || HighlightModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HighlightModule, { declarations: [HighlightDirective], exports: [HighlightDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HighlightModule, [{
        type: NgModule,
        args: [{
                declarations: [HighlightDirective],
                exports: [HighlightDirective]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { HighlightModule, HighlightJS, HighlightDirective, OPTIONS as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,