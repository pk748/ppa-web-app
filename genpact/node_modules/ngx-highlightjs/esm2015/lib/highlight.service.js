/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Injectable, Inject, Optional } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { BehaviorSubject, from, of } from 'rxjs';
import { take, filter, tap, switchMap } from 'rxjs/operators';
import { OPTIONS } from './highlight.token';
import * as i0 from "@angular/core";
import * as i1 from "./highlight.token";
import * as i2 from "@angular/common";
import * as ɵngcc0 from '@angular/core';
export class HighlightJS {
    /**
     * @param {?} options
     * @param {?} _document
     */
    constructor(options, _document) {
        this._document = _document;
        this.options = {
            theme: 'github',
            path: 'assets/lib/hljs',
            auto: true
        };
        this._isReady$ = new BehaviorSubject(false);
        this.options = Object.assign({}, this.options, options);
        this._hljsLoader().subscribe();
    }
    // Stream that emits when highlightjs is loaded
    /**
     * @return {?}
     */
    get isReady() {
        return this._isReady$.pipe(filter(isReady => isReady), take(1));
    }
    /**
     * @param {?} name
     * @param {?} value
     * @param {?} ignore_illegals
     * @param {?=} continuation
     * @return {?}
     */
    highlight(name, value, ignore_illegals, continuation) {
        if (this.hljs) {
            return this.hljs.highlight(name, value, ignore_illegals, continuation);
        }
    }
    /**
     * @param {?} value
     * @param {?} languageSubset
     * @return {?}
     */
    highlightAuto(value, languageSubset) {
        if (this.hljs) {
            return this.hljs.highlightAuto(value, languageSubset);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    fixMarkup(value) {
        if (this.hljs) {
            return this.hljs.fixMarkup(value);
        }
    }
    /**
     * @param {?} block
     * @return {?}
     */
    highlightBlock(block) {
        if (this.hljs) {
            this.hljs.highlightBlock(block);
        }
    }
    /**
     * @param {?} config
     * @return {?}
     */
    configure(config) {
        if (this.hljs) {
            this.hljs.configure(config);
        }
    }
    /**
     * @return {?}
     */
    initHighlighting() {
        if (this.hljs) {
            this.hljs.initHighlighting();
        }
    }
    /**
     * @return {?}
     */
    initHighlightingOnLoad() {
        if (this.hljs) {
            this.hljs.initHighlightingOnLoad();
        }
    }
    /**
     * @param {?} name
     * @param {?} language
     * @return {?}
     */
    registerLanguage(name, language) {
        if (this.hljs) {
            this.hljs.registerLanguage(name, language);
        }
    }
    /**
     * @return {?}
     */
    listLanguages() {
        if (this.hljs) {
            return this.hljs.listLanguages();
        }
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getLanguage(name) {
        if (this.hljs) {
            return this.hljs.getLanguage(name);
        }
    }
    /**
     * @return {?}
     */
    _hljsLoader() {
        if (this._document.defaultView.hljs) {
            return this._initHLJS();
        }
        else {
            this._themeLoader().subscribe();
            return this._loadScript();
        }
    }
    /**
     * Load hljs script
     * @return {?}
     */
    _loadScript() {
        /** @type {?} */
        const promise = new Promise((resolve) => {
            /** @type {?} */
            const script = this._document.createElement('script');
            script.async = true;
            script.type = 'text/javascript';
            script.onload = resolve;
            script.src = `${this.options.path}/highlight.pack.js`;
            this._document.head.appendChild(script);
        });
        return from(promise).pipe(switchMap(() => this._initHLJS()));
    }
    /**
     * Load hljs theme
     * @return {?}
     */
    _themeLoader() {
        /** @type {?} */
        const promise = new Promise((resolve) => {
            /** @type {?} */
            const style = this._document.createElement('link');
            style.rel = 'stylesheet';
            style.type = 'text/css';
            style.onload = resolve;
            style.href = `${this.options.path}/styles/${this.options.theme}.css`;
            this._document.head.appendChild(style);
        });
        return from(promise);
    }
    /**
     * Initialize hljs on load
     * @return {?}
     */
    _initHLJS() {
        return of({}).pipe(tap(() => {
            this.hljs = this._document.defaultView.hljs;
            this.hljs.configure(this.options.config);
            this._isReady$.next(true);
        }));
    }
}
HighlightJS.ɵfac = function HighlightJS_Factory(t) { return new (t || HighlightJS)(ɵngcc0.ɵɵinject(OPTIONS, 8), ɵngcc0.ɵɵinject(DOCUMENT)); };
HighlightJS.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HighlightJS, factory: HighlightJS.ɵfac, providedIn: 'root' });
/** @nocollapse */
HighlightJS.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [OPTIONS,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
/** @nocollapse */ HighlightJS.ngInjectableDef = i0.defineInjectable({ factory: function HighlightJS_Factory() { return new HighlightJS(i0.inject(i1.OPTIONS, 8), i0.inject(i2.DOCUMENT)); }, token: HighlightJS, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HighlightJS, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [OPTIONS]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, null); })();
if (false) {
    /** @type {?} */
    HighlightJS.prototype.hljs;
    /** @type {?} */
    HighlightJS.prototype.options;
    /** @type {?} */
    HighlightJS.prototype._isReady$;
    /** @type {?} */
    HighlightJS.prototype._document;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,