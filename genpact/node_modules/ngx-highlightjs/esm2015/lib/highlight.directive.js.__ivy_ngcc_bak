/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Renderer2, Input, Output, EventEmitter } from '@angular/core';
import { from } from 'rxjs';
import { map, take, filter } from 'rxjs/operators';
import { HighlightJS } from './highlight.service';
/**
 * There are 2 ways to higlight a code
 *  1 - using the [code] input (default) <code highlight [code]="yourCode"></code>
 *  2 - using element text content <code> {{yourCode}} </code>
 */
export class HighlightDirective {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} hljs
     */
    constructor(el, renderer, hljs) {
        this.renderer = renderer;
        this.hljs = hljs;
        this.highlighted = new EventEmitter();
        this.el = el.nativeElement;
    }
    /**
     * @param {?} code
     * @return {?}
     */
    set setCode(code) {
        this.code = code;
        this.hljs.isReady.subscribe(() => this.highlightElement(this.el, code));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** Acitvate MutationObserver if `auto` option is true and `[code]` input is not used
         * This will highlight using the text content */
        if (!this.code && this.hljs.options.auto) {
            this.hljs.isReady.subscribe(() => {
                this.highlightTextContent();
                /** Highlight when text content changes */
                this.domObs = new MutationObserver(() => this.highlightTextContent());
                this.domObs.observe(this.el, { childList: true, subtree: true });
            });
        }
    }
    /**
     * Highlight using element text content
     * @return {?}
     */
    highlightTextContent() {
        if (!this.highlight) {
            if (this.el.tagName.toLowerCase() === 'code') {
                this.highlightElement(this.el, this.el.innerText.trim());
            }
            else {
                console.warn(`[HighlightDirective]: Use 'highlight' on <code> element only`);
            }
        }
        else if (this.highlight === 'all') {
            this.highlightChildren(this.el, 'pre code');
        }
        else {
            this.highlightChildren(this.el, this.highlight);
        }
    }
    /**
     * Highlight a code block
     * @param {?} el
     * @param {?} code
     * @return {?}
     */
    highlightElement(el, code) {
        /** @type {?} */
        const res = this.hljs.highlightAuto(code, this.language);
        if (res.value !== el.innerHTML) {
            this.renderer.addClass(el, 'hljs');
            this.renderer.setProperty(el, 'innerHTML', res.value);
            this.highlighted.emit(res);
        }
    }
    /**
     * Highlight multiple code blocks
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */
    highlightChildren(el, selector) {
        /** @type {?} */
        const codeElements = el.querySelectorAll(selector);
        /** highlight children with the same selector */
        from(codeElements).pipe(filter((code) => code.childNodes.length === 1 && code.childNodes[0].nodeName === '#text'), map((codeElement) => this.highlightElement(codeElement, codeElement.innerText.trim())), take(1)).subscribe();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        /** Disconnect MutationObserver */
        if (!this.code && this.hljs.options.auto) {
            this.domObs.disconnect();
        }
    }
}
HighlightDirective.decorators = [
    { type: Directive, args: [{
                selector: '[highlight]'
            },] }
];
/** @nocollapse */
HighlightDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: HighlightJS }
];
HighlightDirective.propDecorators = {
    highlight: [{ type: Input }],
    language: [{ type: Input }],
    setCode: [{ type: Input, args: ['code',] }],
    highlighted: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    HighlightDirective.prototype.el;
    /** @type {?} */
    HighlightDirective.prototype.domObs;
    /** @type {?} */
    HighlightDirective.prototype.code;
    /** @type {?} */
    HighlightDirective.prototype.highlight;
    /** @type {?} */
    HighlightDirective.prototype.language;
    /** @type {?} */
    HighlightDirective.prototype.highlighted;
    /** @type {?} */
    HighlightDirective.prototype.renderer;
    /** @type {?} */
    HighlightDirective.prototype.hljs;
}
//# sourceMappingURL=data:application/json;base64,