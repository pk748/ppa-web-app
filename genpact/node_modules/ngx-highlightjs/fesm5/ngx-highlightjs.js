import { InjectionToken, Injectable, Inject, Optional, NgModule, Directive, ElementRef, Renderer2, Input, Output, EventEmitter, defineInjectable, inject } from '@angular/core';
import { __assign } from 'tslib';
import { DOCUMENT } from '@angular/common';
import { BehaviorSubject, from, of } from 'rxjs';
import { take, filter, tap, switchMap, map } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
var OPTIONS = new InjectionToken('OPTIONS');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var HighlightJS = /** @class */ (function () {
    function HighlightJS(options, _document) {
        this._document = _document;
        this.options = {
            theme: 'github',
            path: 'assets/lib/hljs',
            auto: true
        };
        this._isReady$ = new BehaviorSubject(false);
        this.options = __assign({}, this.options, options);
        this._hljsLoader().subscribe();
    }
    Object.defineProperty(HighlightJS.prototype, "isReady", {
        // Stream that emits when highlightjs is loaded
        get: 
        // Stream that emits when highlightjs is loaded
        /**
         * @return {?}
         */
        function () {
            return this._isReady$.pipe(filter(function (isReady) { return isReady; }), take(1));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} name
     * @param {?} value
     * @param {?} ignore_illegals
     * @param {?=} continuation
     * @return {?}
     */
    HighlightJS.prototype.highlight = /**
     * @param {?} name
     * @param {?} value
     * @param {?} ignore_illegals
     * @param {?=} continuation
     * @return {?}
     */
    function (name, value, ignore_illegals, continuation) {
        if (this.hljs) {
            return this.hljs.highlight(name, value, ignore_illegals, continuation);
        }
    };
    /**
     * @param {?} value
     * @param {?} languageSubset
     * @return {?}
     */
    HighlightJS.prototype.highlightAuto = /**
     * @param {?} value
     * @param {?} languageSubset
     * @return {?}
     */
    function (value, languageSubset) {
        if (this.hljs) {
            return this.hljs.highlightAuto(value, languageSubset);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    HighlightJS.prototype.fixMarkup = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.hljs) {
            return this.hljs.fixMarkup(value);
        }
    };
    /**
     * @param {?} block
     * @return {?}
     */
    HighlightJS.prototype.highlightBlock = /**
     * @param {?} block
     * @return {?}
     */
    function (block) {
        if (this.hljs) {
            this.hljs.highlightBlock(block);
        }
    };
    /**
     * @param {?} config
     * @return {?}
     */
    HighlightJS.prototype.configure = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        if (this.hljs) {
            this.hljs.configure(config);
        }
    };
    /**
     * @return {?}
     */
    HighlightJS.prototype.initHighlighting = /**
     * @return {?}
     */
    function () {
        if (this.hljs) {
            this.hljs.initHighlighting();
        }
    };
    /**
     * @return {?}
     */
    HighlightJS.prototype.initHighlightingOnLoad = /**
     * @return {?}
     */
    function () {
        if (this.hljs) {
            this.hljs.initHighlightingOnLoad();
        }
    };
    /**
     * @param {?} name
     * @param {?} language
     * @return {?}
     */
    HighlightJS.prototype.registerLanguage = /**
     * @param {?} name
     * @param {?} language
     * @return {?}
     */
    function (name, language) {
        if (this.hljs) {
            this.hljs.registerLanguage(name, language);
        }
    };
    /**
     * @return {?}
     */
    HighlightJS.prototype.listLanguages = /**
     * @return {?}
     */
    function () {
        if (this.hljs) {
            return this.hljs.listLanguages();
        }
    };
    /**
     * @param {?} name
     * @return {?}
     */
    HighlightJS.prototype.getLanguage = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        if (this.hljs) {
            return this.hljs.getLanguage(name);
        }
    };
    /**
     * @return {?}
     */
    HighlightJS.prototype._hljsLoader = /**
     * @return {?}
     */
    function () {
        if (this._document.defaultView.hljs) {
            return this._initHLJS();
        }
        else {
            this._themeLoader().subscribe();
            return this._loadScript();
        }
    };
    /**
     * Load hljs script
     */
    /**
     * Load hljs script
     * @return {?}
     */
    HighlightJS.prototype._loadScript = /**
     * Load hljs script
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var promise = new Promise(function (resolve) {
            /** @type {?} */
            var script = _this._document.createElement('script');
            script.async = true;
            script.type = 'text/javascript';
            script.onload = resolve;
            script.src = _this.options.path + "/highlight.pack.js";
            _this._document.head.appendChild(script);
        });
        return from(promise).pipe(switchMap(function () { return _this._initHLJS(); }));
    };
    /**
     * Load hljs theme
     */
    /**
     * Load hljs theme
     * @return {?}
     */
    HighlightJS.prototype._themeLoader = /**
     * Load hljs theme
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var promise = new Promise(function (resolve) {
            /** @type {?} */
            var style = _this._document.createElement('link');
            style.rel = 'stylesheet';
            style.type = 'text/css';
            style.onload = resolve;
            style.href = _this.options.path + "/styles/" + _this.options.theme + ".css";
            _this._document.head.appendChild(style);
        });
        return from(promise);
    };
    /**
     * Initialize hljs on load
     */
    /**
     * Initialize hljs on load
     * @return {?}
     */
    HighlightJS.prototype._initHLJS = /**
     * Initialize hljs on load
     * @return {?}
     */
    function () {
        var _this = this;
        return of({}).pipe(tap(function () {
            _this.hljs = _this._document.defaultView.hljs;
            _this.hljs.configure(_this.options.config);
            _this._isReady$.next(true);
        }));
    };
    /** @nocollapse */
    HighlightJS.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [OPTIONS,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    /** @nocollapse */ HighlightJS.ngInjectableDef = defineInjectable({ factory: function HighlightJS_Factory() { return new HighlightJS(inject(OPTIONS, 8), inject(DOCUMENT)); }, token: HighlightJS, providedIn: "root" });
HighlightJS.ɵfac = function HighlightJS_Factory(t) { return new (t || HighlightJS)(ɵngcc0.ɵɵinject(OPTIONS, 8), ɵngcc0.ɵɵinject(DOCUMENT)); };
HighlightJS.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HighlightJS, factory: function (t) { return HighlightJS.ɵfac(t); }, providedIn: 'root' });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HighlightJS, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [OPTIONS]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, null); })();
    return HighlightJS;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * There are 2 ways to higlight a code
 *  1 - using the [code] input (default) <code highlight [code]="yourCode"></code>
 *  2 - using element text content <code> {{yourCode}} </code>
 */
var HighlightDirective = /** @class */ (function () {
    function HighlightDirective(el, renderer, hljs) {
        this.renderer = renderer;
        this.hljs = hljs;
        this.highlighted = new EventEmitter();
        this.el = el.nativeElement;
    }
    Object.defineProperty(HighlightDirective.prototype, "setCode", {
        set: /**
         * @param {?} code
         * @return {?}
         */
        function (code) {
            var _this = this;
            this.code = code;
            this.hljs.isReady.subscribe(function () { return _this.highlightElement(_this.el, code); });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    HighlightDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** Acitvate MutationObserver if `auto` option is true and `[code]` input is not used
         * This will highlight using the text content */
        if (!this.code && this.hljs.options.auto) {
            this.hljs.isReady.subscribe(function () {
                _this.highlightTextContent();
                /** Highlight when text content changes */
                _this.domObs = new MutationObserver(function () { return _this.highlightTextContent(); });
                _this.domObs.observe(_this.el, { childList: true, subtree: true });
            });
        }
    };
    /** Highlight using element text content */
    /**
     * Highlight using element text content
     * @return {?}
     */
    HighlightDirective.prototype.highlightTextContent = /**
     * Highlight using element text content
     * @return {?}
     */
    function () {
        if (!this.highlight) {
            if (this.el.tagName.toLowerCase() === 'code') {
                this.highlightElement(this.el, this.el.innerText.trim());
            }
            else {
                console.warn("[HighlightDirective]: Use 'highlight' on <code> element only");
            }
        }
        else if (this.highlight === 'all') {
            this.highlightChildren(this.el, 'pre code');
        }
        else {
            this.highlightChildren(this.el, this.highlight);
        }
    };
    /** Highlight a code block */
    /**
     * Highlight a code block
     * @param {?} el
     * @param {?} code
     * @return {?}
     */
    HighlightDirective.prototype.highlightElement = /**
     * Highlight a code block
     * @param {?} el
     * @param {?} code
     * @return {?}
     */
    function (el, code) {
        /** @type {?} */
        var res = this.hljs.highlightAuto(code, this.language);
        if (res.value !== el.innerHTML) {
            this.renderer.addClass(el, 'hljs');
            this.renderer.setProperty(el, 'innerHTML', res.value);
            this.highlighted.emit(res);
        }
    };
    /** Highlight multiple code blocks */
    /**
     * Highlight multiple code blocks
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */
    HighlightDirective.prototype.highlightChildren = /**
     * Highlight multiple code blocks
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */
    function (el, selector) {
        var _this = this;
        /** @type {?} */
        var codeElements = el.querySelectorAll(selector);
        /** highlight children with the same selector */
        from(codeElements).pipe(filter(function (code) { return code.childNodes.length === 1 && code.childNodes[0].nodeName === '#text'; }), map(function (codeElement) { return _this.highlightElement(codeElement, codeElement.innerText.trim()); }), take(1)).subscribe();
    };
    /**
     * @return {?}
     */
    HighlightDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        /** Disconnect MutationObserver */
        if (!this.code && this.hljs.options.auto) {
            this.domObs.disconnect();
        }
    };
    /** @nocollapse */
    HighlightDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: HighlightJS }
    ]; };
    HighlightDirective.propDecorators = {
        highlight: [{ type: Input }],
        language: [{ type: Input }],
        setCode: [{ type: Input, args: ['code',] }],
        highlighted: [{ type: Output }]
    };
HighlightDirective.ɵfac = function HighlightDirective_Factory(t) { return new (t || HighlightDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(HighlightJS)); };
HighlightDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: HighlightDirective, selectors: [["", "highlight", ""]], inputs: { setCode: ["code", "setCode"], highlight: "highlight", language: "language" }, outputs: { highlighted: "highlighted" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HighlightDirective, [{
        type: Directive,
        args: [{
                selector: '[highlight]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: HighlightJS }]; }, { highlighted: [{
            type: Output
        }], setCode: [{
            type: Input,
            args: ['code']
        }], highlight: [{
            type: Input
        }], language: [{
            type: Input
        }] }); })();
    return HighlightDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var HighlightModule = /** @class */ (function () {
    function HighlightModule() {
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    HighlightModule.forRoot = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        return {
            ngModule: HighlightModule,
            providers: [
                { provide: OPTIONS, useValue: options }
            ]
        };
    };
HighlightModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: HighlightModule });
HighlightModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function HighlightModule_Factory(t) { return new (t || HighlightModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HighlightModule, { declarations: [HighlightDirective], exports: [HighlightDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HighlightModule, [{
        type: NgModule,
        args: [{
                declarations: [HighlightDirective],
                exports: [HighlightDirective]
            }]
    }], function () { return []; }, null); })();
    return HighlightModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { HighlightModule, HighlightJS, HighlightDirective, OPTIONS as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,