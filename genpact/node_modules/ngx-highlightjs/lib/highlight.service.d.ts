import { Observable } from 'rxjs';
import { HighlightConfig, HighlightOptions, HighlightResult } from './highlight.model';
import * as ɵngcc0 from '@angular/core';
export declare class HighlightJS {
    private _document;
    hljs: any;
    options: HighlightOptions;
    private _isReady$;
    readonly isReady: Observable<boolean>;
    constructor(options: HighlightOptions, _document: any);
    highlight(name: string, value: string, ignore_illegals: boolean, continuation?: any): HighlightResult;
    highlightAuto(value: string, languageSubset: string[]): HighlightResult;
    fixMarkup(value: string): string;
    highlightBlock(block: HTMLElement): void;
    configure(config: HighlightConfig): void;
    initHighlighting(): void;
    initHighlightingOnLoad(): void;
    registerLanguage(name: string, language: Function): void;
    listLanguages(): string[];
    getLanguage(name: string): any;
    private _hljsLoader;
    /**
     * Load hljs script
     */
    private _loadScript;
    /**
     * Load hljs theme
     */
    private _themeLoader;
    /**
     * Initialize hljs on load
     */
    private _initHLJS;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<HighlightJS, [{ optional: true; }, null]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<HighlightJS>;
}

//# sourceMappingURL=highlight.service.d.ts.map