(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),exports, require('@angular/core'), require('@angular/common'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('ngx-highlightjs', ['@angular/core','exports', '@angular/core', '@angular/common', 'rxjs', 'rxjs/operators'], factory) :
    (factory(global.ng.core,(global['ngx-highlightjs'] = {}),global.ng.core,global.ng.common,global.rxjs,global.rxjs.operators));
}(this, (function (Éµngcc0,exports,i0,i2,rxjs,operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var OPTIONS = new i0.InjectionToken('OPTIONS');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var HighlightJS = /** @class */ (function () {
        function HighlightJS(options, _document) {
            this._document = _document;
            this.options = {
                theme: 'github',
                path: 'assets/lib/hljs',
                auto: true
            };
            this._isReady$ = new rxjs.BehaviorSubject(false);
            this.options = __assign({}, this.options, options);
            this._hljsLoader().subscribe();
        }
        Object.defineProperty(HighlightJS.prototype, "isReady", {
            // Stream that emits when highlightjs is loaded
            get: 
            // Stream that emits when highlightjs is loaded
            /**
             * @return {?}
             */
            function () {
                return this._isReady$.pipe(operators.filter(function (isReady) { return isReady; }), operators.take(1));
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} name
         * @param {?} value
         * @param {?} ignore_illegals
         * @param {?=} continuation
         * @return {?}
         */
        HighlightJS.prototype.highlight = /**
         * @param {?} name
         * @param {?} value
         * @param {?} ignore_illegals
         * @param {?=} continuation
         * @return {?}
         */
            function (name, value, ignore_illegals, continuation) {
                if (this.hljs) {
                    return this.hljs.highlight(name, value, ignore_illegals, continuation);
                }
            };
        /**
         * @param {?} value
         * @param {?} languageSubset
         * @return {?}
         */
        HighlightJS.prototype.highlightAuto = /**
         * @param {?} value
         * @param {?} languageSubset
         * @return {?}
         */
            function (value, languageSubset) {
                if (this.hljs) {
                    return this.hljs.highlightAuto(value, languageSubset);
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        HighlightJS.prototype.fixMarkup = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (this.hljs) {
                    return this.hljs.fixMarkup(value);
                }
            };
        /**
         * @param {?} block
         * @return {?}
         */
        HighlightJS.prototype.highlightBlock = /**
         * @param {?} block
         * @return {?}
         */
            function (block) {
                if (this.hljs) {
                    this.hljs.highlightBlock(block);
                }
            };
        /**
         * @param {?} config
         * @return {?}
         */
        HighlightJS.prototype.configure = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                if (this.hljs) {
                    this.hljs.configure(config);
                }
            };
        /**
         * @return {?}
         */
        HighlightJS.prototype.initHighlighting = /**
         * @return {?}
         */
            function () {
                if (this.hljs) {
                    this.hljs.initHighlighting();
                }
            };
        /**
         * @return {?}
         */
        HighlightJS.prototype.initHighlightingOnLoad = /**
         * @return {?}
         */
            function () {
                if (this.hljs) {
                    this.hljs.initHighlightingOnLoad();
                }
            };
        /**
         * @param {?} name
         * @param {?} language
         * @return {?}
         */
        HighlightJS.prototype.registerLanguage = /**
         * @param {?} name
         * @param {?} language
         * @return {?}
         */
            function (name, language) {
                if (this.hljs) {
                    this.hljs.registerLanguage(name, language);
                }
            };
        /**
         * @return {?}
         */
        HighlightJS.prototype.listLanguages = /**
         * @return {?}
         */
            function () {
                if (this.hljs) {
                    return this.hljs.listLanguages();
                }
            };
        /**
         * @param {?} name
         * @return {?}
         */
        HighlightJS.prototype.getLanguage = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                if (this.hljs) {
                    return this.hljs.getLanguage(name);
                }
            };
        /**
         * @return {?}
         */
        HighlightJS.prototype._hljsLoader = /**
         * @return {?}
         */
            function () {
                if (this._document.defaultView.hljs) {
                    return this._initHLJS();
                }
                else {
                    this._themeLoader().subscribe();
                    return this._loadScript();
                }
            };
        /**
         * Load hljs script
         */
        /**
         * Load hljs script
         * @return {?}
         */
        HighlightJS.prototype._loadScript = /**
         * Load hljs script
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var promise = new Promise(function (resolve) {
                    /** @type {?} */
                    var script = _this._document.createElement('script');
                    script.async = true;
                    script.type = 'text/javascript';
                    script.onload = resolve;
                    script.src = _this.options.path + "/highlight.pack.js";
                    _this._document.head.appendChild(script);
                });
                return rxjs.from(promise).pipe(operators.switchMap(function () { return _this._initHLJS(); }));
            };
        /**
         * Load hljs theme
         */
        /**
         * Load hljs theme
         * @return {?}
         */
        HighlightJS.prototype._themeLoader = /**
         * Load hljs theme
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var promise = new Promise(function (resolve) {
                    /** @type {?} */
                    var style = _this._document.createElement('link');
                    style.rel = 'stylesheet';
                    style.type = 'text/css';
                    style.onload = resolve;
                    style.href = _this.options.path + "/styles/" + _this.options.theme + ".css";
                    _this._document.head.appendChild(style);
                });
                return rxjs.from(promise);
            };
        /**
         * Initialize hljs on load
         */
        /**
         * Initialize hljs on load
         * @return {?}
         */
        HighlightJS.prototype._initHLJS = /**
         * Initialize hljs on load
         * @return {?}
         */
            function () {
                var _this = this;
                return rxjs.of({}).pipe(operators.tap(function () {
                    _this.hljs = _this._document.defaultView.hljs;
                    _this.hljs.configure(_this.options.config);
                    _this._isReady$.next(true);
                }));
            };
        /** @nocollapse */
        HighlightJS.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [OPTIONS,] }] },
                { type: undefined, decorators: [{ type: i0.Inject, args: [i2.DOCUMENT,] }] }
            ];
        };
        /** @nocollapse */ HighlightJS.ngInjectableDef = i0.defineInjectable({ factory: function HighlightJS_Factory() { return new HighlightJS(i0.inject(OPTIONS, 8), i0.inject(i2.DOCUMENT)); }, token: HighlightJS, providedIn: "root" });
HighlightJS.Éµfac = function HighlightJS_Factory(t) { return new (t || HighlightJS)(Éµngcc0.ÉµÉµinject(OPTIONS, 8), Éµngcc0.ÉµÉµinject(i2.DOCUMENT)); };
HighlightJS.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({ token: HighlightJS, factory: function (t) { return HighlightJS.Éµfac(t); }, providedIn: 'root' });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(HighlightJS, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: i0.Optional
            }, {
                type: i0.Inject,
                args: [OPTIONS]
            }] }, { type: undefined, decorators: [{
                type: i0.Inject,
                args: [i2.DOCUMENT]
            }] }]; }, null); })();
        return HighlightJS;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /**
     * There are 2 ways to higlight a code
     *  1 - using the [code] input (default) <code highlight [code]="yourCode"></code>
     *  2 - using element text content <code> {{yourCode}} </code>
     */
    var HighlightDirective = /** @class */ (function () {
        function HighlightDirective(el, renderer, hljs) {
            this.renderer = renderer;
            this.hljs = hljs;
            this.highlighted = new i0.EventEmitter();
            this.el = el.nativeElement;
        }
        Object.defineProperty(HighlightDirective.prototype, "setCode", {
            set: /**
             * @param {?} code
             * @return {?}
             */ function (code) {
                var _this = this;
                this.code = code;
                this.hljs.isReady.subscribe(function () { return _this.highlightElement(_this.el, code); });
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        HighlightDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** Acitvate MutationObserver if `auto` option is true and `[code]` input is not used
                 * This will highlight using the text content */
                if (!this.code && this.hljs.options.auto) {
                    this.hljs.isReady.subscribe(function () {
                        _this.highlightTextContent();
                        /** Highlight when text content changes */
                        _this.domObs = new MutationObserver(function () { return _this.highlightTextContent(); });
                        _this.domObs.observe(_this.el, { childList: true, subtree: true });
                    });
                }
            };
        /** Highlight using element text content */
        /**
         * Highlight using element text content
         * @return {?}
         */
        HighlightDirective.prototype.highlightTextContent = /**
         * Highlight using element text content
         * @return {?}
         */
            function () {
                if (!this.highlight) {
                    if (this.el.tagName.toLowerCase() === 'code') {
                        this.highlightElement(this.el, this.el.innerText.trim());
                    }
                    else {
                        console.warn("[HighlightDirective]: Use 'highlight' on <code> element only");
                    }
                }
                else if (this.highlight === 'all') {
                    this.highlightChildren(this.el, 'pre code');
                }
                else {
                    this.highlightChildren(this.el, this.highlight);
                }
            };
        /** Highlight a code block */
        /**
         * Highlight a code block
         * @param {?} el
         * @param {?} code
         * @return {?}
         */
        HighlightDirective.prototype.highlightElement = /**
         * Highlight a code block
         * @param {?} el
         * @param {?} code
         * @return {?}
         */
            function (el, code) {
                /** @type {?} */
                var res = this.hljs.highlightAuto(code, this.language);
                if (res.value !== el.innerHTML) {
                    this.renderer.addClass(el, 'hljs');
                    this.renderer.setProperty(el, 'innerHTML', res.value);
                    this.highlighted.emit(res);
                }
            };
        /** Highlight multiple code blocks */
        /**
         * Highlight multiple code blocks
         * @param {?} el
         * @param {?} selector
         * @return {?}
         */
        HighlightDirective.prototype.highlightChildren = /**
         * Highlight multiple code blocks
         * @param {?} el
         * @param {?} selector
         * @return {?}
         */
            function (el, selector) {
                var _this = this;
                /** @type {?} */
                var codeElements = el.querySelectorAll(selector);
                /** highlight children with the same selector */
                rxjs.from(codeElements).pipe(operators.filter(function (code) { return code.childNodes.length === 1 && code.childNodes[0].nodeName === '#text'; }), operators.map(function (codeElement) { return _this.highlightElement(codeElement, codeElement.innerText.trim()); }), operators.take(1)).subscribe();
            };
        /**
         * @return {?}
         */
        HighlightDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                /** Disconnect MutationObserver */
                if (!this.code && this.hljs.options.auto) {
                    this.domObs.disconnect();
                }
            };
        /** @nocollapse */
        HighlightDirective.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.Renderer2 },
                { type: HighlightJS }
            ];
        };
        HighlightDirective.propDecorators = {
            highlight: [{ type: i0.Input }],
            language: [{ type: i0.Input }],
            setCode: [{ type: i0.Input, args: ['code',] }],
            highlighted: [{ type: i0.Output }]
        };
HighlightDirective.Éµfac = function HighlightDirective_Factory(t) { return new (t || HighlightDirective)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.Renderer2), Éµngcc0.ÉµÉµdirectiveInject(HighlightJS)); };
HighlightDirective.Éµdir = Éµngcc0.ÉµÉµdefineDirective({ type: HighlightDirective, selectors: [["", "highlight", ""]], inputs: { setCode: ["code", "setCode"], highlight: "highlight", language: "language" }, outputs: { highlighted: "highlighted" } });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(HighlightDirective, [{
        type: i0.Directive,
        args: [{
                selector: '[highlight]'
            }]
    }], function () { return [{ type: Éµngcc0.ElementRef }, { type: Éµngcc0.Renderer2 }, { type: HighlightJS }]; }, { highlighted: [{
            type: i0.Output
        }], setCode: [{
            type: i0.Input,
            args: ['code']
        }], highlight: [{
            type: i0.Input
        }], language: [{
            type: i0.Input
        }] }); })();
        return HighlightDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var HighlightModule = /** @class */ (function () {
        function HighlightModule() {
        }
        /**
         * @param {?=} options
         * @return {?}
         */
        HighlightModule.forRoot = /**
         * @param {?=} options
         * @return {?}
         */
            function (options) {
                return {
                    ngModule: HighlightModule,
                    providers: [
                        { provide: OPTIONS, useValue: options }
                    ]
                };
            };
HighlightModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({ type: HighlightModule });
HighlightModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({ factory: function HighlightModule_Factory(t) { return new (t || HighlightModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(HighlightModule, { declarations: [HighlightDirective], exports: [HighlightDirective] }); })();
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(HighlightModule, [{
        type: i0.NgModule,
        args: [{
                declarations: [HighlightDirective],
                exports: [HighlightDirective]
            }]
    }], function () { return []; }, null); })();
        return HighlightModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    exports.HighlightModule = HighlightModule;
    exports.HighlightJS = HighlightJS;
    exports.HighlightDirective = HighlightDirective;
    exports.Éµa = OPTIONS;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,