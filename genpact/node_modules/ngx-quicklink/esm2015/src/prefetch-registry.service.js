import * as tslib_1 from "tslib";
import { Router, PRIMARY_OUTLET } from '@angular/router';
import { Injectable } from '@angular/core';
// Using a global registry so we can keep it populated across lazy-loaded
// modules with different parent injectors which create instance of the registry.
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
const globalRegistry = [];
let PrefetchRegistry = class PrefetchRegistry {
    constructor(router) {
        this.router = router;
        this.trees = globalRegistry;
    }
    add(tree) {
        this.trees.push(tree);
    }
    remove(tree) {
        this.trees.splice(this.trees.indexOf(tree), 1);
    }
    shouldPrefetch(url) {
        const tree = this.router.parseUrl(url);
        return this.trees.some(containsTree.bind(null, tree));
    }
};
PrefetchRegistry.ɵfac = function PrefetchRegistry_Factory(t) { return new (t || PrefetchRegistry)(ɵngcc0.ɵɵinject(ɵngcc1.Router)); };
PrefetchRegistry.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: PrefetchRegistry, factory: function (t) { return PrefetchRegistry.ɵfac(t); } });
PrefetchRegistry = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [Router])
], PrefetchRegistry);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PrefetchRegistry, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.Router }]; }, null); })();
export { PrefetchRegistry };
function containsQueryParams(container, containee) {
    // TODO: This does not handle array params correctly.
    return (Object.keys(containee).length <= Object.keys(container).length &&
        Object.keys(containee).every(key => containee[key] === container[key]));
}
function containsTree(containee, container) {
    return (containsQueryParams(container.queryParams, containee.queryParams) &&
        containsSegmentGroup(container.root, containee.root, containee.root.segments));
}
function containsSegmentGroup(container, containee, containeePaths) {
    if (container.segments.length > containeePaths.length) {
        const current = container.segments.slice(0, containeePaths.length);
        if (!equalPath(current, containeePaths))
            return false;
        if (containee.hasChildren())
            return false;
        return true;
    }
    else if (container.segments.length === containeePaths.length) {
        if (!equalPath(container.segments, containeePaths))
            return false;
        if (!containee.hasChildren())
            return true;
        for (const c in containee.children) {
            if (!container.children[c])
                break;
            if (containsSegmentGroup(container.children[c], containee.children[c], containee.children[c].segments))
                return true;
        }
        return false;
    }
    else {
        const current = containeePaths.slice(0, container.segments.length);
        const next = containeePaths.slice(container.segments.length);
        if (!equalPath(container.segments, current))
            return false;
        if (!container.children[PRIMARY_OUTLET])
            return false;
        return containsSegmentGroup(container.children[PRIMARY_OUTLET], containee, next);
    }
}
export function equalPath(as, bs) {
    if (as.length !== bs.length)
        return false;
    return as.every((a, i) => a.path === bs[i].path || a.path.startsWith(':') || bs[i].path.startsWith(':'));
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,