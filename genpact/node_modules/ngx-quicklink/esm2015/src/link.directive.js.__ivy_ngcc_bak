import * as tslib_1 from "tslib";
import { Directive, ElementRef, Optional, Inject, Input } from '@angular/core';
import { RouterLink, RouterLinkWithHref } from '@angular/router';
import { LinkHandler } from './link-handler.service';
let LinkDirective = class LinkDirective {
    constructor(linkHandlers, el, link, linkWithHref) {
        this.linkHandlers = linkHandlers;
        this.el = el;
        this.linkHandler = this.linkHandlers.filter(h => h.supported()).shift();
        this.rl = link || linkWithHref;
    }
    ngOnChanges(c) {
        if (c.routerLink) {
            this.linkHandler.unregister(this);
            this.linkHandler.register(this);
        }
    }
    ngOnDestroy() {
        this.linkHandler.unregister(this);
    }
    get element() {
        return this.el.nativeElement;
    }
    get urlTree() {
        return this.rl.urlTree;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], LinkDirective.prototype, "routerLink", void 0);
LinkDirective = tslib_1.__decorate([
    Directive({
        selector: '[routerLink]'
    }),
    tslib_1.__param(0, Inject(LinkHandler)),
    tslib_1.__param(2, Optional()),
    tslib_1.__param(3, Optional()),
    tslib_1.__metadata("design:paramtypes", [Array, ElementRef,
        RouterLink,
        RouterLinkWithHref])
], LinkDirective);
export { LinkDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluay5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcXVpY2tsaW5rLyIsInNvdXJjZXMiOlsic3JjL2xpbmsuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixRQUFRLEVBQ1IsTUFBTSxFQUdOLEtBQUssRUFFTixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsVUFBVSxFQUFFLGtCQUFrQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDakUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBTXJELElBQWEsYUFBYSxHQUExQixNQUFhLGFBQWE7SUFLeEIsWUFDK0IsWUFBbUMsRUFDeEQsRUFBYyxFQUNWLElBQWdCLEVBQ2hCLFlBQWdDO1FBSGYsaUJBQVksR0FBWixZQUFZLENBQXVCO1FBQ3hELE9BQUUsR0FBRixFQUFFLENBQVk7UUFJdEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3hFLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxJQUFJLFlBQVksQ0FBQztJQUNqQyxDQUFDO0lBRUQsV0FBVyxDQUFDLENBQWdCO1FBQzFCLElBQUksQ0FBQyxDQUFDLFVBQVUsRUFBRTtZQUNoQixJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNsQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNqQztJQUNILENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELElBQUksT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUM7SUFDL0IsQ0FBQztJQUVELElBQUksT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUM7SUFDekIsQ0FBQztDQUNGLENBQUE7QUFoQ1U7SUFBUixLQUFLLEVBQUU7O2lEQUErRTtBQUQ1RSxhQUFhO0lBSHpCLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxjQUFjO0tBQ3pCLENBQUM7SUFPRyxtQkFBQSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7SUFFbkIsbUJBQUEsUUFBUSxFQUFFLENBQUE7SUFDVixtQkFBQSxRQUFRLEVBQUUsQ0FBQTtvREFGQyxVQUFVO1FBQ0osVUFBVTtRQUNGLGtCQUFrQjtHQVRuQyxhQUFhLENBaUN6QjtTQWpDWSxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBPcHRpb25hbCxcbiAgSW5qZWN0LFxuICBPbkNoYW5nZXMsXG4gIE9uRGVzdHJveSxcbiAgSW5wdXQsXG4gIFNpbXBsZUNoYW5nZXNcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXJMaW5rLCBSb3V0ZXJMaW5rV2l0aEhyZWYgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgTGlua0hhbmRsZXIgfSBmcm9tICcuL2xpbmstaGFuZGxlci5zZXJ2aWNlJztcbmltcG9ydCB7IExpbmtIYW5kbGVyU3RyYXRlZ3kgfSBmcm9tICcuL2xpbmstaGFuZGxlci1zdHJhdGVneSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tyb3V0ZXJMaW5rXSdcbn0pXG5leHBvcnQgY2xhc3MgTGlua0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgQElucHV0KCkgcm91dGVyTGluazogUGljazxSb3V0ZXJMaW5rIHwgUm91dGVyTGlua1dpdGhIcmVmLCAncm91dGVyTGluayc+Wydyb3V0ZXJMaW5rJ107XG4gIHByaXZhdGUgcmw6IFJvdXRlckxpbmsgfCBSb3V0ZXJMaW5rV2l0aEhyZWY7XG4gIHByaXZhdGUgbGlua0hhbmRsZXI6IExpbmtIYW5kbGVyU3RyYXRlZ3k7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChMaW5rSGFuZGxlcikgcHJpdmF0ZSBsaW5rSGFuZGxlcnM6IExpbmtIYW5kbGVyU3RyYXRlZ3lbXSxcbiAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxuICAgIEBPcHRpb25hbCgpIGxpbms6IFJvdXRlckxpbmssXG4gICAgQE9wdGlvbmFsKCkgbGlua1dpdGhIcmVmOiBSb3V0ZXJMaW5rV2l0aEhyZWZcbiAgKSB7XG4gICAgdGhpcy5saW5rSGFuZGxlciA9IHRoaXMubGlua0hhbmRsZXJzLmZpbHRlcihoID0+IGguc3VwcG9ydGVkKCkpLnNoaWZ0KCk7XG4gICAgdGhpcy5ybCA9IGxpbmsgfHwgbGlua1dpdGhIcmVmO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoYzogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjLnJvdXRlckxpbmspIHtcbiAgICAgIHRoaXMubGlua0hhbmRsZXIudW5yZWdpc3Rlcih0aGlzKTtcbiAgICAgIHRoaXMubGlua0hhbmRsZXIucmVnaXN0ZXIodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5saW5rSGFuZGxlci51bnJlZ2lzdGVyKHRoaXMpO1xuICB9XG5cbiAgZ2V0IGVsZW1lbnQoKTogRWxlbWVudCB7XG4gICAgcmV0dXJuIHRoaXMuZWwubmF0aXZlRWxlbWVudDtcbiAgfVxuXG4gIGdldCB1cmxUcmVlKCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMucmwudXJsVHJlZTtcbiAgfVxufVxuIl19