import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Router, PRIMARY_OUTLET } from '@angular/router';
import { PrefetchRegistry } from './prefetch-registry.service';
import { EMPTY } from 'rxjs';
let QuicklinkStrategy = class QuicklinkStrategy {
    constructor(queue, router) {
        this.queue = queue;
        this.router = router;
        this.loading = new Set();
    }
    preload(route, load) {
        if (this.loading.has(route)) {
            // Don't preload the same route twice
            return EMPTY;
        }
        const conn = typeof window !== 'undefined' ? navigator.connection : undefined;
        if (conn) {
            // Don't preload if the user is on 2G. or if Save-Data is enabled..
            if ((conn.effectiveType || '').includes('2g') || conn.saveData)
                return EMPTY;
        }
        // Prevent from preloading
        if (route.data && route.data.preload === false) {
            return EMPTY;
        }
        const fullPath = findPath(this.router.config, route);
        if (this.queue.shouldPrefetch(fullPath)) {
            this.loading.add(route);
            return load();
        }
        return EMPTY;
    }
};
QuicklinkStrategy = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [PrefetchRegistry, Router])
], QuicklinkStrategy);
export { QuicklinkStrategy };
const findPath = (config, route) => {
    config = config.slice();
    const parent = new Map();
    const visited = new Set();
    while (config.length) {
        const el = config.shift();
        visited.add(el);
        if (el === route)
            break;
        let children = el.children || [];
        const current = el._loadedConfig;
        if (current && current.routes) {
            children = children.concat(current.routes);
        }
        children.forEach((r) => {
            if (visited.has(r))
                return;
            parent.set(r, el);
            config.push(r);
        });
    }
    let path = '';
    let current = route;
    while (current) {
        if (isPrimaryRoute(current)) {
            path = `/${current.path}${path}`;
        }
        else {
            path = `/(${current.outlet}:${current.path}${path})`;
        }
        current = parent.get(current);
    }
    return path;
};
const ɵ0 = findPath;
function isPrimaryRoute(route) {
    return route.outlet === PRIMARY_OUTLET || !route.outlet;
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpY2tsaW5rLXN0cmF0ZWd5LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcXVpY2tsaW5rLyIsInNvdXJjZXMiOlsic3JjL3F1aWNrbGluay1zdHJhdGVneS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBc0IsTUFBTSxFQUFTLGNBQWMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3BGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFHN0IsSUFBYSxpQkFBaUIsR0FBOUIsTUFBYSxpQkFBaUI7SUFHNUIsWUFBb0IsS0FBdUIsRUFBVSxNQUFjO1FBQS9DLFVBQUssR0FBTCxLQUFLLENBQWtCO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUZuRSxZQUFPLEdBQUcsSUFBSSxHQUFHLEVBQVMsQ0FBQztJQUUyQyxDQUFDO0lBRXZFLE9BQU8sQ0FBQyxLQUFZLEVBQUUsSUFBYztRQUNsQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzNCLHFDQUFxQztZQUNyQyxPQUFPLEtBQUssQ0FBQztTQUNkO1FBQ0QsTUFBTSxJQUFJLEdBQUcsT0FBTyxNQUFNLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBRSxTQUFpQixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQ3ZGLElBQUksSUFBSSxFQUFFO1lBQ1IsbUVBQW1FO1lBQ25FLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxJQUFJLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUTtnQkFBRSxPQUFPLEtBQUssQ0FBQztTQUM5RTtRQUNELDBCQUEwQjtRQUMxQixJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUssS0FBSyxFQUFFO1lBQzlDLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDckQsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUN2QyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN4QixPQUFPLElBQUksRUFBRSxDQUFDO1NBQ2Y7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Q0FDRixDQUFBO0FBM0JZLGlCQUFpQjtJQUQ3QixVQUFVLEVBQUU7NkNBSWdCLGdCQUFnQixFQUFrQixNQUFNO0dBSHhELGlCQUFpQixDQTJCN0I7U0EzQlksaUJBQWlCO0FBNkI5QixNQUFNLFFBQVEsR0FBRyxDQUFDLE1BQWUsRUFBRSxLQUFZLEVBQVUsRUFBRTtJQUN6RCxNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3hCLE1BQU0sTUFBTSxHQUFHLElBQUksR0FBRyxFQUFnQixDQUFDO0lBQ3ZDLE1BQU0sT0FBTyxHQUFHLElBQUksR0FBRyxFQUFTLENBQUM7SUFDakMsT0FBTyxNQUFNLENBQUMsTUFBTSxFQUFFO1FBQ3BCLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUMxQixPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hCLElBQUksRUFBRSxLQUFLLEtBQUs7WUFBRSxNQUFNO1FBQ3hCLElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDO1FBQ2pDLE1BQU0sT0FBTyxHQUFJLEVBQVUsQ0FBQyxhQUFhLENBQUM7UUFDMUMsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sRUFBRTtZQUM3QixRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDNUM7UUFDRCxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBUSxFQUFFLEVBQUU7WUFDNUIsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFBRSxPQUFPO1lBQzNCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ2xCLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakIsQ0FBQyxDQUFDLENBQUM7S0FDSjtJQUNELElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNkLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQztJQUVwQixPQUFPLE9BQU8sRUFBRTtRQUNkLElBQUksY0FBYyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQzNCLElBQUksR0FBRyxJQUFJLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxFQUFFLENBQUM7U0FDbEM7YUFBTTtZQUNMLElBQUksR0FBRyxLQUFLLE9BQU8sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQztTQUN0RDtRQUNELE9BQU8sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQy9CO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDLENBQUM7O0FBRUYsU0FBUyxjQUFjLENBQUMsS0FBWTtJQUNsQyxPQUFPLEtBQUssQ0FBQyxNQUFNLEtBQUssY0FBYyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztBQUMxRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUHJlbG9hZGluZ1N0cmF0ZWd5LCBSb3V0ZXIsIFJvdXRlLCBQUklNQVJZX09VVExFVCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBQcmVmZXRjaFJlZ2lzdHJ5IH0gZnJvbSAnLi9wcmVmZXRjaC1yZWdpc3RyeS5zZXJ2aWNlJztcbmltcG9ydCB7IEVNUFRZIH0gZnJvbSAncnhqcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBRdWlja2xpbmtTdHJhdGVneSBpbXBsZW1lbnRzIFByZWxvYWRpbmdTdHJhdGVneSB7XG4gIGxvYWRpbmcgPSBuZXcgU2V0PFJvdXRlPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcXVldWU6IFByZWZldGNoUmVnaXN0cnksIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIpIHt9XG5cbiAgcHJlbG9hZChyb3V0ZTogUm91dGUsIGxvYWQ6IEZ1bmN0aW9uKSB7XG4gICAgaWYgKHRoaXMubG9hZGluZy5oYXMocm91dGUpKSB7XG4gICAgICAvLyBEb24ndCBwcmVsb2FkIHRoZSBzYW1lIHJvdXRlIHR3aWNlXG4gICAgICByZXR1cm4gRU1QVFk7XG4gICAgfVxuICAgIGNvbnN0IGNvbm4gPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IChuYXZpZ2F0b3IgYXMgYW55KS5jb25uZWN0aW9uIDogdW5kZWZpbmVkO1xuICAgIGlmIChjb25uKSB7XG4gICAgICAvLyBEb24ndCBwcmVsb2FkIGlmIHRoZSB1c2VyIGlzIG9uIDJHLiBvciBpZiBTYXZlLURhdGEgaXMgZW5hYmxlZC4uXG4gICAgICBpZiAoKGNvbm4uZWZmZWN0aXZlVHlwZSB8fCAnJykuaW5jbHVkZXMoJzJnJykgfHwgY29ubi5zYXZlRGF0YSkgcmV0dXJuIEVNUFRZO1xuICAgIH1cbiAgICAvLyBQcmV2ZW50IGZyb20gcHJlbG9hZGluZ1xuICAgIGlmIChyb3V0ZS5kYXRhICYmIHJvdXRlLmRhdGEucHJlbG9hZCA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBFTVBUWTtcbiAgICB9XG4gICAgY29uc3QgZnVsbFBhdGggPSBmaW5kUGF0aCh0aGlzLnJvdXRlci5jb25maWcsIHJvdXRlKTtcbiAgICBpZiAodGhpcy5xdWV1ZS5zaG91bGRQcmVmZXRjaChmdWxsUGF0aCkpIHtcbiAgICAgIHRoaXMubG9hZGluZy5hZGQocm91dGUpO1xuICAgICAgcmV0dXJuIGxvYWQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gRU1QVFk7XG4gIH1cbn1cblxuY29uc3QgZmluZFBhdGggPSAoY29uZmlnOiBSb3V0ZVtdLCByb3V0ZTogUm91dGUpOiBzdHJpbmcgPT4ge1xuICBjb25maWcgPSBjb25maWcuc2xpY2UoKTtcbiAgY29uc3QgcGFyZW50ID0gbmV3IE1hcDxSb3V0ZSwgUm91dGU+KCk7XG4gIGNvbnN0IHZpc2l0ZWQgPSBuZXcgU2V0PFJvdXRlPigpO1xuICB3aGlsZSAoY29uZmlnLmxlbmd0aCkge1xuICAgIGNvbnN0IGVsID0gY29uZmlnLnNoaWZ0KCk7XG4gICAgdmlzaXRlZC5hZGQoZWwpO1xuICAgIGlmIChlbCA9PT0gcm91dGUpIGJyZWFrO1xuICAgIGxldCBjaGlsZHJlbiA9IGVsLmNoaWxkcmVuIHx8IFtdO1xuICAgIGNvbnN0IGN1cnJlbnQgPSAoZWwgYXMgYW55KS5fbG9hZGVkQ29uZmlnO1xuICAgIGlmIChjdXJyZW50ICYmIGN1cnJlbnQucm91dGVzKSB7XG4gICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmNvbmNhdChjdXJyZW50LnJvdXRlcyk7XG4gICAgfVxuICAgIGNoaWxkcmVuLmZvckVhY2goKHI6IFJvdXRlKSA9PiB7XG4gICAgICBpZiAodmlzaXRlZC5oYXMocikpIHJldHVybjtcbiAgICAgIHBhcmVudC5zZXQociwgZWwpO1xuICAgICAgY29uZmlnLnB1c2gocik7XG4gICAgfSk7XG4gIH1cbiAgbGV0IHBhdGggPSAnJztcbiAgbGV0IGN1cnJlbnQgPSByb3V0ZTtcblxuICB3aGlsZSAoY3VycmVudCkge1xuICAgIGlmIChpc1ByaW1hcnlSb3V0ZShjdXJyZW50KSkge1xuICAgICAgcGF0aCA9IGAvJHtjdXJyZW50LnBhdGh9JHtwYXRofWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhdGggPSBgLygke2N1cnJlbnQub3V0bGV0fToke2N1cnJlbnQucGF0aH0ke3BhdGh9KWA7XG4gICAgfVxuICAgIGN1cnJlbnQgPSBwYXJlbnQuZ2V0KGN1cnJlbnQpO1xuICB9XG5cbiAgcmV0dXJuIHBhdGg7XG59O1xuXG5mdW5jdGlvbiBpc1ByaW1hcnlSb3V0ZShyb3V0ZTogUm91dGUpIHtcbiAgcmV0dXJuIHJvdXRlLm91dGxldCA9PT0gUFJJTUFSWV9PVVRMRVQgfHwgIXJvdXRlLm91dGxldDtcbn1cbiJdfQ==