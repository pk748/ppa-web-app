import * as tslib_1 from "tslib";
import { Injectable, InjectionToken, NgZone } from '@angular/core';
import { RouterPreloader } from '@angular/router';
import { PrefetchRegistry } from './prefetch-registry.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
const ɵ0 = function (cb) {
    const start = Date.now();
    return setTimeout(function () {
        cb({
            didTimeout: false,
            timeRemaining: function () {
                return Math.max(0, 50 - (Date.now() - start));
            }
        });
    }, 1);
}, ɵ1 = () => { };
const requestIdleCallback = typeof window !== 'undefined'
    ? window.requestIdleCallback || ɵ0
    : ɵ1;
const observerSupported = () => typeof window !== 'undefined' ? !!window.IntersectionObserver : false;
const ɵ2 = observerSupported;
export const LinkHandler = new InjectionToken('LinkHandler');
let ObservableLinkHandler = class ObservableLinkHandler {
    constructor(loader, queue, ngZone) {
        this.loader = loader;
        this.queue = queue;
        this.ngZone = ngZone;
        this.elementLink = new Map();
        this.observer = observerSupported()
            ? new IntersectionObserver(entries => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const link = entry.target;
                        const routerLink = this.elementLink.get(link);
                        if (!routerLink || !routerLink.urlTree)
                            return;
                        this.queue.add(routerLink.urlTree);
                        this.observer.unobserve(link);
                        requestIdleCallback(() => {
                            this.loader.preload().subscribe(() => void 0);
                            this.queue.remove(routerLink.urlTree);
                        });
                    }
                });
            })
            : null;
    }
    register(el) {
        this.elementLink.set(el.element, el);
        this.ngZone.runOutsideAngular(() => {
            this.observer.observe(el.element);
        });
    }
    // First call to unregister will not hit this.
    unregister(el) {
        if (this.elementLink.has(el.element)) {
            this.observer.unobserve(el.element);
            this.elementLink.delete(el.element);
        }
    }
    supported() {
        return observerSupported();
    }
};
ObservableLinkHandler.ɵfac = function ObservableLinkHandler_Factory(t) { return new (t || ObservableLinkHandler)(ɵngcc0.ɵɵinject(ɵngcc1.RouterPreloader), ɵngcc0.ɵɵinject(PrefetchRegistry), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };
ObservableLinkHandler.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ObservableLinkHandler, factory: function (t) { return ObservableLinkHandler.ɵfac(t); } });
ObservableLinkHandler = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [RouterPreloader, PrefetchRegistry, NgZone])
], ObservableLinkHandler);
export { ObservableLinkHandler };
let PreloadLinkHandler = class PreloadLinkHandler {
    constructor(loader, queue) {
        this.loader = loader;
        this.queue = queue;
    }
    register(el) {
        this.queue.add(el.urlTree);
        requestIdleCallback(() => this.loader.preload().subscribe(() => void 0));
    }
    unregister(_) { }
    supported() {
        return true;
    }
};
PreloadLinkHandler.ɵfac = function PreloadLinkHandler_Factory(t) { return new (t || PreloadLinkHandler)(ɵngcc0.ɵɵinject(ɵngcc1.RouterPreloader), ɵngcc0.ɵɵinject(PrefetchRegistry)); };
PreloadLinkHandler.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: PreloadLinkHandler, factory: function (t) { return PreloadLinkHandler.ɵfac(t); } });
PreloadLinkHandler = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [RouterPreloader, PrefetchRegistry])
], PreloadLinkHandler);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ObservableLinkHandler, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.RouterPreloader }, { type: PrefetchRegistry }, { type: ɵngcc0.NgZone }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PreloadLinkHandler, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.RouterPreloader }, { type: PrefetchRegistry }]; }, null); })();
export { PreloadLinkHandler };
export { ɵ0, ɵ1, ɵ2 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,