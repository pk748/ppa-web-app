{"version":3,"file":"ngx-quicklink.js","sources":["ng:/ngx-quicklink/src/prefetch-registry.service.ts","ng:/ngx-quicklink/src/link-handler.service.ts","ng:/ngx-quicklink/src/link.directive.ts","ng:/ngx-quicklink/src/quicklink-strategy.service.ts","ng:/ngx-quicklink/src/quicklink.module.ts"],"names":["tslib_1.__decorate","tslib_1.__param"],"mappings":";;;;;AAUA;AACA;;;AACA,MAAM,cAAc,GAAc,EAAE,CAAC;AAGrC,IAAa,gBAAgB,GAA7B,MAAa,gBAAgB;AAC7B,IACE,YAAoB,MAAc;AAAI,QAAlB,WAAM,GAAN,MAAM,CAAQ;AAAC,QAD3B,UAAK,GAAc,cAAc,CAAC;AAC5C,KAAwC;AACxC,IACE,GAAG,CAAC,IAAa;AACnB,QAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC1B,KAAG;AACH,IACE,MAAM,CAAC,IAAa;AACtB,QAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;AACnD,KAAG;AACH,IACE,cAAc,CAAC,GAAW;AAC5B,QAAI,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;AAC3C,QAAI,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;AAC1D,KAAG;AACH,CAAC;;4IAAA;AAhBY,gBAAgB,oBAD5B,UAAU,EAAE,jBACT,kCAE0B,MAAM;AAAG,GAF1B,gBAAgB,CAgB5B;AAED,SAAS,mBAAmB,CAAC,SAAiB,EAAE,SAAiB;AAAI;AACpB,IAC/C,QACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM;AAClE,QAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,GAAG,IAAI,SAAS,CAAC,GAAG,CAAC,KAAK,SAAS,CAAC,GAAG,CAAC,CAAC,EACtE;AACJ,CAAC;AAED,SAAS,YAAY,CAAC,SAAkB,EAAE,SAAkB;AAAI,IAC9D,QACE,mBAAmB,CAAC,SAAS,CAAC,WAAW,EAAE,SAAS,CAAC,WAAW,CAAC;AACrE,QAAI,oBAAoB,CAAC,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,EAC7E;AACJ,CAAC;AAED,SAAS,oBAAoB,CAC3B,SAA0B,EAC1B,SAA0B,EAC1B,cAA4B;AAC3B,IACD,IAAI,SAAS,CAAC,QAAQ,CAAC,MAAM,GAAG,cAAc,CAAC,MAAM,EAAE;AACzD,QAAI,MAAM,OAAO,GAAG,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,cAAc,CAAC,MAAM,CAAC,CAAC;AACvE,QAAI,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,cAAc,CAAC;AAAE,YAAA,OAAO,KAAK,CAAC;AAC1D,QAAI,IAAI,SAAS,CAAC,WAAW,EAAE;AAAE,YAAA,OAAO,KAAK,CAAC;AAC9C,QAAI,OAAO,IAAI,CAAC;AAChB,KAAG;AAAC,SAAK,IAAI,SAAS,CAAC,QAAQ,CAAC,MAAM,KAAK,cAAc,CAAC,MAAM,EAAE;AAClE,QAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,EAAE,cAAc,CAAC;AAAE,YAAA,OAAO,KAAK,CAAC;AACrE,QAAI,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE;AAAE,YAAA,OAAO,IAAI,CAAC;AAC9C,QACI,KAAK,MAAM,CAAC,IAAI,SAAS,CAAC,QAAQ,EAAE;AACxC,YAAM,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;AAAE,gBAAA,MAAM;AACxC,YAAM,IACE,oBAAoB,CAClB,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,EACrB,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,EACrB,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAC/B;AACR,gBACO,OAAO,IAAI,CAAC;AACpB,SAAK;AACL,QAAI,OAAO,KAAK,CAAC;AACjB,KAAG;AAAC,SAAK;AACT,QAAI,MAAM,OAAO,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC,EAAE,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AACvE,QAAI,MAAM,IAAI,GAAG,cAAc,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AACjE,QAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,EAAE,OAAO,CAAC;AAAE,YAAA,OAAO,KAAK,CAAC;AAC9D,QAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,cAAc,CAAC;AAAE,YAAA,OAAO,KAAK,CAAC;AAC1D,QAAI,OAAO,oBAAoB,CAAC,SAAS,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;AACrF,KAAG;AACH,CAAC;AAED,SAAgB,SAAS,CAAC,EAAgB,EAAE,EAAgB;AAAI,IAC9D,IAAI,EAAE,CAAC,MAAM,KAAK,EAAE,CAAC,MAAM;AAAE,QAAA,OAAO,KAAK,CAAC;AAC5C,IAAE,OAAO,EAAE,CAAC,KAAK,CACb,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,IAAI,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CACxF,CAAC;AACJ,CAAC;AACD;AAAC,WClEK,UAAS,EAAY;AAC3B,IAAQ,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;AACjC,IAAQ,OAAO,UAAU,CAAC;AACzB,QAAS,EAAE,CAAC;AACb,YAAY,UAAU,EAAE,KAAK;AAC7B,YAAY,aAAa,EAAE;AAC1B,gBAAa,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC;AAC5D,aAAa;AACb,SAAW,CAAC,CAAC;AACb,KAAS,EAAE,CAAC,CAAC,CAAC;AACd,CAAO,OACD,SAAQ;AAdd,MAAM,mBAAmB,GACvB,OAAO,MAAM,KAAK,WAAW;AAC/B,MAAO,MAAc,CAAC,mBAAmB,MAWlC;AACP,QAAc,CAAC;AAEf,MAAM,iBAAiB,GAAG,MACxB,OAAO,MAAM,KAAK,WAAW,GAAG,CAAC,CAAE,MAAc,CAAC,oBAAoB,GAAG,KAAK,CAAC;AACjF,MACa,WAAW,GAAG,IAAI,cAAc,CAAC,aAAa,CAAC,CAAC;AAG7D,IAAa,qBAAqB,GAAlC,MAAa,qBAAqB;AAAG,IAsBnC,YAAoB,MAAuB,EAAU,KAAuB,EAAU,MAAc;AAAI,QAApF,WAAM,GAAN,MAAM,CAAiB;AAAC,QAAS,UAAK,GAAL,KAAK,CAAkB;AAAC,QAAS,WAAM,GAAN,MAAM,CAAQ;AAAC,QArB7F,gBAAW,GAAG,IAAI,GAAG,EAA0B,CAAC;AAC1D,QAAU,aAAQ,GAAgC,iBAAiB,EAAE;AACrE,cAAM,IAAI,oBAAoB,CAAC,OAAO;AACtC,gBAAQ,OAAO,CAAC,OAAO,CAAC,KAAK;AAC7B,oBAAU,IAAI,KAAK,CAAC,cAAc,EAAE;AACpC,wBAAY,MAAM,IAAI,GAAG,KAAK,CAAC,MAA2B,CAAC;AAC3D,wBACY,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC1D,wBAAY,IAAK,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,OAAO;AAAE,4BAAC,OAAO;AAC7D,wBACY,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;AAC/C,wBAAY,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;AAC1C,wBAAY,mBAAmB,CAAC;AAChC,4BAAc,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC;AAC5D,4BAAc,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;AACpD,yBAAa,CAAC,CAAC;AACf,qBAAW;AACX,iBAAS,CAAC,CAAC;AACX,aAAO,CAAC;AACR,cAAM,IAAI,CAAC;AACX,KAC0G;AAC1G,IACE,QAAQ,CAAC,EAAiB;AAC5B,QAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;AACzC,QAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC;AAClC,YAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;AACxC,SAAK,CAAC,CAAC;AACP,KAAG;AACH;AAEC,IAAC,UAAU,CAAC,EAAiB;AAC9B,QAAI,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE;AAC1C,YAAM,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;AAC1C,YAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;AAC1C,SAAK;AACL,KAAG;AACH,IACE,SAAS;AACX,QAAI,OAAO,iBAAiB,EAAE,CAAC;AAC/B,KAAG;AACH,CAAC;;2JAAA;AA1CY,qBAAqB,oBADjC,UAAU,EAAE,jBACT,kCAsB0B,eAAe,EAAiB,gBAAgB,EAAkB,MAAM;AAAG,GAtB5F,qBAAqB,CA0CjC;AAED,IACa,kBAAkB,GAA/B,MAAa,kBAAkB;AAAG,IAChC,YAAoB,MAAuB,EAAU,KAAuB;AAAI,QAA5D,WAAM,GAAN,MAAM,CAAiB;AAAC,QAAS,UAAK,GAAL,KAAK,CAAkB;AAAC,KAAG;AAClF,IACE,QAAQ,CAAC,EAAiB;AAC5B,QAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;AAC/B,QAAI,mBAAmB,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;AAC7E,KAAG;AACH,IACE,UAAU,CAAC,CAAgB,KAAI;AACjC,IACE,SAAS;AACX,QAAI,OAAO,IAAI,CAAC;AAChB,KAAG;AACH,CAAC;;kJAAA;AAbY,kBAAkB,oBAD9B,UAAU,EAAE,jBACT,kCAC0B,eAAe,EAAiB,gBAAgB;AAAG,GADpE,kBAAkB,CAa9B;AACA;AAAC,ICpFW,aAAa,GAA1B,MAAa,aAAa;AAAG,IAK3B,YAC+B,YAAmC,EACxD,EAAc,EACV,IAAgB,EAChB,YAAgC;AAC7C,QAJ8B,iBAAY,GAAZ,YAAY,CAAuB;AAAC,QACzD,OAAE,GAAF,EAAE,CAAY;AAAC,QAIvB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC;AAC5E,QAAI,IAAI,CAAC,EAAE,GAAG,IAAI,IAAI,YAAY,CAAC;AACnC,KAAG;AACH,IACE,WAAW,CAAC,CAAgB;AAC9B,QAAI,IAAI,CAAC,CAAC,UAAU,EAAE;AACtB,YAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AACxC,YAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACtC,SAAK;AACL,KAAG;AACH,IACE,WAAW;AACb,QAAI,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AACtC,KAAG;AACH,IACE,IAAI,OAAO;AAAK,QACd,OAAO,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC;AACjC,KAAG;AACH,IACE,IAAI,OAAO;AAAK,QACd,OAAO,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC;AAC3B,KAAG;AACH,CAAC;;2LAAA;AAhCUA;AAAaA,IAArB,KAAK,EAAE;AAAE;AAAsC,iDAAuC;AAD5E,aAAa,oBAHzB,SAAS,CAAC,UACT,QAAQ,jCAEN,CAMCC,WAAA,MAAM,CAAC,WAAW,CAAC,CAAA;CARZ,cAAc,MACzB,CAAC,tBAOwB,IAErBA,WAAA,QAAQ,EAAE,CAAA;AAAE,IACZA,WAAA,QAAQ,EAAE,CAAA;AAAE,4CAFD,UAAU;AAC1B,QAAsB,UAAU;AAChC,QAA8B,kBAAkB;AAC9C,GAVW,aAAa,CAiCzB;AACA;AAAC,IC7CW,iBAAiB,GAA9B,MAAa,iBAAiB;AAAG,IAG/B,YAAoB,KAAuB,EAAU,MAAc;AAAI,QAAnD,UAAK,GAAL,KAAK,CAAkB;AAAC,QAAS,WAAM,GAAN,MAAM,CAAQ;AAAC,QAFpE,YAAO,GAAG,IAAI,GAAG,EAAS,CAAC;AAC7B,KACyE;AACzE,IACE,OAAO,CAAC,KAAY,EAAE,IAAc;AACtC,QAAI,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;AACjC;AACM,YAAA,OAAO,KAAK,CAAC;AACnB,SAAK;AACL,QAAI,MAAM,IAAI,GAAG,OAAO,MAAM,KAAK,WAAW,GAAI,SAAiB,CAAC,UAAU,GAAG,SAAS,CAAC;AAC3F,QAAI,IAAI,IAAI,EAAE;AACd;AACM,YAAA,IAAI,CAAC,IAAI,CAAC,aAAa,IAAI,EAAE,EAAE,QAAQ,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,QAAQ;AAAE,gBAAA,OAAO,KAAK,CAAC;AACnF,SAAK;AACL;AACI,QAAA,IAAI,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,OAAO,KAAK,KAAK,EAAE;AACpD,YAAM,OAAO,KAAK,CAAC;AACnB,SAAK;AACL,QAAI,MAAM,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;AACzD,QAAI,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;AAC7C,YAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AAC9B,YAAM,OAAO,IAAI,EAAE,CAAC;AACpB,SAAK;AACL,QACI,OAAO,KAAK,CAAC;AACjB,KAAG;AACH,CAAC;;+IAAA;AA3BY,iBAAiB,oBAD7B,UAAU,EAAE,jBACT,kCAGyB,gBAAgB,EAAkB,MAAM;AAAG,GAH3D,iBAAiB,CA2B7B;AAED,MAAM,QAAQ,GAAG,CAAC,MAAe,EAAE,KAAY;AAAO,IACpD,MAAM,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;AAC1B,IAAE,MAAM,MAAM,GAAG,IAAI,GAAG,EAAgB,CAAC;AACzC,IAAE,MAAM,OAAO,GAAG,IAAI,GAAG,EAAS,CAAC;AACnC,IAAE,OAAO,MAAM,CAAC,MAAM,EAAE;AACxB,QAAI,MAAM,EAAE,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;AAC9B,QAAI,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;AACpB,QAAI,IAAI,EAAE,KAAK,KAAK;AAAE,YAAA,MAAM;AAC5B,QAAI,IAAI,QAAQ,GAAG,EAAE,CAAC,QAAQ,IAAI,EAAE,CAAC;AACrC,QAAI,MAAM,OAAO,GAAI,EAAU,CAAC,aAAa,CAAC;AAC9C,QAAI,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM,EAAE;AACnC,YAAM,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AACjD,SAAK;AACL,QAAI,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAQ;AAC9B,YAAM,IAAI,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;AAAE,gBAAA,OAAO;AACjC,YAAM,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AACxB,YAAM,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACrB,SAAK,CAAC,CAAC;AACP,KAAG;AACH,IAAE,IAAI,IAAI,GAAG,EAAE,CAAC;AAChB,IAAE,IAAI,OAAO,GAAG,KAAK,CAAC;AACtB,IACE,OAAO,OAAO,EAAE;AAClB,QAAI,IAAI,cAAc,CAAC,OAAO,CAAC,EAAE;AACjC,YAAM,IAAI,GAAG,IAAI,OAAO,CAAC,IAAI,GAAG,IAAI,EAAE,CAAC;AACvC,SAAK;AAAC,aAAK;AACX,YAAM,IAAI,GAAG,KAAK,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,IAAI,GAAG,IAAI,GAAG,CAAC;AAC3D,SAAK;AACL,QAAI,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AAClC,KAAG;AACH,IACE,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,SAAS,cAAc,CAAC,KAAY;AACpC,IAAE,OAAO,KAAK,CAAC,MAAM,KAAK,cAAc,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;AAC1D,CAAC;AACD;AAAC,IChDY,eAAe,GAA5B,MAAa,eAAe;AAAG,CAAA,CAAA;AAAlB,eAAe,oBAlB3B,QAAQ,CAAC,UACR,YAAY,EAAE,CAAC;OAAa,CAAC,UAC7B,SAAS,EAAE,cACT,kBACE,OAAO,EAAE,WAAW,kBACpB,QAAQ,EAAE,qBAAqB,kBAC/B;IAAK,EAAE;AAAI,cACZ,cACD;YACE,OAAO,EAAE,WAAW;KACpB,QAAQ,EAAE;SAAkB;;MAC5B,KAAK,EAAE,IAAI,cACZ;WACD,gBAAgB,cAChB;gBAAiB;EAClB;CACD,OAAO,EAAE,CAAC,aAAa,CAAC;KACzB,CAAC,IACW,eAAe;AAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAC/B;AAAC;AAAC;AAAmL","sourcesContent":["import {\n  Router,\n  UrlTree,\n  Params,\n  UrlSegmentGroup,\n  UrlSegment,\n  PRIMARY_OUTLET\n} from '@angular/router';\nimport { Injectable } from '@angular/core';\n\n// Using a global registry so we can keep it populated across lazy-loaded\n// modules with different parent injectors which create instance of the registry.\nconst globalRegistry: UrlTree[] = [];\n\n@Injectable()\nexport class PrefetchRegistry {\n  private trees: UrlTree[] = globalRegistry;\n  constructor(private router: Router) {}\n\n  add(tree: UrlTree) {\n    this.trees.push(tree);\n  }\n\n  remove(tree: UrlTree) {\n    this.trees.splice(this.trees.indexOf(tree), 1);\n  }\n\n  shouldPrefetch(url: string) {\n    const tree = this.router.parseUrl(url);\n    return this.trees.some(containsTree.bind(null, tree));\n  }\n}\n\nfunction containsQueryParams(container: Params, containee: Params): boolean {\n  // TODO: This does not handle array params correctly.\n  return (\n    Object.keys(containee).length <= Object.keys(container).length &&\n    Object.keys(containee).every(key => containee[key] === container[key])\n  );\n}\n\nfunction containsTree(containee: UrlTree, container: UrlTree): boolean {\n  return (\n    containsQueryParams(container.queryParams, containee.queryParams) &&\n    containsSegmentGroup(container.root, containee.root, containee.root.segments)\n  );\n}\n\nfunction containsSegmentGroup(\n  container: UrlSegmentGroup,\n  containee: UrlSegmentGroup,\n  containeePaths: UrlSegment[]\n): boolean {\n  if (container.segments.length > containeePaths.length) {\n    const current = container.segments.slice(0, containeePaths.length);\n    if (!equalPath(current, containeePaths)) return false;\n    if (containee.hasChildren()) return false;\n    return true;\n  } else if (container.segments.length === containeePaths.length) {\n    if (!equalPath(container.segments, containeePaths)) return false;\n    if (!containee.hasChildren()) return true;\n\n    for (const c in containee.children) {\n      if (!container.children[c]) break;\n      if (\n        containsSegmentGroup(\n          container.children[c],\n          containee.children[c],\n          containee.children[c].segments\n        )\n      )\n        return true;\n    }\n    return false;\n  } else {\n    const current = containeePaths.slice(0, container.segments.length);\n    const next = containeePaths.slice(container.segments.length);\n    if (!equalPath(container.segments, current)) return false;\n    if (!container.children[PRIMARY_OUTLET]) return false;\n    return containsSegmentGroup(container.children[PRIMARY_OUTLET], containee, next);\n  }\n}\n\nexport function equalPath(as: UrlSegment[], bs: UrlSegment[]): boolean {\n  if (as.length !== bs.length) return false;\n  return as.every(\n    (a, i) => a.path === bs[i].path || a.path.startsWith(':') || bs[i].path.startsWith(':')\n  );\n}\n","import { Injectable, InjectionToken, NgZone } from '@angular/core';\nimport { LinkDirective } from './link.directive';\nimport { RouterPreloader } from '@angular/router';\nimport { LinkHandlerStrategy } from './link-handler-strategy';\nimport { PrefetchRegistry } from './prefetch-registry.service';\n\ntype RequestIdleCallbackHandle = any;\ntype RequestIdleCallbackOptions = {\n  timeout: number;\n};\ntype RequestIdleCallbackDeadline = {\n  readonly didTimeout: boolean;\n  timeRemaining: (() => number);\n};\n\ntype RequestIdleCallback = ((\n  callback: ((deadline: RequestIdleCallbackDeadline) => void),\n  opts?: RequestIdleCallbackOptions\n) => RequestIdleCallbackHandle);\n\nconst requestIdleCallback: RequestIdleCallback =\n  typeof window !== 'undefined'\n    ? (window as any).requestIdleCallback ||\n      function(cb: Function) {\n        const start = Date.now();\n        return setTimeout(function() {\n          cb({\n            didTimeout: false,\n            timeRemaining: function() {\n              return Math.max(0, 50 - (Date.now() - start));\n            }\n          });\n        }, 1);\n      }\n    : () => {};\n\nconst observerSupported = () =>\n  typeof window !== 'undefined' ? !!(window as any).IntersectionObserver : false;\n\nexport const LinkHandler = new InjectionToken('LinkHandler');\n\n@Injectable()\nexport class ObservableLinkHandler implements LinkHandlerStrategy {\n  private elementLink = new Map<Element, LinkDirective>();\n  private observer: IntersectionObserver | null = observerSupported()\n    ? new IntersectionObserver(entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            const link = entry.target as HTMLAnchorElement;\n\n            const routerLink = this.elementLink.get(link);\n            if ( !routerLink || !routerLink.urlTree ) return;\n\n            this.queue.add(routerLink.urlTree);\n            this.observer.unobserve(link);\n            requestIdleCallback(() => {\n              this.loader.preload().subscribe(() => void 0);\n              this.queue.remove(routerLink.urlTree);\n            });\n          }\n        });\n      })\n    : null;\n\n  constructor(private loader: RouterPreloader, private queue: PrefetchRegistry, private ngZone: NgZone) {}\n\n  register(el: LinkDirective) {\n    this.elementLink.set(el.element, el);\n    this.ngZone.runOutsideAngular(() => {\n      this.observer.observe(el.element);\n    });\n  }\n\n  // First call to unregister will not hit this.\n  unregister(el: LinkDirective) {\n    if (this.elementLink.has(el.element)) {\n      this.observer.unobserve(el.element);\n      this.elementLink.delete(el.element);\n    }\n  }\n\n  supported() {\n    return observerSupported();\n  }\n}\n\n@Injectable()\nexport class PreloadLinkHandler implements LinkHandlerStrategy {\n  constructor(private loader: RouterPreloader, private queue: PrefetchRegistry) {}\n\n  register(el: LinkDirective) {\n    this.queue.add(el.urlTree);\n    requestIdleCallback(() => this.loader.preload().subscribe(() => void 0));\n  }\n\n  unregister(_: LinkDirective) {}\n\n  supported() {\n    return true;\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  Optional,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Input,\n  SimpleChanges\n} from '@angular/core';\nimport { RouterLink, RouterLinkWithHref } from '@angular/router';\nimport { LinkHandler } from './link-handler.service';\nimport { LinkHandlerStrategy } from './link-handler-strategy';\n\n@Directive({\n  selector: '[routerLink]'\n})\nexport class LinkDirective implements OnChanges, OnDestroy {\n  @Input() routerLink: Pick<RouterLink | RouterLinkWithHref, 'routerLink'>['routerLink'];\n  private rl: RouterLink | RouterLinkWithHref;\n  private linkHandler: LinkHandlerStrategy;\n\n  constructor(\n    @Inject(LinkHandler) private linkHandlers: LinkHandlerStrategy[],\n    private el: ElementRef,\n    @Optional() link: RouterLink,\n    @Optional() linkWithHref: RouterLinkWithHref\n  ) {\n    this.linkHandler = this.linkHandlers.filter(h => h.supported()).shift();\n    this.rl = link || linkWithHref;\n  }\n\n  ngOnChanges(c: SimpleChanges) {\n    if (c.routerLink) {\n      this.linkHandler.unregister(this);\n      this.linkHandler.register(this);\n    }\n  }\n\n  ngOnDestroy() {\n    this.linkHandler.unregister(this);\n  }\n\n  get element(): Element {\n    return this.el.nativeElement;\n  }\n\n  get urlTree(): any {\n    return this.rl.urlTree;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PreloadingStrategy, Router, Route, PRIMARY_OUTLET } from '@angular/router';\nimport { PrefetchRegistry } from './prefetch-registry.service';\nimport { EMPTY } from 'rxjs';\n\n@Injectable()\nexport class QuicklinkStrategy implements PreloadingStrategy {\n  loading = new Set<Route>();\n\n  constructor(private queue: PrefetchRegistry, private router: Router) {}\n\n  preload(route: Route, load: Function) {\n    if (this.loading.has(route)) {\n      // Don't preload the same route twice\n      return EMPTY;\n    }\n    const conn = typeof window !== 'undefined' ? (navigator as any).connection : undefined;\n    if (conn) {\n      // Don't preload if the user is on 2G. or if Save-Data is enabled..\n      if ((conn.effectiveType || '').includes('2g') || conn.saveData) return EMPTY;\n    }\n    // Prevent from preloading\n    if (route.data && route.data.preload === false) {\n      return EMPTY;\n    }\n    const fullPath = findPath(this.router.config, route);\n    if (this.queue.shouldPrefetch(fullPath)) {\n      this.loading.add(route);\n      return load();\n    }\n\n    return EMPTY;\n  }\n}\n\nconst findPath = (config: Route[], route: Route): string => {\n  config = config.slice();\n  const parent = new Map<Route, Route>();\n  const visited = new Set<Route>();\n  while (config.length) {\n    const el = config.shift();\n    visited.add(el);\n    if (el === route) break;\n    let children = el.children || [];\n    const current = (el as any)._loadedConfig;\n    if (current && current.routes) {\n      children = children.concat(current.routes);\n    }\n    children.forEach((r: Route) => {\n      if (visited.has(r)) return;\n      parent.set(r, el);\n      config.push(r);\n    });\n  }\n  let path = '';\n  let current = route;\n\n  while (current) {\n    if (isPrimaryRoute(current)) {\n      path = `/${current.path}${path}`;\n    } else {\n      path = `/(${current.outlet}:${current.path}${path})`;\n    }\n    current = parent.get(current);\n  }\n\n  return path;\n};\n\nfunction isPrimaryRoute(route: Route) {\n  return route.outlet === PRIMARY_OUTLET || !route.outlet;\n}\n","import { NgModule } from '@angular/core';\nimport { LinkDirective } from './link.directive';\nimport { ObservableLinkHandler, PreloadLinkHandler, LinkHandler } from './link-handler.service';\nimport { PrefetchRegistry } from './prefetch-registry.service';\nimport { QuicklinkStrategy } from './quicklink-strategy.service';\n\n@NgModule({\n  declarations: [LinkDirective],\n  providers: [\n    {\n      provide: LinkHandler,\n      useClass: ObservableLinkHandler,\n      multi: true\n    },\n    {\n      provide: LinkHandler,\n      useClass: PreloadLinkHandler,\n      multi: true\n    },\n    PrefetchRegistry,\n    QuicklinkStrategy\n  ],\n  exports: [LinkDirective]\n})\nexport class QuicklinkModule {}\n"]}