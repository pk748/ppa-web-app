import * as tslib_1 from "tslib";
import { Injectable, InjectionToken, NgZone } from '@angular/core';
import { RouterPreloader } from '@angular/router';
import { PrefetchRegistry } from './prefetch-registry.service';
var ɵ0 = function (cb) {
    var start = Date.now();
    return setTimeout(function () {
        cb({
            didTimeout: false,
            timeRemaining: function () {
                return Math.max(0, 50 - (Date.now() - start));
            }
        });
    }, 1);
}, ɵ1 = function () { };
var requestIdleCallback = typeof window !== 'undefined'
    ? window.requestIdleCallback || ɵ0
    : ɵ1;
var observerSupported = function () {
    return typeof window !== 'undefined' ? !!window.IntersectionObserver : false;
};
var ɵ2 = observerSupported;
export var LinkHandler = new InjectionToken('LinkHandler');
var ObservableLinkHandler = /** @class */ (function () {
    function ObservableLinkHandler(loader, queue, ngZone) {
        var _this = this;
        this.loader = loader;
        this.queue = queue;
        this.ngZone = ngZone;
        this.elementLink = new Map();
        this.observer = observerSupported()
            ? new IntersectionObserver(function (entries) {
                entries.forEach(function (entry) {
                    if (entry.isIntersecting) {
                        var link = entry.target;
                        var routerLink_1 = _this.elementLink.get(link);
                        if (!routerLink_1 || !routerLink_1.urlTree)
                            return;
                        _this.queue.add(routerLink_1.urlTree);
                        _this.observer.unobserve(link);
                        requestIdleCallback(function () {
                            _this.loader.preload().subscribe(function () { return void 0; });
                            _this.queue.remove(routerLink_1.urlTree);
                        });
                    }
                });
            })
            : null;
    }
    ObservableLinkHandler.prototype.register = function (el) {
        var _this = this;
        this.elementLink.set(el.element, el);
        this.ngZone.runOutsideAngular(function () {
            _this.observer.observe(el.element);
        });
    };
    // First call to unregister will not hit this.
    ObservableLinkHandler.prototype.unregister = function (el) {
        if (this.elementLink.has(el.element)) {
            this.observer.unobserve(el.element);
            this.elementLink.delete(el.element);
        }
    };
    ObservableLinkHandler.prototype.supported = function () {
        return observerSupported();
    };
    ObservableLinkHandler = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [RouterPreloader, PrefetchRegistry, NgZone])
    ], ObservableLinkHandler);
    return ObservableLinkHandler;
}());
export { ObservableLinkHandler };
var PreloadLinkHandler = /** @class */ (function () {
    function PreloadLinkHandler(loader, queue) {
        this.loader = loader;
        this.queue = queue;
    }
    PreloadLinkHandler.prototype.register = function (el) {
        var _this = this;
        this.queue.add(el.urlTree);
        requestIdleCallback(function () { return _this.loader.preload().subscribe(function () { return void 0; }); });
    };
    PreloadLinkHandler.prototype.unregister = function (_) { };
    PreloadLinkHandler.prototype.supported = function () {
        return true;
    };
    PreloadLinkHandler = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [RouterPreloader, PrefetchRegistry])
    ], PreloadLinkHandler);
    return PreloadLinkHandler;
}());
export { PreloadLinkHandler };
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluay1oYW5kbGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcXVpY2tsaW5rLyIsInNvdXJjZXMiOlsic3JjL2xpbmstaGFuZGxlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbkUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRWxELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO1NBbUJ6RCxVQUFTLEVBQVk7SUFDbkIsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3pCLE9BQU8sVUFBVSxDQUFDO1FBQ2hCLEVBQUUsQ0FBQztZQUNELFVBQVUsRUFBRSxLQUFLO1lBQ2pCLGFBQWEsRUFBRTtnQkFDYixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ2hELENBQUM7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDUixDQUFDLE9BQ0QsY0FBTyxDQUFDO0FBZGQsSUFBTSxtQkFBbUIsR0FDdkIsT0FBTyxNQUFNLEtBQUssV0FBVztJQUMzQixDQUFDLENBQUUsTUFBYyxDQUFDLG1CQUFtQixNQVdsQztJQUNILENBQUMsR0FBUyxDQUFDO0FBRWYsSUFBTSxpQkFBaUIsR0FBRztJQUN4QixPQUFBLE9BQU8sTUFBTSxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFFLE1BQWMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsS0FBSztBQUE5RSxDQUE4RSxDQUFDOztBQUVqRixNQUFNLENBQUMsSUFBTSxXQUFXLEdBQUcsSUFBSSxjQUFjLENBQUMsYUFBYSxDQUFDLENBQUM7QUFHN0Q7SUFzQkUsK0JBQW9CLE1BQXVCLEVBQVUsS0FBdUIsRUFBVSxNQUFjO1FBQXBHLGlCQUF3RztRQUFwRixXQUFNLEdBQU4sTUFBTSxDQUFpQjtRQUFVLFVBQUssR0FBTCxLQUFLLENBQWtCO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQXJCNUYsZ0JBQVcsR0FBRyxJQUFJLEdBQUcsRUFBMEIsQ0FBQztRQUNoRCxhQUFRLEdBQWdDLGlCQUFpQixFQUFFO1lBQ2pFLENBQUMsQ0FBQyxJQUFJLG9CQUFvQixDQUFDLFVBQUEsT0FBTztnQkFDOUIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFBLEtBQUs7b0JBQ25CLElBQUksS0FBSyxDQUFDLGNBQWMsRUFBRTt3QkFDeEIsSUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLE1BQTJCLENBQUM7d0JBRS9DLElBQU0sWUFBVSxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO3dCQUM5QyxJQUFLLENBQUMsWUFBVSxJQUFJLENBQUMsWUFBVSxDQUFDLE9BQU87NEJBQUcsT0FBTzt3QkFFakQsS0FBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsWUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO3dCQUNuQyxLQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQzt3QkFDOUIsbUJBQW1CLENBQUM7NEJBQ2xCLEtBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsU0FBUyxDQUFDLGNBQU0sT0FBQSxLQUFLLENBQUMsRUFBTixDQUFNLENBQUMsQ0FBQzs0QkFDOUMsS0FBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsWUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO3dCQUN4QyxDQUFDLENBQUMsQ0FBQztxQkFDSjtnQkFDSCxDQUFDLENBQUMsQ0FBQztZQUNMLENBQUMsQ0FBQztZQUNKLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFFOEYsQ0FBQztJQUV4Ryx3Q0FBUSxHQUFSLFVBQVMsRUFBaUI7UUFBMUIsaUJBS0M7UUFKQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUM7WUFDNUIsS0FBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3BDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELDhDQUE4QztJQUM5QywwQ0FBVSxHQUFWLFVBQVcsRUFBaUI7UUFDMUIsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDcEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3BDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNyQztJQUNILENBQUM7SUFFRCx5Q0FBUyxHQUFUO1FBQ0UsT0FBTyxpQkFBaUIsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUF6Q1UscUJBQXFCO1FBRGpDLFVBQVUsRUFBRTtpREF1QmlCLGVBQWUsRUFBaUIsZ0JBQWdCLEVBQWtCLE1BQU07T0F0QnpGLHFCQUFxQixDQTBDakM7SUFBRCw0QkFBQztDQUFBLEFBMUNELElBMENDO1NBMUNZLHFCQUFxQjtBQTZDbEM7SUFDRSw0QkFBb0IsTUFBdUIsRUFBVSxLQUF1QjtRQUF4RCxXQUFNLEdBQU4sTUFBTSxDQUFpQjtRQUFVLFVBQUssR0FBTCxLQUFLLENBQWtCO0lBQUcsQ0FBQztJQUVoRixxQ0FBUSxHQUFSLFVBQVMsRUFBaUI7UUFBMUIsaUJBR0M7UUFGQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDM0IsbUJBQW1CLENBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsU0FBUyxDQUFDLGNBQU0sT0FBQSxLQUFLLENBQUMsRUFBTixDQUFNLENBQUMsRUFBN0MsQ0FBNkMsQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFFRCx1Q0FBVSxHQUFWLFVBQVcsQ0FBZ0IsSUFBRyxDQUFDO0lBRS9CLHNDQUFTLEdBQVQ7UUFDRSxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFaVSxrQkFBa0I7UUFEOUIsVUFBVSxFQUFFO2lEQUVpQixlQUFlLEVBQWlCLGdCQUFnQjtPQURqRSxrQkFBa0IsQ0FhOUI7SUFBRCx5QkFBQztDQUFBLEFBYkQsSUFhQztTQWJZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdGlvblRva2VuLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExpbmtEaXJlY3RpdmUgfSBmcm9tICcuL2xpbmsuZGlyZWN0aXZlJztcbmltcG9ydCB7IFJvdXRlclByZWxvYWRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBMaW5rSGFuZGxlclN0cmF0ZWd5IH0gZnJvbSAnLi9saW5rLWhhbmRsZXItc3RyYXRlZ3knO1xuaW1wb3J0IHsgUHJlZmV0Y2hSZWdpc3RyeSB9IGZyb20gJy4vcHJlZmV0Y2gtcmVnaXN0cnkuc2VydmljZSc7XG5cbnR5cGUgUmVxdWVzdElkbGVDYWxsYmFja0hhbmRsZSA9IGFueTtcbnR5cGUgUmVxdWVzdElkbGVDYWxsYmFja09wdGlvbnMgPSB7XG4gIHRpbWVvdXQ6IG51bWJlcjtcbn07XG50eXBlIFJlcXVlc3RJZGxlQ2FsbGJhY2tEZWFkbGluZSA9IHtcbiAgcmVhZG9ubHkgZGlkVGltZW91dDogYm9vbGVhbjtcbiAgdGltZVJlbWFpbmluZzogKCgpID0+IG51bWJlcik7XG59O1xuXG50eXBlIFJlcXVlc3RJZGxlQ2FsbGJhY2sgPSAoKFxuICBjYWxsYmFjazogKChkZWFkbGluZTogUmVxdWVzdElkbGVDYWxsYmFja0RlYWRsaW5lKSA9PiB2b2lkKSxcbiAgb3B0cz86IFJlcXVlc3RJZGxlQ2FsbGJhY2tPcHRpb25zXG4pID0+IFJlcXVlc3RJZGxlQ2FsbGJhY2tIYW5kbGUpO1xuXG5jb25zdCByZXF1ZXN0SWRsZUNhbGxiYWNrOiBSZXF1ZXN0SWRsZUNhbGxiYWNrID1cbiAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcbiAgICA/ICh3aW5kb3cgYXMgYW55KS5yZXF1ZXN0SWRsZUNhbGxiYWNrIHx8XG4gICAgICBmdW5jdGlvbihjYjogRnVuY3Rpb24pIHtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBjYih7XG4gICAgICAgICAgICBkaWRUaW1lb3V0OiBmYWxzZSxcbiAgICAgICAgICAgIHRpbWVSZW1haW5pbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gTWF0aC5tYXgoMCwgNTAgLSAoRGF0ZS5ub3coKSAtIHN0YXJ0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sIDEpO1xuICAgICAgfVxuICAgIDogKCkgPT4ge307XG5cbmNvbnN0IG9ic2VydmVyU3VwcG9ydGVkID0gKCkgPT5cbiAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyAhISh3aW5kb3cgYXMgYW55KS5JbnRlcnNlY3Rpb25PYnNlcnZlciA6IGZhbHNlO1xuXG5leHBvcnQgY29uc3QgTGlua0hhbmRsZXIgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ0xpbmtIYW5kbGVyJyk7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBPYnNlcnZhYmxlTGlua0hhbmRsZXIgaW1wbGVtZW50cyBMaW5rSGFuZGxlclN0cmF0ZWd5IHtcbiAgcHJpdmF0ZSBlbGVtZW50TGluayA9IG5ldyBNYXA8RWxlbWVudCwgTGlua0RpcmVjdGl2ZT4oKTtcbiAgcHJpdmF0ZSBvYnNlcnZlcjogSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgfCBudWxsID0gb2JzZXJ2ZXJTdXBwb3J0ZWQoKVxuICAgID8gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGVudHJpZXMgPT4ge1xuICAgICAgICBlbnRyaWVzLmZvckVhY2goZW50cnkgPT4ge1xuICAgICAgICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZykge1xuICAgICAgICAgICAgY29uc3QgbGluayA9IGVudHJ5LnRhcmdldCBhcyBIVE1MQW5jaG9yRWxlbWVudDtcblxuICAgICAgICAgICAgY29uc3Qgcm91dGVyTGluayA9IHRoaXMuZWxlbWVudExpbmsuZ2V0KGxpbmspO1xuICAgICAgICAgICAgaWYgKCAhcm91dGVyTGluayB8fCAhcm91dGVyTGluay51cmxUcmVlICkgcmV0dXJuO1xuXG4gICAgICAgICAgICB0aGlzLnF1ZXVlLmFkZChyb3V0ZXJMaW5rLnVybFRyZWUpO1xuICAgICAgICAgICAgdGhpcy5vYnNlcnZlci51bm9ic2VydmUobGluayk7XG4gICAgICAgICAgICByZXF1ZXN0SWRsZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5sb2FkZXIucHJlbG9hZCgpLnN1YnNjcmliZSgoKSA9PiB2b2lkIDApO1xuICAgICAgICAgICAgICB0aGlzLnF1ZXVlLnJlbW92ZShyb3V0ZXJMaW5rLnVybFRyZWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgOiBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbG9hZGVyOiBSb3V0ZXJQcmVsb2FkZXIsIHByaXZhdGUgcXVldWU6IFByZWZldGNoUmVnaXN0cnksIHByaXZhdGUgbmdab25lOiBOZ1pvbmUpIHt9XG5cbiAgcmVnaXN0ZXIoZWw6IExpbmtEaXJlY3RpdmUpIHtcbiAgICB0aGlzLmVsZW1lbnRMaW5rLnNldChlbC5lbGVtZW50LCBlbCk7XG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgdGhpcy5vYnNlcnZlci5vYnNlcnZlKGVsLmVsZW1lbnQpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gRmlyc3QgY2FsbCB0byB1bnJlZ2lzdGVyIHdpbGwgbm90IGhpdCB0aGlzLlxuICB1bnJlZ2lzdGVyKGVsOiBMaW5rRGlyZWN0aXZlKSB7XG4gICAgaWYgKHRoaXMuZWxlbWVudExpbmsuaGFzKGVsLmVsZW1lbnQpKSB7XG4gICAgICB0aGlzLm9ic2VydmVyLnVub2JzZXJ2ZShlbC5lbGVtZW50KTtcbiAgICAgIHRoaXMuZWxlbWVudExpbmsuZGVsZXRlKGVsLmVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHN1cHBvcnRlZCgpIHtcbiAgICByZXR1cm4gb2JzZXJ2ZXJTdXBwb3J0ZWQoKTtcbiAgfVxufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUHJlbG9hZExpbmtIYW5kbGVyIGltcGxlbWVudHMgTGlua0hhbmRsZXJTdHJhdGVneSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbG9hZGVyOiBSb3V0ZXJQcmVsb2FkZXIsIHByaXZhdGUgcXVldWU6IFByZWZldGNoUmVnaXN0cnkpIHt9XG5cbiAgcmVnaXN0ZXIoZWw6IExpbmtEaXJlY3RpdmUpIHtcbiAgICB0aGlzLnF1ZXVlLmFkZChlbC51cmxUcmVlKTtcbiAgICByZXF1ZXN0SWRsZUNhbGxiYWNrKCgpID0+IHRoaXMubG9hZGVyLnByZWxvYWQoKS5zdWJzY3JpYmUoKCkgPT4gdm9pZCAwKSk7XG4gIH1cblxuICB1bnJlZ2lzdGVyKF86IExpbmtEaXJlY3RpdmUpIHt9XG5cbiAgc3VwcG9ydGVkKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG4iXX0=