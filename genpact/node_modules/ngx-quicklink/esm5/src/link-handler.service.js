import * as tslib_1 from "tslib";
import { Injectable, InjectionToken, NgZone } from '@angular/core';
import { RouterPreloader } from '@angular/router';
import { PrefetchRegistry } from './prefetch-registry.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
var ɵ0 = function (cb) {
    var start = Date.now();
    return setTimeout(function () {
        cb({
            didTimeout: false,
            timeRemaining: function () {
                return Math.max(0, 50 - (Date.now() - start));
            }
        });
    }, 1);
}, ɵ1 = function () { };
var requestIdleCallback = typeof window !== 'undefined'
    ? window.requestIdleCallback || ɵ0
    : ɵ1;
var observerSupported = function () {
    return typeof window !== 'undefined' ? !!window.IntersectionObserver : false;
};
var ɵ2 = observerSupported;
export var LinkHandler = new InjectionToken('LinkHandler');
var ObservableLinkHandler = /** @class */ (function () {
    function ObservableLinkHandler(loader, queue, ngZone) {
        var _this = this;
        this.loader = loader;
        this.queue = queue;
        this.ngZone = ngZone;
        this.elementLink = new Map();
        this.observer = observerSupported()
            ? new IntersectionObserver(function (entries) {
                entries.forEach(function (entry) {
                    if (entry.isIntersecting) {
                        var link = entry.target;
                        var routerLink_1 = _this.elementLink.get(link);
                        if (!routerLink_1 || !routerLink_1.urlTree)
                            return;
                        _this.queue.add(routerLink_1.urlTree);
                        _this.observer.unobserve(link);
                        requestIdleCallback(function () {
                            _this.loader.preload().subscribe(function () { return void 0; });
                            _this.queue.remove(routerLink_1.urlTree);
                        });
                    }
                });
            })
            : null;
    }
    ObservableLinkHandler.prototype.register = function (el) {
        var _this = this;
        this.elementLink.set(el.element, el);
        this.ngZone.runOutsideAngular(function () {
            _this.observer.observe(el.element);
        });
    };
    // First call to unregister will not hit this.
    ObservableLinkHandler.prototype.unregister = function (el) {
        if (this.elementLink.has(el.element)) {
            this.observer.unobserve(el.element);
            this.elementLink.delete(el.element);
        }
    };
    ObservableLinkHandler.prototype.supported = function () {
        return observerSupported();
    };
    ObservableLinkHandler = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [RouterPreloader, PrefetchRegistry, NgZone])
    ], ObservableLinkHandler);
ObservableLinkHandler.ɵfac = function ObservableLinkHandler_Factory(t) { return new (t || ObservableLinkHandler)(ɵngcc0.ɵɵinject(ɵngcc1.RouterPreloader), ɵngcc0.ɵɵinject(PrefetchRegistry), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };
ObservableLinkHandler.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ObservableLinkHandler, factory: function (t) { return ObservableLinkHandler.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ObservableLinkHandler, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.RouterPreloader }, { type: PrefetchRegistry }, { type: ɵngcc0.NgZone }]; }, null); })();
    return ObservableLinkHandler;
}());
export { ObservableLinkHandler };
var PreloadLinkHandler = /** @class */ (function () {
    function PreloadLinkHandler(loader, queue) {
        this.loader = loader;
        this.queue = queue;
    }
    PreloadLinkHandler.prototype.register = function (el) {
        var _this = this;
        this.queue.add(el.urlTree);
        requestIdleCallback(function () { return _this.loader.preload().subscribe(function () { return void 0; }); });
    };
    PreloadLinkHandler.prototype.unregister = function (_) { };
    PreloadLinkHandler.prototype.supported = function () {
        return true;
    };
    PreloadLinkHandler = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [RouterPreloader, PrefetchRegistry])
    ], PreloadLinkHandler);
PreloadLinkHandler.ɵfac = function PreloadLinkHandler_Factory(t) { return new (t || PreloadLinkHandler)(ɵngcc0.ɵɵinject(ɵngcc1.RouterPreloader), ɵngcc0.ɵɵinject(PrefetchRegistry)); };
PreloadLinkHandler.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: PreloadLinkHandler, factory: function (t) { return PreloadLinkHandler.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PreloadLinkHandler, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.RouterPreloader }, { type: PrefetchRegistry }]; }, null); })();
    return PreloadLinkHandler;
}());
export { PreloadLinkHandler };
export { ɵ0, ɵ1, ɵ2 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,