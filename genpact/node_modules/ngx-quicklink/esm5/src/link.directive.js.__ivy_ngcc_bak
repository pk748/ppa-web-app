import * as tslib_1 from "tslib";
import { Directive, ElementRef, Optional, Inject, Input } from '@angular/core';
import { RouterLink, RouterLinkWithHref } from '@angular/router';
import { LinkHandler } from './link-handler.service';
var LinkDirective = /** @class */ (function () {
    function LinkDirective(linkHandlers, el, link, linkWithHref) {
        this.linkHandlers = linkHandlers;
        this.el = el;
        this.linkHandler = this.linkHandlers.filter(function (h) { return h.supported(); }).shift();
        this.rl = link || linkWithHref;
    }
    LinkDirective.prototype.ngOnChanges = function (c) {
        if (c.routerLink) {
            this.linkHandler.unregister(this);
            this.linkHandler.register(this);
        }
    };
    LinkDirective.prototype.ngOnDestroy = function () {
        this.linkHandler.unregister(this);
    };
    Object.defineProperty(LinkDirective.prototype, "element", {
        get: function () {
            return this.el.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinkDirective.prototype, "urlTree", {
        get: function () {
            return this.rl.urlTree;
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], LinkDirective.prototype, "routerLink", void 0);
    LinkDirective = tslib_1.__decorate([
        Directive({
            selector: '[routerLink]'
        }),
        tslib_1.__param(0, Inject(LinkHandler)),
        tslib_1.__param(2, Optional()),
        tslib_1.__param(3, Optional()),
        tslib_1.__metadata("design:paramtypes", [Array, ElementRef,
            RouterLink,
            RouterLinkWithHref])
    ], LinkDirective);
    return LinkDirective;
}());
export { LinkDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluay5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcXVpY2tsaW5rLyIsInNvdXJjZXMiOlsic3JjL2xpbmsuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixRQUFRLEVBQ1IsTUFBTSxFQUdOLEtBQUssRUFFTixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsVUFBVSxFQUFFLGtCQUFrQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDakUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBTXJEO0lBS0UsdUJBQytCLFlBQW1DLEVBQ3hELEVBQWMsRUFDVixJQUFnQixFQUNoQixZQUFnQztRQUhmLGlCQUFZLEdBQVosWUFBWSxDQUF1QjtRQUN4RCxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBSXRCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQWIsQ0FBYSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDeEUsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLElBQUksWUFBWSxDQUFDO0lBQ2pDLENBQUM7SUFFRCxtQ0FBVyxHQUFYLFVBQVksQ0FBZ0I7UUFDMUIsSUFBSSxDQUFDLENBQUMsVUFBVSxFQUFFO1lBQ2hCLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2xDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2pDO0lBQ0gsQ0FBQztJQUVELG1DQUFXLEdBQVg7UUFDRSxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQsc0JBQUksa0NBQU87YUFBWDtZQUNFLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUM7UUFDL0IsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSxrQ0FBTzthQUFYO1lBQ0UsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQztRQUN6QixDQUFDOzs7T0FBQTtJQS9CUTtRQUFSLEtBQUssRUFBRTs7cURBQStFO0lBRDVFLGFBQWE7UUFIekIsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGNBQWM7U0FDekIsQ0FBQztRQU9HLG1CQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUVuQixtQkFBQSxRQUFRLEVBQUUsQ0FBQTtRQUNWLG1CQUFBLFFBQVEsRUFBRSxDQUFBO3dEQUZDLFVBQVU7WUFDSixVQUFVO1lBQ0Ysa0JBQWtCO09BVG5DLGFBQWEsQ0FpQ3pCO0lBQUQsb0JBQUM7Q0FBQSxBQWpDRCxJQWlDQztTQWpDWSxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBPcHRpb25hbCxcbiAgSW5qZWN0LFxuICBPbkNoYW5nZXMsXG4gIE9uRGVzdHJveSxcbiAgSW5wdXQsXG4gIFNpbXBsZUNoYW5nZXNcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXJMaW5rLCBSb3V0ZXJMaW5rV2l0aEhyZWYgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgTGlua0hhbmRsZXIgfSBmcm9tICcuL2xpbmstaGFuZGxlci5zZXJ2aWNlJztcbmltcG9ydCB7IExpbmtIYW5kbGVyU3RyYXRlZ3kgfSBmcm9tICcuL2xpbmstaGFuZGxlci1zdHJhdGVneSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tyb3V0ZXJMaW5rXSdcbn0pXG5leHBvcnQgY2xhc3MgTGlua0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgQElucHV0KCkgcm91dGVyTGluazogUGljazxSb3V0ZXJMaW5rIHwgUm91dGVyTGlua1dpdGhIcmVmLCAncm91dGVyTGluayc+Wydyb3V0ZXJMaW5rJ107XG4gIHByaXZhdGUgcmw6IFJvdXRlckxpbmsgfCBSb3V0ZXJMaW5rV2l0aEhyZWY7XG4gIHByaXZhdGUgbGlua0hhbmRsZXI6IExpbmtIYW5kbGVyU3RyYXRlZ3k7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChMaW5rSGFuZGxlcikgcHJpdmF0ZSBsaW5rSGFuZGxlcnM6IExpbmtIYW5kbGVyU3RyYXRlZ3lbXSxcbiAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxuICAgIEBPcHRpb25hbCgpIGxpbms6IFJvdXRlckxpbmssXG4gICAgQE9wdGlvbmFsKCkgbGlua1dpdGhIcmVmOiBSb3V0ZXJMaW5rV2l0aEhyZWZcbiAgKSB7XG4gICAgdGhpcy5saW5rSGFuZGxlciA9IHRoaXMubGlua0hhbmRsZXJzLmZpbHRlcihoID0+IGguc3VwcG9ydGVkKCkpLnNoaWZ0KCk7XG4gICAgdGhpcy5ybCA9IGxpbmsgfHwgbGlua1dpdGhIcmVmO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoYzogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjLnJvdXRlckxpbmspIHtcbiAgICAgIHRoaXMubGlua0hhbmRsZXIudW5yZWdpc3Rlcih0aGlzKTtcbiAgICAgIHRoaXMubGlua0hhbmRsZXIucmVnaXN0ZXIodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5saW5rSGFuZGxlci51bnJlZ2lzdGVyKHRoaXMpO1xuICB9XG5cbiAgZ2V0IGVsZW1lbnQoKTogRWxlbWVudCB7XG4gICAgcmV0dXJuIHRoaXMuZWwubmF0aXZlRWxlbWVudDtcbiAgfVxuXG4gIGdldCB1cmxUcmVlKCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMucmwudXJsVHJlZTtcbiAgfVxufVxuIl19