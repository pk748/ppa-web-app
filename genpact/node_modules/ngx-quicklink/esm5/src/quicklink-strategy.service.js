import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Router, PRIMARY_OUTLET } from '@angular/router';
import { PrefetchRegistry } from './prefetch-registry.service';
import { EMPTY } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
var QuicklinkStrategy = /** @class */ (function () {
    function QuicklinkStrategy(queue, router) {
        this.queue = queue;
        this.router = router;
        this.loading = new Set();
    }
    QuicklinkStrategy.prototype.preload = function (route, load) {
        if (this.loading.has(route)) {
            // Don't preload the same route twice
            return EMPTY;
        }
        var conn = typeof window !== 'undefined' ? navigator.connection : undefined;
        if (conn) {
            // Don't preload if the user is on 2G. or if Save-Data is enabled..
            if ((conn.effectiveType || '').includes('2g') || conn.saveData)
                return EMPTY;
        }
        // Prevent from preloading
        if (route.data && route.data.preload === false) {
            return EMPTY;
        }
        var fullPath = findPath(this.router.config, route);
        if (this.queue.shouldPrefetch(fullPath)) {
            this.loading.add(route);
            return load();
        }
        return EMPTY;
    };
    QuicklinkStrategy = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [PrefetchRegistry, Router])
    ], QuicklinkStrategy);
QuicklinkStrategy.ɵfac = function QuicklinkStrategy_Factory(t) { return new (t || QuicklinkStrategy)(ɵngcc0.ɵɵinject(PrefetchRegistry), ɵngcc0.ɵɵinject(ɵngcc1.Router)); };
QuicklinkStrategy.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: QuicklinkStrategy, factory: function (t) { return QuicklinkStrategy.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(QuicklinkStrategy, [{
        type: Injectable
    }], function () { return [{ type: PrefetchRegistry }, { type: ɵngcc1.Router }]; }, null); })();
    return QuicklinkStrategy;
}());
export { QuicklinkStrategy };
var findPath = function (config, route) {
    config = config.slice();
    var parent = new Map();
    var visited = new Set();
    var _loop_1 = function () {
        var el = config.shift();
        visited.add(el);
        if (el === route)
            return "break";
        var children = el.children || [];
        var current_1 = el._loadedConfig;
        if (current_1 && current_1.routes) {
            children = children.concat(current_1.routes);
        }
        children.forEach(function (r) {
            if (visited.has(r))
                return;
            parent.set(r, el);
            config.push(r);
        });
    };
    while (config.length) {
        var state_1 = _loop_1();
        if (state_1 === "break")
            break;
    }
    var path = '';
    var current = route;
    while (current) {
        if (isPrimaryRoute(current)) {
            path = "/" + current.path + path;
        }
        else {
            path = "/(" + current.outlet + ":" + current.path + path + ")";
        }
        current = parent.get(current);
    }
    return path;
};
var ɵ0 = findPath;
function isPrimaryRoute(route) {
    return route.outlet === PRIMARY_OUTLET || !route.outlet;
}
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpY2tsaW5rLXN0cmF0ZWd5LnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9uZ3gtcXVpY2tsaW5rL3NyYy9xdWlja2xpbmstc3RyYXRlZ3kuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQXNCLE1BQU0sRUFBUyxjQUFjLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNwRixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7QUFHN0I7QUFBcUQsSUFHbkQsMkJBQW9CLEtBQXVCLEVBQVUsTUFBYztBQUFJLFFBQW5ELFVBQUssR0FBTCxLQUFLLENBQWtCO0FBQUMsUUFBUyxXQUFNLEdBQU4sTUFBTSxDQUFRO0FBQUMsUUFGcEUsWUFBTyxHQUFHLElBQUksR0FBRyxFQUFTLENBQUM7QUFDN0IsSUFDd0UsQ0FBQztBQUN6RSxJQUNFLG1DQUFPLEdBQVAsVUFBUSxLQUFZLEVBQUUsSUFBYztBQUN0QyxRQUFJLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDakMsWUFBTSxxQ0FBcUM7QUFDM0MsWUFBTSxPQUFPLEtBQUssQ0FBQztBQUNuQixTQUFLO0FBQ0wsUUFBSSxJQUFNLElBQUksR0FBRyxPQUFPLE1BQU0sS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFFLFNBQWlCLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7QUFDM0YsUUFBSSxJQUFJLElBQUksRUFBRTtBQUNkLFlBQU0sbUVBQW1FO0FBQ3pFLFlBQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLElBQUksRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRO0FBQUUsZ0JBQUEsT0FBTyxL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QUFDSCxJQUNFLE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyxDQUFDO0FBQ0Y7QUFDQSxTQUFTLGNBQWMsQ0FBQyxLQUFZO0FBQ3BDLElBQUUsT0FBTyxLQUFLLENBQUMsTUFBTSxLQUFLLGNBQWMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDMUQsQ0FBQztBQUNEO0FBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQcmVsb2FkaW5nU3RyYXRlZ3ksIFJvdXRlciwgUm91dGUsIFBSSU1BUllfT1VUTEVUIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IFByZWZldGNoUmVnaXN0cnkgfSBmcm9tICcuL3ByZWZldGNoLXJlZ2lzdHJ5LnNlcnZpY2UnO1xuaW1wb3J0IHsgRU1QVFkgfSBmcm9tICdyeGpzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFF1aWNrbGlua1N0cmF0ZWd5IGltcGxlbWVudHMgUHJlbG9hZGluZ1N0cmF0ZWd5IHtcbiAgbG9hZGluZyA9IG5ldyBTZXQ8Um91dGU+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBxdWV1ZTogUHJlZmV0Y2hSZWdpc3RyeSwgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcikge31cblxuICBwcmVsb2FkKHJvdXRlOiBSb3V0ZSwgbG9hZDogRnVuY3Rpb24pIHtcbiAgICBpZiAodGhpcy5sb2FkaW5nLmhhcyhyb3V0ZSkpIHtcbiAgICAgIC8vIERvbid0IHByZWxvYWQgdGhlIHNhbWUgcm91dGUgdHdpY2VcbiAgICAgIHJldHVybiBFTVBUWTtcbiAgICB9XG4gICAgY29uc3QgY29ubiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gKG5hdmlnYXRvciBhcyBhbnkpLmNvbm5lY3Rpb24gOiB1bmRlZmluZWQ7XG4gICAgaWYgKGNvbm4pIHtcbiAgICAgIC8vIERvbid0IHByZWxvYWQgaWYgdGhlIHVzZXIgaXMgb24gMkcuIG9yIGlmIFNhdmUtRGF0YSBpcyBlbmFibGVkLi5cbiAgICAgIGlmICgoY29ubi5lZmZlY3RpdmVUeXBlIHx8ICcnKS5pbmNsdWRlcygnMmcnKSB8fCBjb25uLnNhdmVEYXRhKSByZXR1cm4gRU1QVFk7XG4gICAgfVxuICAgIC8vIFByZXZlbnQgZnJvbSBwcmVsb2FkaW5nXG4gICAgaWYgKHJvdXRlLmRhdGEgJiYgcm91dGUuZGF0YS5wcmVsb2FkID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIEVNUFRZO1xuICAgIH1cbiAgICBjb25zdCBmdWxsUGF0aCA9IGZpbmRQYXRoKHRoaXMucm91dGVyLmNvbmZpZywgcm91dGUpO1xuICAgIGlmICh0aGlzLnF1ZXVlLnNob3VsZFByZWZldGNoKGZ1bGxQYXRoKSkge1xuICAgICAgdGhpcy5sb2FkaW5nLmFkZChyb3V0ZSk7XG4gICAgICByZXR1cm4gbG9hZCgpO1xuICAgIH1cblxuICAgIHJldHVybiBFTVBUWTtcbiAgfVxufVxuXG5jb25zdCBmaW5kUGF0aCA9IChjb25maWc6IFJvdXRlW10sIHJvdXRlOiBSb3V0ZSk6IHN0cmluZyA9PiB7XG4gIGNvbmZpZyA9IGNvbmZpZy5zbGljZSgpO1xuICBjb25zdCBwYXJlbnQgPSBuZXcgTWFwPFJvdXRlLCBSb3V0ZT4oKTtcbiAgY29uc3QgdmlzaXRlZCA9IG5ldyBTZXQ8Um91dGU+KCk7XG4gIHdoaWxlIChjb25maWcubGVuZ3RoKSB7XG4gICAgY29uc3QgZWwgPSBjb25maWcuc2hpZnQoKTtcbiAgICB2aXNpdGVkLmFkZChlbCk7XG4gICAgaWYgKGVsID09PSByb3V0ZSkgYnJlYWs7XG4gICAgbGV0IGNoaWxkcmVuID0gZWwuY2hpbGRyZW4gfHwgW107XG4gICAgY29uc3QgY3VycmVudCA9IChlbCBhcyBhbnkpLl9sb2FkZWRDb25maWc7XG4gICAgaWYgKGN1cnJlbnQgJiYgY3VycmVudC5yb3V0ZXMpIHtcbiAgICAgIGNoaWxkcmVuID0gY2hpbGRyZW4uY29uY2F0KGN1cnJlbnQucm91dGVzKTtcbiAgICB9XG4gICAgY2hpbGRyZW4uZm9yRWFjaCgocjogUm91dGUpID0+IHtcbiAgICAgIGlmICh2aXNpdGVkLmhhcyhyKSkgcmV0dXJuO1xuICAgICAgcGFyZW50LnNldChyLCBlbCk7XG4gICAgICBjb25maWcucHVzaChyKTtcbiAgICB9KTtcbiAgfVxuICBsZXQgcGF0aCA9ICcnO1xuICBsZXQgY3VycmVudCA9IHJvdXRlO1xuXG4gIHdoaWxlIChjdXJyZW50KSB7XG4gICAgaWYgKGlzUHJpbWFyeVJvdXRlKGN1cnJlbnQpKSB7XG4gICAgICBwYXRoID0gYC8ke2N1cnJlbnQucGF0aH0ke3BhdGh9YDtcbiAgICB9IGVsc2Uge1xuICAgICAgcGF0aCA9IGAvKCR7Y3VycmVudC5vdXRsZXR9OiR7Y3VycmVudC5wYXRofSR7cGF0aH0pYDtcbiAgICB9XG4gICAgY3VycmVudCA9IHBhcmVudC5nZXQoY3VycmVudCk7XG4gIH1cblxuICByZXR1cm4gcGF0aDtcbn07XG5cbmZ1bmN0aW9uIGlzUHJpbWFyeVJvdXRlKHJvdXRlOiBSb3V0ZSkge1xuICByZXR1cm4gcm91dGUub3V0bGV0ID09PSBQUklNQVJZX09VVExFVCB8fCAhcm91dGUub3V0bGV0O1xufVxuIl19