import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Router, PRIMARY_OUTLET } from '@angular/router';
import { PrefetchRegistry } from './prefetch-registry.service';
import { EMPTY } from 'rxjs';
var QuicklinkStrategy = /** @class */ (function () {
    function QuicklinkStrategy(queue, router) {
        this.queue = queue;
        this.router = router;
        this.loading = new Set();
    }
    QuicklinkStrategy.prototype.preload = function (route, load) {
        if (this.loading.has(route)) {
            // Don't preload the same route twice
            return EMPTY;
        }
        var conn = typeof window !== 'undefined' ? navigator.connection : undefined;
        if (conn) {
            // Don't preload if the user is on 2G. or if Save-Data is enabled..
            if ((conn.effectiveType || '').includes('2g') || conn.saveData)
                return EMPTY;
        }
        // Prevent from preloading
        if (route.data && route.data.preload === false) {
            return EMPTY;
        }
        var fullPath = findPath(this.router.config, route);
        if (this.queue.shouldPrefetch(fullPath)) {
            this.loading.add(route);
            return load();
        }
        return EMPTY;
    };
    QuicklinkStrategy = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [PrefetchRegistry, Router])
    ], QuicklinkStrategy);
    return QuicklinkStrategy;
}());
export { QuicklinkStrategy };
var findPath = function (config, route) {
    config = config.slice();
    var parent = new Map();
    var visited = new Set();
    var _loop_1 = function () {
        var el = config.shift();
        visited.add(el);
        if (el === route)
            return "break";
        var children = el.children || [];
        var current_1 = el._loadedConfig;
        if (current_1 && current_1.routes) {
            children = children.concat(current_1.routes);
        }
        children.forEach(function (r) {
            if (visited.has(r))
                return;
            parent.set(r, el);
            config.push(r);
        });
    };
    while (config.length) {
        var state_1 = _loop_1();
        if (state_1 === "break")
            break;
    }
    var path = '';
    var current = route;
    while (current) {
        if (isPrimaryRoute(current)) {
            path = "/" + current.path + path;
        }
        else {
            path = "/(" + current.outlet + ":" + current.path + path + ")";
        }
        current = parent.get(current);
    }
    return path;
};
var ɵ0 = findPath;
function isPrimaryRoute(route) {
    return route.outlet === PRIMARY_OUTLET || !route.outlet;
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpY2tsaW5rLXN0cmF0ZWd5LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcXVpY2tsaW5rLyIsInNvdXJjZXMiOlsic3JjL3F1aWNrbGluay1zdHJhdGVneS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBc0IsTUFBTSxFQUFTLGNBQWMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3BGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFHN0I7SUFHRSwyQkFBb0IsS0FBdUIsRUFBVSxNQUFjO1FBQS9DLFVBQUssR0FBTCxLQUFLLENBQWtCO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUZuRSxZQUFPLEdBQUcsSUFBSSxHQUFHLEVBQVMsQ0FBQztJQUUyQyxDQUFDO0lBRXZFLG1DQUFPLEdBQVAsVUFBUSxLQUFZLEVBQUUsSUFBYztRQUNsQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzNCLHFDQUFxQztZQUNyQyxPQUFPLEtBQUssQ0FBQztTQUNkO1FBQ0QsSUFBTSxJQUFJLEdBQUcsT0FBTyxNQUFNLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBRSxTQUFpQixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQ3ZGLElBQUksSUFBSSxFQUFFO1lBQ1IsbUVBQW1FO1lBQ25FLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxJQUFJLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUTtnQkFBRSxPQUFPLEtBQUssQ0FBQztTQUM5RTtRQUNELDBCQUEwQjtRQUMxQixJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUssS0FBSyxFQUFFO1lBQzlDLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxJQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDckQsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUN2QyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN4QixPQUFPLElBQUksRUFBRSxDQUFDO1NBQ2Y7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUExQlUsaUJBQWlCO1FBRDdCLFVBQVUsRUFBRTtpREFJZ0IsZ0JBQWdCLEVBQWtCLE1BQU07T0FIeEQsaUJBQWlCLENBMkI3QjtJQUFELHdCQUFDO0NBQUEsQUEzQkQsSUEyQkM7U0EzQlksaUJBQWlCO0FBNkI5QixJQUFNLFFBQVEsR0FBRyxVQUFDLE1BQWUsRUFBRSxLQUFZO0lBQzdDLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDeEIsSUFBTSxNQUFNLEdBQUcsSUFBSSxHQUFHLEVBQWdCLENBQUM7SUFDdkMsSUFBTSxPQUFPLEdBQUcsSUFBSSxHQUFHLEVBQVMsQ0FBQzs7UUFFL0IsSUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzFCLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEIsSUFBSSxFQUFFLEtBQUssS0FBSzsyQkFBUTtRQUN4QixJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQztRQUNqQyxJQUFNLFNBQU8sR0FBSSxFQUFVLENBQUMsYUFBYSxDQUFDO1FBQzFDLElBQUksU0FBTyxJQUFJLFNBQU8sQ0FBQyxNQUFNLEVBQUU7WUFDN0IsUUFBUSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsU0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzVDO1FBQ0QsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFDLENBQVE7WUFDeEIsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFBRSxPQUFPO1lBQzNCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ2xCLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakIsQ0FBQyxDQUFDLENBQUM7O0lBYkwsT0FBTyxNQUFNLENBQUMsTUFBTTs7OztLQWNuQjtJQUNELElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNkLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQztJQUVwQixPQUFPLE9BQU8sRUFBRTtRQUNkLElBQUksY0FBYyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQzNCLElBQUksR0FBRyxNQUFJLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBTSxDQUFDO1NBQ2xDO2FBQU07WUFDTCxJQUFJLEdBQUcsT0FBSyxPQUFPLENBQUMsTUFBTSxTQUFJLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxNQUFHLENBQUM7U0FDdEQ7UUFDRCxPQUFPLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUMvQjtJQUVELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyxDQUFDOztBQUVGLFNBQVMsY0FBYyxDQUFDLEtBQVk7SUFDbEMsT0FBTyxLQUFLLENBQUMsTUFBTSxLQUFLLGNBQWMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDMUQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFByZWxvYWRpbmdTdHJhdGVneSwgUm91dGVyLCBSb3V0ZSwgUFJJTUFSWV9PVVRMRVQgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgUHJlZmV0Y2hSZWdpc3RyeSB9IGZyb20gJy4vcHJlZmV0Y2gtcmVnaXN0cnkuc2VydmljZSc7XG5pbXBvcnQgeyBFTVBUWSB9IGZyb20gJ3J4anMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUXVpY2tsaW5rU3RyYXRlZ3kgaW1wbGVtZW50cyBQcmVsb2FkaW5nU3RyYXRlZ3kge1xuICBsb2FkaW5nID0gbmV3IFNldDxSb3V0ZT4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHF1ZXVlOiBQcmVmZXRjaFJlZ2lzdHJ5LCBwcml2YXRlIHJvdXRlcjogUm91dGVyKSB7fVxuXG4gIHByZWxvYWQocm91dGU6IFJvdXRlLCBsb2FkOiBGdW5jdGlvbikge1xuICAgIGlmICh0aGlzLmxvYWRpbmcuaGFzKHJvdXRlKSkge1xuICAgICAgLy8gRG9uJ3QgcHJlbG9hZCB0aGUgc2FtZSByb3V0ZSB0d2ljZVxuICAgICAgcmV0dXJuIEVNUFRZO1xuICAgIH1cbiAgICBjb25zdCBjb25uID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyAobmF2aWdhdG9yIGFzIGFueSkuY29ubmVjdGlvbiA6IHVuZGVmaW5lZDtcbiAgICBpZiAoY29ubikge1xuICAgICAgLy8gRG9uJ3QgcHJlbG9hZCBpZiB0aGUgdXNlciBpcyBvbiAyRy4gb3IgaWYgU2F2ZS1EYXRhIGlzIGVuYWJsZWQuLlxuICAgICAgaWYgKChjb25uLmVmZmVjdGl2ZVR5cGUgfHwgJycpLmluY2x1ZGVzKCcyZycpIHx8IGNvbm4uc2F2ZURhdGEpIHJldHVybiBFTVBUWTtcbiAgICB9XG4gICAgLy8gUHJldmVudCBmcm9tIHByZWxvYWRpbmdcbiAgICBpZiAocm91dGUuZGF0YSAmJiByb3V0ZS5kYXRhLnByZWxvYWQgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gRU1QVFk7XG4gICAgfVxuICAgIGNvbnN0IGZ1bGxQYXRoID0gZmluZFBhdGgodGhpcy5yb3V0ZXIuY29uZmlnLCByb3V0ZSk7XG4gICAgaWYgKHRoaXMucXVldWUuc2hvdWxkUHJlZmV0Y2goZnVsbFBhdGgpKSB7XG4gICAgICB0aGlzLmxvYWRpbmcuYWRkKHJvdXRlKTtcbiAgICAgIHJldHVybiBsb2FkKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIEVNUFRZO1xuICB9XG59XG5cbmNvbnN0IGZpbmRQYXRoID0gKGNvbmZpZzogUm91dGVbXSwgcm91dGU6IFJvdXRlKTogc3RyaW5nID0+IHtcbiAgY29uZmlnID0gY29uZmlnLnNsaWNlKCk7XG4gIGNvbnN0IHBhcmVudCA9IG5ldyBNYXA8Um91dGUsIFJvdXRlPigpO1xuICBjb25zdCB2aXNpdGVkID0gbmV3IFNldDxSb3V0ZT4oKTtcbiAgd2hpbGUgKGNvbmZpZy5sZW5ndGgpIHtcbiAgICBjb25zdCBlbCA9IGNvbmZpZy5zaGlmdCgpO1xuICAgIHZpc2l0ZWQuYWRkKGVsKTtcbiAgICBpZiAoZWwgPT09IHJvdXRlKSBicmVhaztcbiAgICBsZXQgY2hpbGRyZW4gPSBlbC5jaGlsZHJlbiB8fCBbXTtcbiAgICBjb25zdCBjdXJyZW50ID0gKGVsIGFzIGFueSkuX2xvYWRlZENvbmZpZztcbiAgICBpZiAoY3VycmVudCAmJiBjdXJyZW50LnJvdXRlcykge1xuICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5jb25jYXQoY3VycmVudC5yb3V0ZXMpO1xuICAgIH1cbiAgICBjaGlsZHJlbi5mb3JFYWNoKChyOiBSb3V0ZSkgPT4ge1xuICAgICAgaWYgKHZpc2l0ZWQuaGFzKHIpKSByZXR1cm47XG4gICAgICBwYXJlbnQuc2V0KHIsIGVsKTtcbiAgICAgIGNvbmZpZy5wdXNoKHIpO1xuICAgIH0pO1xuICB9XG4gIGxldCBwYXRoID0gJyc7XG4gIGxldCBjdXJyZW50ID0gcm91dGU7XG5cbiAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICBpZiAoaXNQcmltYXJ5Um91dGUoY3VycmVudCkpIHtcbiAgICAgIHBhdGggPSBgLyR7Y3VycmVudC5wYXRofSR7cGF0aH1gO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXRoID0gYC8oJHtjdXJyZW50Lm91dGxldH06JHtjdXJyZW50LnBhdGh9JHtwYXRofSlgO1xuICAgIH1cbiAgICBjdXJyZW50ID0gcGFyZW50LmdldChjdXJyZW50KTtcbiAgfVxuXG4gIHJldHVybiBwYXRoO1xufTtcblxuZnVuY3Rpb24gaXNQcmltYXJ5Um91dGUocm91dGU6IFJvdXRlKSB7XG4gIHJldHVybiByb3V0ZS5vdXRsZXQgPT09IFBSSU1BUllfT1VUTEVUIHx8ICFyb3V0ZS5vdXRsZXQ7XG59XG4iXX0=